<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8"/>
<title>24 game - Rosetta Code</title>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"a583006972e34980972fddfc4853b1f8",petok:"5cd86a6142fec6abf0fa1e01fb4efa9121ad9dcd-1481835761-1800",zone:"rosettacode.org",rocket:"0",apps:{"ga_key":{"ua":"UA-1219419-1","ga_bs":"2"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=f2befc48d1/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":!1,"wgNamespaceNumber":0,"wgPageName":"24_game","wgTitle":"24 game","wgCurRevisionId":239256,"wgRevisionId":239256,"wgArticleId":4938,"wgIsArticle":!0,"wgIsRedirect":!1,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Solutions by Programming Task","8th","ABAP","Ada","Argile","AutoHotkey","AutoIt","BBC BASIC","Bracmat","C","C sharp","C++","Ceylon","Clojure","COBOL","CoffeeScript","Common Lisp","D","EchoLisp","Elena","Elixir","Erlang","F Sharp","Factor","Falcon","Fortran","GAP","Go","Gosu","Groovy","Haskell","HicEst","Icon","Unicon","Icon Programming Library","J","Java","JavaScript","Julia","Kotlin","Lasso","Liberty BASIC","LiveCode","Locomotive Basic","Logo","Lua","Maple","Mathematica","MATLAB","Octave","MIRC Scripting Language","Modula-2","Ulm's Modula-2 Library","Nim","OCaml","Oforth","OoRexx","OpenEdge/Progress","PARI/GP","Examples needing attention","Perl",
"Perl 6","Phix","PHP","PicoLisp","PL/I","Potion","PowerShell","ProDOS","Prolog","PureBasic","Python","R","Racket","REXX","Ruby","Rust","Scala","Scheme","Sidef","Swift","Tcl","TorqueScript","TUSCRIPT","GUISS/Omit","ML/I/Omit","UNIX Shell","VBA","Zkl","ZX Spectrum Basic","Puzzles"],"wgBreakFrames":!1,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"24_game","wgRelevantArticleId":4938,"wgIsProbablyEditable":!0,"wgRestrictionEdit":[],"wgRestrictionMove":[],"sfgAutocompleteValues":[],"sfgAutocompleteOnAllChars":!1,"sfgFieldProperties":[],"sfgDependentFields":[],"sfgShowOnSelect":[],"sfgScriptPath":"/mw/extensions/SemanticForms",
"sdgDownArrowImage":"/mw/extensions/SemanticDrilldown/skins/down-arrow.png","sdgRightArrowImage":"/mw/extensions/SemanticDrilldown/skins/right-arrow.png"});mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function($,jQuery){mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\"});});mw.loader.load(["ext.smw.style","ext.smw.tooltips","mediawiki.page.startup","mediawiki.legacy.wikibits"]);
} );</script>
<link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=ext.bootstrap.styles&amp;only=styles&amp;skin=chameleon"/>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=chameleon"/>
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async="" src="/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=chameleon"></script>
<meta name="generator" content="MediaWiki 1.26.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<link rel="ExportRDF" type="application/rdf+xml" title="24 game" href="/mw/index.php?title=Special:ExportRDF/24_game&amp;xmlmime=rdf"/>
<link rel="alternate" type="application/x-wiki" title="Edit" href="/mw/index.php?title=24_game&amp;action=edit"/>
<link rel="edit" title="Edit" href="/mw/index.php?title=24_game&amp;action=edit"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/mw/opensearch_desc.php" title="Rosetta Code (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd"/>
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html"/>
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="/mw/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-1219419-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-24_game layout-standard skin-chameleon action-view">
<div class="container">
<div class="row">
<div class="col-lg-3">
 
<div id="p-logo" class="p-logo" role="banner">
<a href="/wiki/Rosetta_Code" title="Visit the main page"><img src="/mw/title.png" alt="Rosetta Code"/></a>
</div>
</div>
<div class="col-lg-9">
<div class="row">
<div class="col-lg-12">
 
<div class="p-personal pull-right" id="p-personal">
<ul class="p-personal-tools list-inline pull-right">
<li id="pt-createaccount"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=24+game&amp;type=signup" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li>
<li id="pt-login"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=24+game" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
</ul>
<div class="newtalk-notifier">
</div>
</div>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<div id="p-search" class="p-search pull-right" role="search">
<form id="searchform" class="mw-search form-inline" action="/mw/index.php">
<input type="hidden" name="title" value="Special:Search"/>
<div class="input-group">
<input name="search" placeholder="Search" title="Search Rosetta Code [f]" accesskey="f" id="searchInput" class="form-control"/>
<div class="input-group-btn">
<button value="Go" id="searchGoButton" name="go" title="Go to a page with this exact name if it exists" type="submit" class="searchGoButton btn btn-default"><span class="glyphicon glyphicon-share-alt"></span></button><button value="Search" id="mw-searchButton" name="fulltext" title="Search the pages for this text" type="submit" class="mw-searchButton btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
</div>
</div>
</form>
</div>
</div>
</div>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<nav class="navbar navbar-default p-navbar" role="navigation" id="mw-navigation">
<div class="container-fluid"><div class="navbar-header">
<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#mw-navigation-collapse">
<span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button>
</div>
<div class="collapse navbar-collapse" id="mw-navigation-collapse"><ul class="nav navbar-nav">
 
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown">Community <b class="caret"></b></a>
<ul class="dropdown-menu p-Community" id="p-Community">
<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
<li id="n-Chat.2FIRC"><a href="/wiki/Special:WebChat">Chat/IRC</a></li>
<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
<li id="n-The-Village-Pump"><a href="/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
<li id="n-Finances"><a href="/wiki/Rosetta_Code:Finances">Finances</a></li>
</ul>
</li>
 
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown">Explore <b class="caret"></b></a>
<ul class="dropdown-menu p-Explore" id="p-Explore">
<li id="n-Languages"><a href="/wiki/Category:Programming_Languages">Languages</a></li>
<li id="n-Tasks"><a href="/wiki/Category:Programming_Tasks">Tasks</a></li>
<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
<li id="n-Similar-sites"><a href="/wiki/Help:Similar_Sites">Similar sites</a></li>
<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
</ul>
</li></ul>
</div> 
</div>
</nav>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<ul class="p-contentnavigation list-inline text-center" id="p-contentnavigation">
 
<li id="p-namespaces">
<ul class="list-inline">
<li id="ca-nstab-main" class="selected"><a href="/wiki/24_game" title="View the content page [c]" accesskey="c" class="selected">Page</a></li>
<li id="ca-talk"><a href="/wiki/Talk:24_game" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
</ul>
</li>
 
<li id="p-views">
<ul class="list-inline">
<li id="ca-edit"><a href="/mw/index.php?title=24_game&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></li>
<li id="ca-history"><a href="/mw/index.php?title=24_game&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="row">
<div class="col-lg-12">
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<div id="content" class="mw-body"><a id="top"></a>
<div id="mw-js-message" style="display:none;"></div>
<div class="contentHeader">
 
<h1 id="firstHeading" class="firstHeading">24 game</h1>
 
<div id="siteSub">From Rosetta Code</div><div id="jump-to-nav" class="mw-jump">Jump to:<a href="#mw-navigation">navigation</a>, <a href="#p-search">search</a></div>
</div><div id="bodyContent">
 
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="infobox" style="width: 2in"><div class="floatleft"><a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/64px-Rcode-button-task-crushed.png" width="64" height="64" srcset="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/96px-Rcode-button-task-crushed.png 1.5x, /mw/images/thumb/b/ba/Rcode-button-task-crushed.png/128px-Rcode-button-task-crushed.png 2x"/></a></div><b>24 game</b><br/>
You are encouraged to <a href="/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>
<p>The <a href="http://en.wikipedia.org/wiki/24_Game" class="extiw" title="wp:24 Game">24 Game</a> tests one's mental arithmetic.
</p><p><br/>
</p>
<dl><dt>Task</dt></dl>
<p>Write a program that <a href="/wiki/Rosetta_Code:Randomness" title="Rosetta Code:Randomness">randomly</a> chooses and <a href="/wiki/Rosetta_Code:User_output" title="Rosetta Code:User output">displays</a> four digits, each from 1 ──► 9 (inclusive) with repetitions allowed.
</p><p>The program should prompt for the player to enter an arithmetic expression using <i>just</i> those, and <i>all</i> of those four digits, used exactly <i>once</i> each. The program should <i>check</i> then <a href="/wiki/Rosetta_Code:Parsing" title="Rosetta Code:Parsing">evaluate the expression</a>.
</p><p>The goal is for the player to <a href="/wiki/Rosetta_Code:User_input" title="Rosetta Code:User input">enter</a> an expression that (numerically) evaluates to <b>24</b>.
</p>
<ul><li> Only the following operators/functions are allowed: multiplication, division, addition, subtraction</li>
<li> Division should use floating point or rational arithmetic, etc, to preserve remainders.</li>
<li> Brackets are allowed, if using an infix expression evaluator.</li>
<li> Forming multiple digit numbers from the supplied digits is <i>disallowed</i>. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).</li>
<li> The order of the digits when given does not have to be preserved.</li></ul>
<p><br/>
</p>
<dl><dt>Notes</dt></dl>
<ul><li> The type of expression evaluator used is not mandated. An <a href="http://en.wikipedia.org/wiki/Reverse_Polish_notation" class="extiw" title="wp:Reverse Polish notation">RPN</a> evaluator is equally acceptable for example.</li>
<li> The task is not for the program to generate the expression, or test whether an expression is even possible.</li></ul>
<p><br/>
</p>
<dl><dt>Related tasks</dt></dl>
<ul><li> <a href="/wiki/24_game/Solve" title="24 game/Solve">24 game/Solve</a></li></ul>
<p><br/>
</p>
<dl><dt>Reference</dt></dl>
<ul><li> <a rel="nofollow" class="external text" href="http://www.bbc.co.uk/dna/h2g2/A933121">The 24 Game</a> on h2g2.</li></ul>
<p><br/><br/>
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#8th"><span class="tocnumber">1</span> <span class="toctext">8th</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#ABAP"><span class="tocnumber">2</span> <span class="toctext">ABAP</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Ada"><span class="tocnumber">3</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#Argile"><span class="tocnumber">4</span> <span class="toctext">Argile</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#AutoHotkey"><span class="tocnumber">5</span> <span class="toctext">AutoHotkey</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#AutoIt"><span class="tocnumber">6</span> <span class="toctext">AutoIt</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#BBC_BASIC"><span class="tocnumber">7</span> <span class="toctext">BBC BASIC</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Bracmat"><span class="tocnumber">8</span> <span class="toctext">Bracmat</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#C"><span class="tocnumber">9</span> <span class="toctext">C</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#C.23"><span class="tocnumber">10</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#C.2B.2B"><span class="tocnumber">11</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#Ceylon"><span class="tocnumber">12</span> <span class="toctext">Ceylon</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#Clojure"><span class="tocnumber">13</span> <span class="toctext">Clojure</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#COBOL"><span class="tocnumber">14</span> <span class="toctext">COBOL</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#CoffeeScript"><span class="tocnumber">15</span> <span class="toctext">CoffeeScript</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#Common_Lisp"><span class="tocnumber">16</span> <span class="toctext">Common Lisp</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#D"><span class="tocnumber">17</span> <span class="toctext">D</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="#EchoLisp"><span class="tocnumber">18</span> <span class="toctext">EchoLisp</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#Elena"><span class="tocnumber">19</span> <span class="toctext">Elena</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#Elixir"><span class="tocnumber">20</span> <span class="toctext">Elixir</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#Erlang"><span class="tocnumber">21</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#F.23"><span class="tocnumber">22</span> <span class="toctext">F#</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#Factor"><span class="tocnumber">23</span> <span class="toctext">Factor</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#Falcon"><span class="tocnumber">24</span> <span class="toctext">Falcon</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="#Fortran"><span class="tocnumber">25</span> <span class="toctext">Fortran</span></a>
<ul>
<li class="toclevel-2 tocsection-26"><a href="#Clever_implementation"><span class="tocnumber">25.1</span> <span class="toctext">Clever implementation</span></a></li>
<li class="toclevel-2 tocsection-27"><a href="#As_a_more_general_recursive_descent_parser:"><span class="tocnumber">25.2</span> <span class="toctext">As a more general recursive descent parser:</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="#GAP"><span class="tocnumber">26</span> <span class="toctext">GAP</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="#Go"><span class="tocnumber">27</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-30"><a href="#Gosu"><span class="tocnumber">28</span> <span class="toctext">Gosu</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="#Groovy"><span class="tocnumber">29</span> <span class="toctext">Groovy</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#Haskell"><span class="tocnumber">30</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#HicEst"><span class="tocnumber">31</span> <span class="toctext">HicEst</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="#Icon_and_Unicon"><span class="tocnumber">32</span> <span class="toctext">Icon and Unicon</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="#J"><span class="tocnumber">33</span> <span class="toctext">J</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="#Java"><span class="tocnumber">34</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="#JavaScript"><span class="tocnumber">35</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-1 tocsection-38"><a href="#Julia"><span class="tocnumber">36</span> <span class="toctext">Julia</span></a></li>
<li class="toclevel-1 tocsection-39"><a href="#Kotlin"><span class="tocnumber">37</span> <span class="toctext">Kotlin</span></a></li>
<li class="toclevel-1 tocsection-40"><a href="#Lasso"><span class="tocnumber">38</span> <span class="toctext">Lasso</span></a></li>
<li class="toclevel-1 tocsection-41"><a href="#Liberty_BASIC"><span class="tocnumber">39</span> <span class="toctext">Liberty BASIC</span></a></li>
<li class="toclevel-1 tocsection-42"><a href="#LiveCode"><span class="tocnumber">40</span> <span class="toctext">LiveCode</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="#Locomotive_Basic"><span class="tocnumber">41</span> <span class="toctext">Locomotive Basic</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#Logo"><span class="tocnumber">42</span> <span class="toctext">Logo</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="#Lua"><span class="tocnumber">43</span> <span class="toctext">Lua</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="#Maple"><span class="tocnumber">44</span> <span class="toctext">Maple</span></a></li>
<li class="toclevel-1 tocsection-47"><a href="#Mathematica"><span class="tocnumber">45</span> <span class="toctext">Mathematica</span></a></li>
<li class="toclevel-1 tocsection-48"><a href="#MATLAB_.2F_Octave"><span class="tocnumber">46</span> <span class="toctext">MATLAB / Octave</span></a></li>
<li class="toclevel-1 tocsection-49"><a href="#mIRC_Scripting_Language"><span class="tocnumber">47</span> <span class="toctext">mIRC Scripting Language</span></a></li>
<li class="toclevel-1 tocsection-50"><a href="#Modula-2"><span class="tocnumber">48</span> <span class="toctext">Modula-2</span></a></li>
<li class="toclevel-1 tocsection-51"><a href="#Nim"><span class="tocnumber">49</span> <span class="toctext">Nim</span></a></li>
<li class="toclevel-1 tocsection-52"><a href="#OCaml"><span class="tocnumber">50</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-1 tocsection-53"><a href="#Oforth"><span class="tocnumber">51</span> <span class="toctext">Oforth</span></a></li>
<li class="toclevel-1 tocsection-54"><a href="#ooRexx"><span class="tocnumber">52</span> <span class="toctext">ooRexx</span></a></li>
<li class="toclevel-1 tocsection-55"><a href="#OpenEdge.2FProgress"><span class="tocnumber">53</span> <span class="toctext">OpenEdge/Progress</span></a></li>
<li class="toclevel-1 tocsection-56"><a href="#PARI.2FGP"><span class="tocnumber">54</span> <span class="toctext">PARI/GP</span></a></li>
<li class="toclevel-1 tocsection-57"><a href="#Perl"><span class="tocnumber">55</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-58"><a href="#Perl_6"><span class="tocnumber">56</span> <span class="toctext">Perl 6</span></a></li>
<li class="toclevel-1 tocsection-59"><a href="#Phix"><span class="tocnumber">57</span> <span class="toctext">Phix</span></a></li>
<li class="toclevel-1 tocsection-60"><a href="#PHP"><span class="tocnumber">58</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-1 tocsection-61"><a href="#PicoLisp"><span class="tocnumber">59</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-62"><a href="#PL.2FI"><span class="tocnumber">60</span> <span class="toctext">PL/I</span></a></li>
<li class="toclevel-1 tocsection-63"><a href="#Potion"><span class="tocnumber">61</span> <span class="toctext">Potion</span></a></li>
<li class="toclevel-1 tocsection-64"><a href="#PowerShell"><span class="tocnumber">62</span> <span class="toctext">PowerShell</span></a></li>
<li class="toclevel-1 tocsection-65"><a href="#ProDOS"><span class="tocnumber">63</span> <span class="toctext">ProDOS</span></a></li>
<li class="toclevel-1 tocsection-66"><a href="#Prolog"><span class="tocnumber">64</span> <span class="toctext">Prolog</span></a></li>
<li class="toclevel-1 tocsection-67"><a href="#PureBasic"><span class="tocnumber">65</span> <span class="toctext">PureBasic</span></a></li>
<li class="toclevel-1 tocsection-68"><a href="#Python"><span class="tocnumber">66</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-69"><a href="#Python_2"><span class="tocnumber">67</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-70"><a href="#R"><span class="tocnumber">68</span> <span class="toctext">R</span></a></li>
<li class="toclevel-1 tocsection-71"><a href="#Racket"><span class="tocnumber">69</span> <span class="toctext">Racket</span></a></li>
<li class="toclevel-1 tocsection-72"><a href="#REXX"><span class="tocnumber">70</span> <span class="toctext">REXX</span></a>
<ul>
<li class="toclevel-2 tocsection-73"><a href="#version_1"><span class="tocnumber">70.1</span> <span class="toctext">version 1</span></a></li>
<li class="toclevel-2 tocsection-74"><a href="#version_2"><span class="tocnumber">70.2</span> <span class="toctext">version 2</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-75"><a href="#Ruby"><span class="tocnumber">71</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-1 tocsection-76"><a href="#Rust"><span class="tocnumber">72</span> <span class="toctext">Rust</span></a></li>
<li class="toclevel-1 tocsection-77"><a href="#Scala"><span class="tocnumber">73</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-1 tocsection-78"><a href="#Scheme"><span class="tocnumber">74</span> <span class="toctext">Scheme</span></a></li>
<li class="toclevel-1 tocsection-79"><a href="#Sidef"><span class="tocnumber">75</span> <span class="toctext">Sidef</span></a></li>
<li class="toclevel-1 tocsection-80"><a href="#Swift"><span class="tocnumber">76</span> <span class="toctext">Swift</span></a></li>
<li class="toclevel-1 tocsection-81"><a href="#Tcl"><span class="tocnumber">77</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-1 tocsection-82"><a href="#TorqueScript"><span class="tocnumber">78</span> <span class="toctext">TorqueScript</span></a></li>
<li class="toclevel-1 tocsection-83"><a href="#TUSCRIPT"><span class="tocnumber">79</span> <span class="toctext">TUSCRIPT</span></a></li>
<li class="toclevel-1 tocsection-84"><a href="#UNIX_Shell"><span class="tocnumber">80</span> <span class="toctext">UNIX Shell</span></a></li>
<li class="toclevel-1 tocsection-85"><a href="#VBA"><span class="tocnumber">81</span> <span class="toctext">VBA</span></a></li>
<li class="toclevel-1 tocsection-86"><a href="#zkl"><span class="tocnumber">82</span> <span class="toctext">zkl</span></a></li>
<li class="toclevel-1 tocsection-87"><a href="#ZX_Spectrum_Basic"><span class="tocnumber">83</span> <span class="toctext">ZX Spectrum Basic</span></a></li>
</ul>
</div>
<h2><span class="mw-headline" id="8th"><a href="/wiki/Category:8th" title="Category:8th">8th</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=1" title="Edit section: 8th">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This is a fully-worked sample of the game in 8th, showing error-detection and user-restriction techniques:
</p>
<pre class="text highlighted_source">&#160;<br/>\ Generate four random digits and display to the user<br/>\ then get an expression from the user using +, -, / and * and the digits<br/>\ the result must equal 24<br/>\ http://8th-dev.com/24game.html<br/>&#160;<br/>\ Only the words in namespace 'game' are available to the player:<br/>ns: game<br/>&#160;<br/>: + n:+&#160;;<br/>: - n:-&#160;;<br/>: * n:*&#160;;<br/>: / n:/&#160;;<br/>&#160;<br/>ns: G<br/>&#160;<br/>var random-digits<br/>var user-input<br/>&#160;<br/>: one-digit \ a -- a<br/>	rand n:abs 9 n:mod n:1+ a:push&#160;;<br/>&#160;<br/>: gen-digits \ - a<br/>	[] clone nip \ the clone nip is not needed in versions past 1.0.2...<br/>	' one-digit 4 times<br/>	' n:cmp a:sort<br/>	random-digits&#160;! &#160;;<br/>&#160;<br/>: prompt-user <br/>	cr &quot;The digits are: &quot; .  random-digits @ . cr&#160;;<br/>&#160;<br/>: goodbye<br/>	cr &quot;Thanks for playing!\n&quot; . cr 0 die&#160;;<br/>&#160;<br/>: get-input<br/>	70 null con:accept dup user-input&#160;!<br/>	null? if drop goodbye then&#160;;<br/>&#160;<br/>: compare-digits<br/>	true swap<br/>	(<br/>		\ inputed-array index<br/>		dup &gt;r<br/>		a:@ <br/>		random-digits @ r&gt; a:@ nip<br/>		n:= not if<br/>			break<br/>			swap drop false swap<br/>		then<br/>	) 0 3 loop drop&#160;;<br/>&#160;<br/>/^\D*(\d)\D+(\d)\D+(\d)\D+(\d)\D*$/  var, digits-regex<br/>&#160;<br/>: all-digits? <br/>	user-input @ digits-regex @ r:match <br/>	null? if drop false else<br/>		5 = not if<br/>			false<br/>		else<br/>			\ convert the captured digits in the regex into a sorted array:<br/>			digits-regex @ <br/>			( r:@ &gt;n swap ) 1 4 loop drop<br/>			4 a:close ' n:cmp a:sort<br/>			compare-digits<br/>		then<br/>	then&#160;;<br/>&#160;<br/>: does-eval?<br/>	0 user-input @ eval 24 n:= <br/>	dup not if<br/>		cr &quot;Sorry, that expression is wrong&quot; . cr<br/>	then&#160;;<br/>&#160;<br/>: check-input<br/>	reset<br/>	all-digits?  if <br/>		does-eval? if<br/>			cr &quot;Excellent!  Your expression: \&quot;&quot; .<br/>			user-input @ .<br/>			&quot;\&quot; worked!&quot; . cr<br/>		then<br/>	else<br/>		cr &quot;You did not use the digits properly, try again.&quot; . cr<br/>	then&#160;;<br/>&#160;<br/>: intro quote |<br/>&#160;<br/>Welcome to the '24 game'!<br/>&#160;<br/>You will be shown four digits each time.  Using only the + - * and / operators<br/>and all the digits (and only the digits), produce the number '24'<br/>&#160;<br/>Enter your result in 8th syntax, e.g.:  4 4 + 2 1 + *<br/>&#160;<br/>To quit the game, just hit enter by itself. Enjoy!<br/>&#160;<br/>	| .&#160;;<br/>&#160;<br/>: start<br/>	\ don't allow anything but the desired words<br/>	ns:game only<br/>	intro<br/>	repeat<br/>		gen-digits<br/>		prompt-user<br/>		get-input<br/>		check-input<br/>	again&#160;;<br/>&#160;<br/>start<br/>&#160;</pre>
<h2><span class="mw-headline" id="ABAP"><a href="/wiki/Category:ABAP" title="Category:ABAP">ABAP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=2" title="Edit section: ABAP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>See <a href="/wiki/24_game/ABAP" title="24 game/ABAP">24 game/ABAP</a>
</p>
<h2><span class="mw-headline" id="Ada"><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=3" title="Edit section: Ada">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>game24.adb:
</p>
<pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;<br/><span class="kw3">with</span> Ada.<span class="me1">Numerics</span>.<span class="me1">Discrete_Random</span>;<br/><span class="kw3">procedure</span> Game_24 <span class="kw1">is</span><br/>   <span class="kw3">subtype</span> Operation <span class="kw1">is</span> Character;<br/>   <span class="kw3">type</span> Op_Array <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">&#40;</span>Positive <span class="kw3">range</span> &lt;&gt;<span class="br0">&#41;</span> <span class="kw3">of</span> Operation;<br/>   <span class="kw3">type</span> Digit <span class="kw1">is</span> <span class="kw3">range</span> <span class="nu0">1</span> .. <span class="nu0">9</span>;<br/>   <span class="kw3">type</span> Digit_Array <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">&#40;</span>Positive <span class="kw3">range</span> &lt;&gt;<span class="br0">&#41;</span> <span class="kw3">of</span> Digit;<br/>   <span class="kw3">package</span> Digit_IO <span class="kw1">is</span> <span class="kw3">new</span> Ada.<span class="me1">Text_IO</span>.<span class="me1">Integer_IO</span> <span class="br0">&#40;</span>Digit<span class="br0">&#41;</span>;<br/>   <span class="kw3">package</span> Random_Digit <span class="kw1">is</span> <span class="kw3">new</span> Ada.<span class="me1">Numerics</span>.<span class="me1">Discrete_Random</span> <span class="br0">&#40;</span>Digit<span class="br0">&#41;</span>;<br/>   Digit_Generator&#160;: Random_Digit.<span class="me1">Generator</span>;<br/>   Given_Digits&#160;: <span class="kw3">array</span> <span class="br0">&#40;</span><span class="nu0">1</span> .. <span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">of</span> Digit;<br/><span class="kw1">begin</span><br/>   Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;24 Game&quot;</span><span class="br0">&#41;</span>;<br/>   Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;Generating 4 digits...&quot;</span><span class="br0">&#41;</span>;<br/>   Random_Digit.<span class="me1">Reset</span> <span class="br0">&#40;</span>Digit_Generator<span class="br0">&#41;</span>;<br/>   <span class="kw1">for</span> I <span class="kw3">in</span> Given_Digits'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>      Given_Digits <span class="br0">&#40;</span>I<span class="br0">&#41;</span>&#160;:= Random_Digit.<span class="me1">Random</span> <span class="br0">&#40;</span>Digit_Generator<span class="br0">&#41;</span>;<br/>   <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>   Ada.<span class="me1">Text_IO</span>.<span class="me1">Put</span> <span class="br0">&#40;</span><span class="st0">&quot;Your Digits:&quot;</span><span class="br0">&#41;</span>;<br/>   <span class="kw1">for</span> I <span class="kw3">in</span> Given_Digits'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>      Digit_IO.<span class="me1">Put</span> <span class="br0">&#40;</span>Given_Digits <span class="br0">&#40;</span>I<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>   <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>   Ada.<span class="me1">Text_IO</span>.<span class="me1">New_Line</span>;<br/>   Ada.<span class="me1">Text_IO</span>.<span class="me1">Put</span> <span class="br0">&#40;</span><span class="st0">&quot;Enter your Expression: &quot;</span><span class="br0">&#41;</span>;<br/>   <span class="kw1">declare</span><br/>      Value&#160;: Integer;<br/>      Input_Operations&#160;: Op_Array <span class="br0">&#40;</span><span class="nu0">1</span> .. <span class="nu0">3</span><span class="br0">&#41;</span>;<br/>      Input_Digits&#160;: Digit_Array <span class="br0">&#40;</span><span class="nu0">1</span> .. <span class="nu0">4</span><span class="br0">&#41;</span>;<br/>      Unused_Digits&#160;: <span class="kw3">array</span> <span class="br0">&#40;</span>Given_Digits'<span class="kw3">Range</span><span class="br0">&#41;</span> <span class="kw3">of</span> Boolean&#160;:=<br/>        <span class="br0">&#40;</span><span class="kw3">others</span> =&gt; True<span class="br0">&#41;</span>;<br/>   <span class="kw1">begin</span><br/>      <span class="co1">-- get input</span><br/>      <span class="kw1">for</span> I <span class="kw3">in</span> <span class="nu0">1</span> .. <span class="nu0">4</span> <span class="kw1">loop</span><br/>         Digit_IO.<span class="me1">Get</span> <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>         <span class="kw3">exit</span> <span class="kw3">when</span> I = <span class="nu0">4</span>;<br/>         Ada.<span class="me1">Text_IO</span>.<span class="me1">Get</span> <span class="br0">&#40;</span>Input_Operations <span class="br0">&#40;</span>I<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>      <span class="co1">-- check input</span><br/>      <span class="kw1">for</span> I <span class="kw3">in</span> Input_Digits'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>         <span class="kw1">declare</span><br/>            Found&#160;: Boolean&#160;:= False;<br/>         <span class="kw1">begin</span><br/>            <span class="kw1">for</span> J <span class="kw3">in</span> Given_Digits'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>               <span class="kw1">if</span> Unused_Digits <span class="br0">&#40;</span>J<span class="br0">&#41;</span> <span class="kw2">and</span> <span class="kw1">then</span><br/>                 Given_Digits <span class="br0">&#40;</span>J<span class="br0">&#41;</span> = Input_Digits <span class="br0">&#40;</span>I<span class="br0">&#41;</span> <span class="kw1">then</span><br/>                  Unused_Digits <span class="br0">&#40;</span>J<span class="br0">&#41;</span>&#160;:= False;<br/>                  Found&#160;:= True;<br/>                  <span class="kw3">exit</span>;<br/>               <span class="kw1">end</span> <span class="kw1">if</span>;<br/>            <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>            <span class="kw1">if</span> <span class="kw2">not</span> Found <span class="kw1">then</span><br/>               Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;Illegal Number used:&quot;</span> &amp;<br/>                                     Digit'Image <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>               <span class="kw1">return</span>;<br/>            <span class="kw1">end</span> <span class="kw1">if</span>;<br/>         <span class="kw1">end</span>;<br/>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>      <span class="co1">-- check value</span><br/>      Value&#160;:= Integer <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>Input_Digits'First<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>      <span class="kw1">for</span> I <span class="kw3">in</span> Input_Operations'<span class="kw3">Range</span> <span class="kw1">loop</span><br/>         <span class="kw1">case</span> Input_Operations <span class="br0">&#40;</span>I<span class="br0">&#41;</span> <span class="kw1">is</span><br/>            <span class="kw3">when</span> '+' =&gt;<br/>               Value&#160;:= Value + Integer <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I + <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            <span class="kw3">when</span> '-' =&gt;<br/>               Value&#160;:= Value - Integer <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I + <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            <span class="kw3">when</span> '*' =&gt;<br/>               Value&#160;:= Value * Integer <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I + <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            <span class="kw3">when</span> '/' =&gt;<br/>               Value&#160;:= Value / Integer <span class="br0">&#40;</span>Input_Digits <span class="br0">&#40;</span>I + <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>            <span class="kw3">when</span> <span class="kw3">others</span> =&gt;<br/>               Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;Illegal Op used:&quot;</span> &amp;<br/>                                     Input_Operations <span class="br0">&#40;</span>I<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>               <span class="kw1">return</span>;<br/>         <span class="kw1">end</span> <span class="kw1">case</span>;<br/>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br/>      <span class="kw1">if</span> Value /= <span class="nu0">24</span> <span class="kw1">then</span><br/>         Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;Value&quot;</span> &amp; Integer'Image <span class="br0">&#40;</span>Value<span class="br0">&#41;</span> &amp;<br/>                               <span class="st0">&quot; is not 24!&quot;</span><span class="br0">&#41;</span>;<br/>      <span class="kw1">else</span><br/>         Ada.<span class="me1">Text_IO</span>.<span class="me1">Put_Line</span> <span class="br0">&#40;</span><span class="st0">&quot;You won!&quot;</span><span class="br0">&#41;</span>;<br/>      <span class="kw1">end</span> <span class="kw1">if</span>;<br/>   <span class="kw1">end</span>;<br/><span class="kw1">end</span> Game_24;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>24 Game
Generating 4 digits...
Your Digits: 4 9 5 5
Enter your Expression: 4*5+9-5
You won!</pre>
<pre>24 Game
Generating 4 digits...
Your Digits: 4 1 9 7
Enter your Expression: 4*9-7+1
Value 30 is not 24!</pre>
<h2><span class="mw-headline" id="Argile"><a href="/wiki/Category:Argile" title="Category:Argile">Argile</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=4" title="Edit section: Argile">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Argile" title="Argile" class="mw-redirect">Argile</a> version 1.0.0</div>
<pre class="text highlighted_source">use std, array, list<br/>&#160;<br/>do<br/>  generate random digits<br/>  show random digits<br/>  let result = parse expression (get input line)<br/>  if result&#160;!= ERROR<br/>    if some digits are unused<br/>      print &quot;Wrong&#160;! (you didn't use all digits)&quot;&#160;; failure++<br/>    else if result == 24.0<br/>      print &quot;Correct&#160;!&quot;&#160;; success++<br/>    else<br/>      print &quot;Wrong&#160;! (you got &quot;result&quot;)&quot;&#160;; failure++<br/> while play again&#160;?<br/>print &quot;success:&quot;success&quot; failure:&quot;failure&quot; total:&quot;(success+failure) as int<br/>&#160;<br/>let success = 0, failure = 0.<br/>&#160;<br/>.: generate random digits&#160;:.<br/>   our nat seed = 0xc6f31 (: default seed when /dev/urandom doesn't exist&#160;:)<br/>   let urandom = fopen &quot;/dev/urandom&quot; &quot;r&quot;<br/>   if  urandom isn't nil<br/>     fread &amp;seed size of seed 1 urandom<br/>     fclose urandom<br/>   Cfunc srandom seed<br/>   seed = (Cfunc random) as nat<br/>   for each (val int d) from 0 to 3<br/>     digits[d] = '1' + (seed&#160;% 9)<br/>     seed /= 9<br/>&#160;<br/>let digits be an array of 4 byte<br/>&#160;<br/>.: show random digits&#160;:.<br/>   print &quot;Enter an expression that equates to 24 using only all these digits:&quot;<br/>   printf &quot;%c ,&#160;%c ,&#160;%c ,&#160;%c\n&quot;(digits[0])(digits[1])(digits[2])(digits[3])<br/>   printf &quot;24 = &quot;<br/>&#160;<br/>.: some digits are unused&#160;:. -&gt; bool<br/>   for each (val int d) from 0 to 3<br/>     return true if digits[d]&#160;!= '\0'<br/>   false<br/>&#160;<br/>.: get input line&#160;:. -&gt; text<br/>   our array of 64 byte line<br/>   Cfunc fgets (line) (size of line) (stdin)<br/>   let int i<br/>   for (i = 0) (line[i]&#160;!= 0) (i++)<br/>     line[i] = '\0' if (line[i] == '\n')<br/>   line as text<br/>&#160;<br/>.: play again&#160;?&#160;:. -&gt; bool<br/>   while true<br/>     printf &quot;Play again&#160;? (y/n) &quot;&#160;; Cfunc fflush stdout<br/>     let answer = get input line<br/>     switch answer[0]<br/>       case 'n' {return false}<br/>       case 'y' {return true }<br/>       default  {continue    }<br/>   false<br/>&#160;<br/>=: ERROR&#160;:= -&gt; real {-32202.0}<br/>&#160;<br/>.: parse expression &lt;text expr&gt;&#160;:. -&gt; real<br/>   let x = 0.0, x_is_set = false, op = ' '.<br/>   let stack be a list of State&#160;; class State {byte op; real x}<br/>   for (stack = nil) (*expr&#160;!= 0) (expr++)<br/>     switch *expr<br/>       case '+'&#160;; case '-'&#160;; case '*'&#160;; case '/'<br/>         error &quot;bad syntax&quot; if not x_is_set<br/>	 op = *expr<br/>       case '1'&#160;; case '2'&#160;; case '3'&#160;; case '4'&#160;; case '5'<br/>       case '6'&#160;; case '7'&#160;; case '8'&#160;; case '9'<br/>	 error &quot;missing operator&quot; if (x_is_set and op == ' ')<br/>	 error &quot;unavailable digit&quot; unless consume digit expr[0]<br/>	 do operation with (expr[0] - '0') as real<br/>       case (Cgen &quot;'('&quot;)<br/>	 error &quot;missing operator&quot; if (op == ' ' but x_is_set)<br/>	 (new list (new State) (code of del State())) &lt;&lt; stack<br/>	 op = ' '&#160;; x_is_set = false (: start fresh state&#160;:)<br/>       case (Cgen &quot;')'&quot;)<br/>         error &quot;mismatched parenthesis&quot; if stack is nil<br/>	 error &quot;wrong syntax&quot; if not x_is_set<br/>	 let y = x<br/>	 x = stack.data.x&#160;; op = stack.data.op<br/>	 delete pop stack<br/>	 do operation with y<br/>       default {error &quot;disallowed character&quot;}<br/>&#160;<br/>       .:new State         &#160;:. -&gt; State {let s=new(State); s.x=x; s.op=op; s}<br/>       .:del State &lt;State s&gt;:.          {               free s              }<br/>       .:do operation with &lt;real y&gt;:.<br/>  	 switch op<br/>	   case '+' {x += y}<br/>	   case '-' {x -= y}<br/>	   case '*' {x *= y}<br/>	   case '/' {x /= y}<br/>	   default  {x  = y; x_is_set = true}<br/>         op = ' '<br/>   =:error&lt;text msg&gt;:= -&gt;real {eprint &quot;Error: &quot;msg&quot; at [&quot;expr&quot;]&quot;;return ERROR}<br/>   .:consume digit &lt;byte b&gt;:. -&gt; bool<br/>     for each (val int d) from 0 to 3<br/>       if digits[d] == b<br/>         digits[d] = '\0'<br/>       	 return true<br/>     false<br/>&#160;<br/>   if stack isn't nil<br/>     delete all stack<br/>     error &quot;unclosed parenthesis&quot;<br/>   return x<br/>&#160;</pre>
<p>compile with:
arc 24_game.arg -o 24_game.c &amp;&amp; gcc 24_game.c -o 24_game /usr/lib/libargrt.a
</p>
<h2><span class="mw-headline" id="AutoHotkey"><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=5" title="Edit section: AutoHotkey">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="autohotkey highlighted_source"><span class="re2">AutoExecute: </span><br/>    Title <span class="sy0">:=</span> <span class="st0">&quot;24 Game&quot;</span> <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <span class="sy0">-</span>MinimizeBox <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Add"><span class="kw7">Add</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/GuiControls.htm#Text"><span class="kw8">Text</span></a><span class="sy0">,</span> w230 vPuzzle <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Add"><span class="kw7">Add</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/GuiControls.htm#Edit"><span class="kw8">Edit</span></a><span class="sy0">,</span> wp vAnswer <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Add"><span class="kw7">Add</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/GuiControls.htm#Button"><span class="kw8">Button</span></a><span class="sy0">,</span> w70<span class="sy0">,</span> <span class="sy0">&amp;</span>Generate <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Add"><span class="kw7">Add</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/GuiControls.htm#Button"><span class="kw8">Button</span></a><span class="sy0">,</span> x<span class="sy0">+</span><span class="nu0">10</span> wp <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Default"><span class="kw7">Default</span></a><span class="sy0">,</span> <span class="sy0">&amp;</span><a href="http://www.autohotkey.com/docs/commands/Gui.htm#Submit"><span class="kw7">Submit</span></a> <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Add"><span class="kw7">Add</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/GuiControls.htm#Button"><span class="kw8">Button</span></a><span class="sy0">,</span> x<span class="sy0">+</span><span class="nu0">10</span> wp<span class="sy0">,</span> E<span class="sy0">&amp;</span>xit <br/>&#160;<br/>&#160;<br/><span class="re2">ButtonGenerate: </span><span class="co1">; new set of numbers </span><br/>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span> <span class="nu0">4</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/Random.htm"><span class="kw3">Random</span></a><span class="sy0">,</span> r<span class="re0">%A_Index%</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">9</span> <br/>    Puzzle <span class="sy0">=</span> <span class="re0">%r1%</span><span class="sy0">,</span> <span class="re0">%r2%</span><span class="sy0">,</span> <span class="re0">%r3%</span><span class="sy0">,</span> <span class="kw1">and</span> <span class="re0">%r4%</span> <br/>    <a href="http://www.autohotkey.com/docs/commands/GuiControl.htm"><span class="kw3">GuiControl</span></a><span class="sy0">,,</span> Puzzle<span class="sy0">,</span> The numbers <span class="re2">are: </span> <span class="re0">%Puzzle%</span>  <span class="sy0">-</span> Good luck! <br/>    <a href="http://www.autohotkey.com/docs/commands/GuiControl.htm"><span class="kw3">GuiControl</span></a><span class="sy0">,,</span> Answer <span class="co1">; empty the edit box </span><br/>    <a href="http://www.autohotkey.com/docs/commands/ControlFocus.htm"><span class="kw3">ControlFocus</span></a><span class="sy0">,</span> Edit1 <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <span class="sy0">-</span>Disabled <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Show"><span class="kw7">Show</span></a><span class="sy0">,,</span> <span class="re0">%Title%</span> <br/><span class="kw1">Return</span> <span class="co1">; end of auto execute section </span><br/>&#160;<br/>&#160;<br/><span class="re2">ButtonSubmit: </span><span class="co1">; check solution </span><br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Submit"><span class="kw7">Submit</span></a><span class="sy0">,</span> NoHide <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <span class="sy0">+</span>Disabled <br/>&#160;<br/>    <span class="co1">; check numbers used </span><br/>    <a href="http://www.autohotkey.com/docs/commands/RegExMatch.htm"><span class="kw3">RegExMatch</span></a><span class="br0">&#40;</span>Answer<span class="sy0">,</span> <span class="st0">&quot;(\d)\D+(\d)\D+(\d)\D+(\d)&quot;</span><span class="sy0">,</span> $<span class="br0">&#41;</span> <br/>    ListPuzzle <span class="sy0">:=</span> r1 <span class="st0">&quot;,&quot;</span> r2 <span class="st0">&quot;,&quot;</span> r3 <span class="st0">&quot;,&quot;</span> r4 <br/>    ListAnswer <span class="sy0">:=</span> $1 <span class="st0">&quot;,&quot;</span> $2 <span class="st0">&quot;,&quot;</span> $3 <span class="st0">&quot;,&quot;</span> $4 <br/>    <a href="http://www.autohotkey.com/docs/commands/Sort.htm"><span class="kw3">Sort</span></a><span class="sy0">,</span> ListPuzzle<span class="sy0">,</span> D<span class="sy0">,</span> <br/>    <a href="http://www.autohotkey.com/docs/commands/Sort.htm"><span class="kw3">Sort</span></a><span class="sy0">,</span> ListAnswer<span class="sy0">,</span> D<span class="sy0">,</span> <br/>    <span class="kw1">If</span> Not ListPuzzle <span class="sy0">=</span> ListAnswer <span class="br0">&#123;</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a><span class="sy0">,</span> <span class="nu0">48</span><span class="sy0">,</span> Error <span class="sy0">-</span> <span class="re0">%Title%</span><span class="sy0">,</span> Numbers used!`n<span class="re0">%Answer%</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/Goto.htm"><span class="kw3">Goto</span></a><span class="sy0">,</span> TryAgain <br/>    <span class="br0">&#125;</span> <br/>&#160;<br/>    <span class="co1">; check operators used </span><br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="sy0">+,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="sy0">-,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="sy0">*,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="sy0">/,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="br0">&#40;</span><span class="sy0">,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="br0">&#41;</span><span class="sy0">,,</span> All <br/>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span> <span class="nu0">9</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="sy0">,</span> $<span class="sy0">,</span> $<span class="sy0">,</span> <span class="re0">%A_Index%</span><span class="sy0">,,</span> All <br/>    <span class="kw1">If</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">StrLen</span></a><span class="br0">&#40;</span>$<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <br/>    <span class="kw1">Or</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">InStr</span></a><span class="br0">&#40;</span>Answer<span class="sy0">,</span> <span class="st0">&quot;**&quot;</span><span class="br0">&#41;</span> <br/>    <span class="kw1">Or</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">InStr</span></a><span class="br0">&#40;</span>Answer<span class="sy0">,</span> <span class="st0">&quot;//&quot;</span><span class="br0">&#41;</span> <br/>    <span class="kw1">Or</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">InStr</span></a><span class="br0">&#40;</span>Answer<span class="sy0">,</span> <span class="st0">&quot;++&quot;</span><span class="br0">&#41;</span> <br/>    <span class="kw1">Or</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">InStr</span></a><span class="br0">&#40;</span>Answer<span class="sy0">,</span> <span class="st0">&quot;--&quot;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a><span class="sy0">,</span> <span class="nu0">48</span><span class="sy0">,</span> Error <span class="sy0">-</span> <span class="re0">%Title%</span><span class="sy0">,</span> Operators used!`n<span class="re0">%Answer%</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/Goto.htm"><span class="kw3">Goto</span></a><span class="sy0">,</span> TryAgain <br/>    <span class="br0">&#125;</span> <br/>&#160;<br/>    <span class="co1">; check result </span><br/>    Result <span class="sy0">:=</span> Eval<span class="br0">&#40;</span>Answer<span class="br0">&#41;</span> <br/>    <span class="kw1">If</span> Not Result <span class="sy0">=</span> <span class="nu0">24</span> <span class="br0">&#123;</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a><span class="sy0">,</span> <span class="nu0">48</span><span class="sy0">,</span> Error <span class="sy0">-</span> <span class="re0">%Title%</span><span class="sy0">,</span> Result incorrect!`n<span class="re0">%Result%</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/Goto.htm"><span class="kw3">Goto</span></a><span class="sy0">,</span> TryAgain <br/>    <span class="br0">&#125;</span> <br/>&#160;<br/>    <span class="co1">; if we are sill here </span><br/>    <a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="re0">%Title%</span><span class="sy0">,</span> Correct solution! Play again? <br/>    <a href="http://www.autohotkey.com/docs/commands/IfMsgBox.htm"><span class="kw3">IfMsgBox</span></a><span class="sy0">,</span> Yes <br/>        <a href="http://www.autohotkey.com/docs/commands/Gosub.htm"><span class="kw3">Gosub</span></a><span class="sy0">,</span> ButtonGenerate <br/>    <span class="kw1">Else</span> <br/>        <a href="http://www.autohotkey.com/docs/commands/ExitApp.htm"><span class="kw3">ExitApp</span></a> <br/><span class="kw1">Return</span> <br/>&#160;<br/>&#160;<br/><span class="re2">TryAgain: </span><span class="co1">; alternative ending of routine ButtonSubmit </span><br/>    <a href="http://www.autohotkey.com/docs/commands/ControlFocus.htm"><span class="kw3">ControlFocus</span></a><span class="sy0">,</span> Edit1 <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <span class="sy0">-</span>Disabled <br/>    <a href="http://www.autohotkey.com/docs/commands/Gui.htm"><span class="kw3">Gui</span></a><span class="sy0">,</span> <a href="http://www.autohotkey.com/docs/commands/Gui.htm#Show"><span class="kw7">Show</span></a> <br/><span class="kw1">Return</span> <br/>&#160;<br/>&#160;<br/><a href="http://www.autohotkey.com/docs/commands/Gui.htm#GuiClose"><span class="kw7">GuiClose</span></a>: <br/><a href="http://www.autohotkey.com/docs/commands/Gui.htm#GuiEscape"><span class="kw7">GuiEscape</span></a>: <br/><span class="re2">ButtonExit: </span><br/>    <a href="http://www.autohotkey.com/docs/commands/ExitApp.htm"><span class="kw3">ExitApp</span></a> <br/><span class="kw1">Return</span> <br/>&#160;<br/>&#160;<br/><span class="co1">;--------------------------------------------------------------------------- </span><br/>Eval<span class="br0">&#40;</span>Expr<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">; evaluate expression using separate AHK process </span><br/><span class="co1">;--------------------------------------------------------------------------- </span><br/>    <span class="co1">; credit for this function goes to AutoHotkey forum member Laszlo </span><br/>    <span class="co1">; http://www.autohotkey.com/forum/topic9578.html </span><br/>    <span class="co1">;----------------------------------------------------------------------- </span><br/>    static File <span class="sy0">:=</span> <span class="st0">&quot;24$Temp.ahk&quot;</span> <br/>&#160;<br/>    <span class="co1">; delete old temporary file, and write new </span><br/>    <a href="http://www.autohotkey.com/docs/commands/FileDelete.htm"><span class="kw3">FileDelete</span></a><span class="sy0">,</span> <span class="re0">%File%</span> <br/>    FileContent <span class="sy0">:=</span> <span class="st0">&quot;#NoTrayIcon`r`n&quot;</span> <br/>                <span class="sy0">.</span>  <span class="st0">&quot;FileDelete, &quot;</span> File <span class="st0">&quot;`r`n&quot;</span> <br/>                <span class="sy0">.</span>  <span class="st0">&quot;FileAppend, `% &quot;</span> Expr <span class="st0">&quot;, &quot;</span> File <span class="st0">&quot;`r`n&quot;</span> <br/>    <a href="http://www.autohotkey.com/docs/commands/FileAppend.htm"><span class="kw3">FileAppend</span></a><span class="sy0">,</span> <span class="re0">%FileContent%</span><span class="sy0">,</span> <span class="re0">%File%</span> <br/>&#160;<br/>    <span class="co1">; run AHK to execute temp script, evaluate expression </span><br/>    <a href="http://www.autohotkey.com/docs/commands/RunWait.htm"><span class="kw3">RunWait</span></a><span class="sy0">,</span> <span class="re0">%A_AhkPath%</span> <span class="re0">%File%</span> <br/>&#160;<br/>    <span class="co1">; get result </span><br/>    <a href="http://www.autohotkey.com/docs/commands/FileRead.htm"><span class="kw3">FileRead</span></a><span class="sy0">,</span> Result<span class="sy0">,</span> <span class="re0">%File%</span> <br/>    <a href="http://www.autohotkey.com/docs/commands/FileDelete.htm"><span class="kw3">FileDelete</span></a><span class="sy0">,</span> <span class="re0">%File%</span> <br/>    <span class="kw1">Return</span><span class="sy0">,</span> Result <br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="AutoIt"><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=6" title="Edit section: AutoIt">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="autoit highlighted_source">&#160;<br/><span class="co0">;AutoIt Script Example</span><br/><span class="co0">;by Daniel Barnes</span><br/><span class="co0">;spam me at djbarnes at orcon dot net dot en zed</span><br/><span class="co0">;13/08/2012</span><br/>&#160;<br/><span class="co0">;Choose four random digits (1-9) with repetitions allowed:</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">global</span></a> <span class="re0">$digits</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">FOR</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">TO</span></a> <span class="nu0">4</span><br/>	<span class="re0">$digits</span> <span class="sy0">&amp;=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/Random.htm"><span class="kw3">Random</span></a><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">NEXT</span></a><br/>&#160;<br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">While</span></a> <span class="nu0">1</span><br/>	main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">WEnd</span></a><br/>&#160;<br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Func</span></a> main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>	<span class="re0">$text</span>  <span class="sy0">=</span> <span class="st0">&quot;Enter an equation (using all of, and only, the single digits &quot;</span><span class="sy0">&amp;</span><span class="re0">$digits</span> <span class="sy0">&amp;</span><span class="st0">&quot;)&quot;</span><span class="sy0">&amp;</span><a href="http://www.autoitscript.com/autoit3/docs/macros.htm"><span class="kw2"><span class="re0">@CRLF</span></span></a><br/>	<span class="re0">$text</span> <span class="sy0">&amp;=</span> <span class="st0">&quot;which evaluates to exactly 24. Only multiplication (*) division (/)&quot;</span><span class="sy0">&amp;</span><a href="http://www.autoitscript.com/autoit3/docs/macros.htm"><span class="kw2"><span class="re0">@CRLF</span></span></a><br/>	<span class="re0">$text</span> <span class="sy0">&amp;=</span> <span class="st0">&quot;addition (+) and subtraction (-) operations and parentheses are allowed:&quot;</span><br/>	<span class="re0">$input</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/InputBox.htm"><span class="kw3">InputBox</span></a> <span class="br0">&#40;</span><span class="st0">&quot;24 Game&quot;</span><span class="sy0">,</span><span class="re0">$text</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="sy0">,</span><span class="nu0">400</span><span class="sy0">,</span><span class="nu0">150</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/macros.htm"><span class="kw2"><span class="re0">@error</span></span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">exit</span></a><br/>&#160;<br/>	<span class="co0">;remove any spaces in input</span><br/>	<span class="re0">$input</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$input</span><span class="sy0">,</span><span class="st0">&quot; &quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>	<span class="co0">;check correct characters were used</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm"><span class="kw3">StringLen</span></a><span class="br0">&#40;</span><span class="re0">$input</span><span class="br0">&#41;</span><br/>		<span class="re0">$chr</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm"><span class="kw3">StringMid</span></a><span class="br0">&#40;</span><span class="re0">$input</span><span class="sy0">,</span><span class="re0">$i</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Not</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringInStr.htm"><span class="kw3">StringInStr</span></a><span class="br0">&#40;</span><span class="st0">&quot;123456789*/+-()&quot;</span><span class="sy0">,</span><span class="re0">$chr</span><span class="br0">&#41;</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>			<a href="http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm"><span class="kw3">MsgBox</span></a> <span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="st0">&quot;ERROR&quot;</span><span class="sy0">,</span><span class="st0">&quot;Invalid character used: '&quot;</span><span class="sy0">&amp;</span><span class="re0">$chr</span><span class="sy0">&amp;</span><span class="st0">&quot;'&quot;</span><span class="br0">&#41;</span><br/>			<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">return</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">endif</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br/>&#160;<br/>	<span class="co0">;validate the equation uses all of the 4 characters, and nothing else</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <span class="re0">$input</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;(&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;)&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>	<span class="co0">;validate the length of the input - if its not 7 characters long then the user has done something wrong</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm"><span class="kw3">StringLen</span></a> <span class="br0">&#40;</span><span class="re0">$test</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">7</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm"><span class="kw3">MsgBox</span></a> <span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span><span class="st0">&quot;ERROR&quot;</span><span class="sy0">,</span><span class="st0">&quot;The equation &quot;</span><span class="sy0">&amp;</span><span class="re0">$test</span><span class="sy0">&amp;</span><span class="st0">&quot; is invalid&quot;</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">return</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">endif</span></a><br/>&#160;<br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;/&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;*&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;-&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>	<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringReplace.htm"><span class="kw3">StringReplace</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="st0">&quot;+&quot;</span><span class="sy0">,</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm"><span class="kw3">StringLen</span></a><span class="br0">&#40;</span><span class="re0">$digits</span><span class="br0">&#41;</span><br/>		<span class="re0">$digit</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm"><span class="kw3">StringMid</span></a><span class="br0">&#40;</span><span class="re0">$digits</span><span class="sy0">,</span><span class="re0">$i</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$ii</span> <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm"><span class="kw3">StringLen</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="br0">&#41;</span><br/>			<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a>  <a href="http://www.autoitscript.com/autoit3/docs/functions/StringMid.htm"><span class="kw3">StringMid</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="re0">$ii</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="re0">$digit</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>				<span class="re0">$test</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringLeft.htm"><span class="kw3">StringLeft</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><span class="re0">$ii</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">&amp;</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm"><span class="kw3">StringRight</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="sy0">,</span><a href="http://www.autoitscript.com/autoit3/docs/functions/StringLen.htm"><span class="kw3">StringLen</span></a><span class="br0">&#40;</span><span class="re0">$test</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="re0">$ii</span><span class="br0">&#41;</span><br/>				<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">ExitLoop</span></a><br/>			<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">endif</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <span class="re0">$test</span> <span class="sy0">&lt;&gt;</span> <span class="st0">&quot;&quot;</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm"><span class="kw3">MsgBox</span></a> <span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="st0">&quot;ERROR&quot;</span><span class="sy0">,</span> <span class="st0">&quot;The equation didn't use all 4 characters, and nothing else!&quot;</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">return</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">endif</span></a><br/>&#160;<br/>	<span class="re0">$try</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/Execute.htm"><span class="kw3">Execute</span></a><span class="br0">&#40;</span><span class="re0">$input</span><span class="br0">&#41;</span><br/>&#160;<br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <span class="re0">$try</span> <span class="sy0">=</span> <span class="nu0">24</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm"><span class="kw3">MsgBox</span></a> <span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="st0">&quot;24 Game&quot;</span><span class="sy0">,</span><span class="st0">&quot;Well done. Your equation (&quot;</span><span class="sy0">&amp;</span><span class="re0">$input</span><span class="sy0">&amp;</span><span class="st0">&quot;) = 24!&quot;</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Exit</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Else</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/functions/MsgBox.htm"><span class="kw3">MsgBox</span></a> <span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="st0">&quot;24 Game&quot;</span><span class="sy0">,</span><span class="st0">&quot;Fail. Your equation (&quot;</span><span class="sy0">&amp;</span><span class="re0">$input</span><span class="sy0">&amp;</span><span class="st0">&quot;) = &quot;</span><span class="sy0">&amp;</span><span class="re0">$try</span><span class="sy0">&amp;</span><span class="st0">&quot;!&quot;</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">return</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">endif</span></a><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">EndFunc</span></a><br/>&#160;</pre>
<h2><span class="mw-headline" id="BBC_BASIC"><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=7" title="Edit section: BBC BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">      REM Choose four random digits (1-9) with repetitions allowed:<br/>      DIM digits%(4), check%(4)<br/>      FOR choice% = 1 TO 4<br/>        digits%(choice%) = RND(9)<br/>      NEXT choice%<br/>&#160;<br/>      REM Prompt the player:<br/>      PRINT &quot;Enter an equation (using all of, and only, the single digits &quot;;<br/>      FOR index% = 1 TO 4<br/>        PRINT&#160;; digits%(index%)&#160;;<br/>        IF index%&lt;&gt;4 PRINT &quot; &quot;&#160;;<br/>      NEXT<br/>      PRINT &quot;)&quot;<br/>      PRINT &quot;which evaluates to exactly 24.  Only multiplication (*), division (/),&quot;<br/>      PRINT &quot;addition (+) &amp; subtraction (-) operations and parentheses are allowed:&quot;<br/>      INPUT &quot;24 = &quot; equation$<br/>&#160;<br/>      REPEAT<br/>&#160;<br/>        REM Check that the correct digits are used:<br/>        check%() = 0<br/>        FOR char% = 1 TO LEN(equation$)<br/>          digit% = INSTR(&quot;0123456789&quot;, MID$(equation$, char%, 1)) - 1<br/>          IF digit% &gt;= 0 THEN<br/>            FOR index% = 1 TO 4<br/>              IF digit% = digits%(index%) THEN<br/>                IF NOT check%(index%) check%(index%) = TRUE&#160;: EXIT FOR<br/>              ENDIF<br/>            NEXT index%<br/>            IF index% &gt; 4 THEN<br/>              PRINT &quot;Sorry, you used the illegal digit &quot;; digit%<br/>              EXIT REPEAT<br/>            ENDIF<br/>          ENDIF<br/>        NEXT char%<br/>&#160;<br/>        FOR index% = 1 TO 4<br/>          IF NOT check%(index%) THEN<br/>            PRINT &quot;Sorry, you failed to use the digit &quot;&#160;; digits%(index%)<br/>            EXIT REPEAT<br/>          ENDIF<br/>        NEXT index%<br/>&#160;<br/>        REM Check that no pairs of digits are used:<br/>        FOR pair% = 11 TO 99<br/>          IF INSTR(equation$, STR$(pair%)) THEN<br/>            PRINT &quot;Sorry, you may not use a pair of digits &quot;; pair%<br/>            EXIT REPEAT<br/>          ENDIF<br/>        NEXT pair%<br/>&#160;<br/>        REM Check whether the equation evaluates to 24:<br/>        ON ERROR LOCAL PRINT &quot;Sorry, there was an error in the equation&quot;&#160;: EXIT REPEAT<br/>        result = EVAL(equation$)<br/>        RESTORE ERROR<br/>        IF result = 24 THEN<br/>          PRINT &quot;Congratulations, you succeeded in the task!&quot;<br/>        ELSE<br/>          PRINT &quot;Sorry, your equation evaluated to &quot;&#160;; result &quot; rather than 24!&quot;<br/>        ENDIF<br/>&#160;<br/>      UNTIL TRUE<br/>&#160;<br/>      INPUT '&quot;Play again&quot;, answer$<br/>      IF LEFT$(answer$,1) = &quot;y&quot; OR LEFT$(answer$,1) = &quot;Y&quot; THEN CLS&#160;: RUN<br/>      QUIT</pre>
<p><br/>
</p>
<h2><span class="mw-headline" id="Bracmat"><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=8" title="Edit section: Bracmat">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">  ( 24-game<br/>  =     m-w m-z 4numbers answer expr numbers<br/>      , seed get-random convertBinaryMinusToUnary<br/>      , convertDivisionToMultiplication isExpresssion reciprocal<br/>    .   (seed=.!arg:(~0:~/#?m-w.~0:~/#?m-z))<br/>      &amp; seed$!arg<br/>      &amp; ( get-random<br/>        =   <br/>          .   36969*mod$(!m-z.65536)+div$(!m-z.65536):?m-z<br/>            &amp; 18000*mod$(!m-w.65536)+div$(!m-w.65536):?m-w<br/>            &amp; mod$(!m-z*65536+!m-w.9)+1<br/>        )<br/>      &amp; ( convertBinaryMinusToUnary<br/>        =   a z<br/>          .     @(!arg:%?a &quot;-&quot;&#160;?z)<br/>              &amp; str$(!a &quot;+-1*&quot; convertBinaryMinusToUnary$!z)<br/>            |&#160;!arg<br/>        )<br/>      &amp; (reciprocal=.!arg^-1)<br/>      &amp; ( convertDivisionToMultiplication<br/>        =   a z<br/>          .     @(!arg:?a &quot;/&quot;&#160;?z)<br/>              &amp; str$(!a &quot;*reciprocal$&quot; convertDivisionToMultiplication$!z)<br/>            |&#160;!arg<br/>        )<br/>      &amp; ( isExpresssion<br/>        =   A Z expr<br/>          .   @(&#160;!arg<br/>              &#160;:  &#160;?A<br/>                   (&quot;+&quot;|&quot;-&quot;|&quot;*&quot;|&quot;/&quot;)<br/>                   (&#160;?Z<br/>                   &amp; isExpresssion$!A<br/>                   &amp; isExpresssion$!Z<br/>                   )<br/>               )<br/>            |  &#160;!numbers:?A&#160;!arg&#160;?Z<br/>              &amp;&#160;!A&#160;!Z:?numbers<br/>            |   ( @(!arg:&quot;(&quot;&#160;?expr &quot;)&quot;)<br/>                | @(!arg:(&quot; &quot;|\t)&#160;?expr)<br/>                | @(!arg:?expr (&quot; &quot;|\t))<br/>                )<br/>              &amp; isExpresssion$!expr<br/>        )<br/>      &amp;   out<br/>        $ &quot;Enter an expression that evaluates to 24 by combining the following numbers.&quot;<br/>      &amp; out$&quot;You may only use the operators + - * /&quot;<br/>      &amp; out$&quot;Parentheses and spaces are allowed.&quot;<br/>      &amp;   whl<br/>        ' (   get-random$() get-random$() get-random$() get-random$<br/>           &#160;:&#160;?4numbers<br/>          &amp; out$!4numbers<br/>          &amp;   whl<br/>            ' ( get'(,STR):?expr:~<br/>              &amp;&#160;!4numbers:?numbers<br/>              &amp; ~(isExpresssion$!expr&amp;!numbers:)<br/>              &amp;   out<br/>                $ ( str<br/>                  $ ( &quot;[&quot;<br/>                     &#160;!expr<br/>                      &quot;] is not a valid expression. Try another expression.&quot;<br/>                    )<br/>                  )<br/>              )<br/>          &amp;&#160;!expr:~<br/>          &amp; convertBinaryMinusToUnary$!expr:?expr<br/>          &amp; convertDivisionToMultiplication$!expr:?expr<br/>          &amp; get$(!expr,MEM):?answer<br/>          &amp; out$(str$(!expr &quot; = &quot;&#160;!answer))<br/>          &amp;  &#160;!answer<br/>           &#160;: ( 24&amp;out$Right!<br/>              | #&amp;out$Wrong!<br/>              )<br/>          &amp; out$&quot;Try another one:&quot;<br/>          )<br/>      &amp; out$bye<br/>  )<br/>&amp; 24-game$(13.14)<br/>&amp;&#160;;</pre>
<pre>Enter an expression that evaluates to 24 by combining the following numbers.
You may only use the operators + - * /
Parentheses and spaces are allowed.
4 2 2 7
4*7 - 2-2
4*7 +-1* 2+-1*2 = 24
Right!
Try another one:
4 7 9 8
((4) *(8 - (9- 7))
[((4) *(8 - (9- 7))] is not a valid expression. Try another expression.
((4) *(8 - (9- 7)))
((4) *(8 +-1* (9+-1* 7))) = 24
Right!
Try another one:
9 5 8 5
5 * 5 - (9 - 8)
5 * 5 +-1* (9 +-1* 8) = 24
Right!
Try another one:
5 9 7 8
5*8 - 9 - 7
5*8 +-1* 9 +-1* 7 = 24
Right!
Try another one:
7 8 6 2
8 * ((7 - 6) + 2)
8 * ((7 +-1* 6) + 2) = 24
Right!
Try another one:
8 6 8 1
8 * (1 + 8 - 6)
8 * (1 + 8 +-1* 6) = 24
Right!
Try another one:
8 2 2 4
8 * (2 + 4)/2
8 * (2 + 4)*reciprocal$2 = 24
Right!
Try another one:
8 4 6 7

bye</pre>
<h2><span class="mw-headline" id="C"><a href="/wiki/Category:C" title="Category:C">C</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=9" title="Edit section: C">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Simple recursive descent parser. It doesn't have a real lexer, because all tokens are single character (digits, operators and parens). Code is a little too long.
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdio.h&gt;</span><br/><span class="co2">#include &lt;ctype.h&gt;</span><br/><span class="co2">#include &lt;stdlib.h&gt;</span><br/><span class="co2">#include &lt;setjmp.h&gt;</span><br/><span class="co2">#include &lt;time.h&gt;</span><br/>&#160;<br/>jmp_buf ctx<span class="sy0">;</span><br/><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>msg<span class="sy0">;</span><br/>&#160;<br/><span class="kw2">enum</span> <span class="br0">&#123;</span> OP_NONE <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> OP_NUM<span class="sy0">,</span> OP_ADD<span class="sy0">,</span> OP_SUB<span class="sy0">,</span> OP_MUL<span class="sy0">,</span> OP_DIV <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">typedef</span> <span class="kw4">struct</span> expr_t <span class="sy0">*</span>expr<span class="sy0">,</span> expr_t<span class="sy0">;</span><br/><span class="kw4">struct</span> expr_t <span class="br0">&#123;</span><br/>	<span class="kw4">int</span> op<span class="sy0">,</span> val<span class="sy0">,</span> used<span class="sy0">;</span><br/>	expr left<span class="sy0">,</span> right<span class="sy0">;</span><br/><span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/><span class="co2">#define N_DIGITS 4</span><br/>expr_t digits<span class="br0">&#91;</span>N_DIGITS<span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">void</span> gen_digits<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> i<span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> N_DIGITS<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>		digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">val</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="sy0">+</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/rand.html"><span class="kw3">rand</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">%</span> <span class="nu0">9</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="co2">#define MAX_INPUT 64</span><br/><span class="kw4">char</span> str<span class="br0">&#91;</span>MAX_INPUT<span class="br0">&#93;</span><span class="sy0">;</span><br/><span class="kw4">int</span> pos<span class="sy0">;</span><br/>&#160;<br/><span class="co2">#define POOL_SIZE 8</span><br/>expr_t pool<span class="br0">&#91;</span>POOL_SIZE<span class="br0">&#93;</span><span class="sy0">;</span><br/><span class="kw4">int</span> pool_ptr<span class="sy0">;</span><br/>&#160;<br/><span class="kw4">void</span> reset<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> i<span class="sy0">;</span><br/>	msg <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br/>	pool_ptr <span class="sy0">=</span> pos <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> POOL_SIZE<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		pool<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">op</span> <span class="sy0">=</span> OP_NONE<span class="sy0">;</span><br/>		pool<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">left</span> <span class="sy0">=</span> pool<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">right</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> N_DIGITS<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>		digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">used</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="coMULTI">/* longish jumpish back to input cycle */</span><br/><span class="kw4">void</span> bail<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s<span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	msg <span class="sy0">=</span> s<span class="sy0">;</span><br/>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/longjmp.html"><span class="kw3">longjmp</span></a><span class="br0">&#40;</span>ctx<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>expr new_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>pool_ptr <span class="sy0">&lt;</span> POOL_SIZE<span class="br0">&#41;</span><br/>		<span class="kw1">return</span> pool <span class="sy0">+</span> pool_ptr<span class="sy0">++;</span><br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="coMULTI">/* check next input char */</span><br/><span class="kw4">int</span> next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw1">while</span> <span class="br0">&#40;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/isspace.html"><span class="kw3">isspace</span></a><span class="br0">&#40;</span>str<span class="br0">&#91;</span>pos<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> pos<span class="sy0">++;</span><br/>	<span class="kw1">return</span> str<span class="br0">&#91;</span>pos<span class="br0">&#93;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="coMULTI">/* move input pointer forward */</span><br/><span class="kw4">int</span> take<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span>pos<span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="sy0">++</span>pos<span class="sy0">;</span><br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="coMULTI">/* BNF(ish)<br/>expr = term { (&quot;+&quot;)|(&quot;-&quot;) term }<br/>term = fact { (&quot;*&quot;)|(&quot;/&quot;) expr }<br/>fact =	number<br/>	| '(' expr ')'<br/>*/</span><br/>&#160;<br/>expr get_fact<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>expr get_term<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>expr get_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>expr get_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> c<span class="sy0">;</span><br/>	expr l<span class="sy0">,</span> r<span class="sy0">,</span> ret<span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>ret <span class="sy0">=</span> get_term<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Expected term&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>c <span class="sy0">=</span> next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'+'</span> <span class="sy0">||</span> c <span class="sy0">==</span> <span class="st0">'-'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>take<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Unexpected end of input&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="br0">&#40;</span>r <span class="sy0">=</span> get_term<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Expected term&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>		l <span class="sy0">=</span> ret<span class="sy0">;</span><br/>		ret <span class="sy0">=</span> new_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>op <span class="sy0">=</span> <span class="br0">&#40;</span>c <span class="sy0">==</span> <span class="st0">'+'</span><span class="br0">&#41;</span> <span class="sy0">?</span> OP_ADD <span class="sy0">:</span> OP_SUB<span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>left <span class="sy0">=</span> l<span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>right <span class="sy0">=</span> r<span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> ret<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>expr get_term<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> c<span class="sy0">;</span><br/>	expr l<span class="sy0">,</span> r<span class="sy0">,</span> ret<span class="sy0">;</span><br/>	ret <span class="sy0">=</span> get_fact<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">while</span><span class="br0">&#40;</span><span class="br0">&#40;</span>c <span class="sy0">=</span> next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'*'</span> <span class="sy0">||</span> c <span class="sy0">==</span> <span class="st0">'/'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>take<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Unexpected end of input&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>		r <span class="sy0">=</span> get_fact<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		l <span class="sy0">=</span> ret<span class="sy0">;</span><br/>		ret <span class="sy0">=</span> new_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>op <span class="sy0">=</span> <span class="br0">&#40;</span>c <span class="sy0">==</span> <span class="st0">'*'</span><span class="br0">&#41;</span> <span class="sy0">?</span> OP_MUL <span class="sy0">:</span> OP_DIV<span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>left <span class="sy0">=</span> l<span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>right <span class="sy0">=</span> r<span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> ret<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>expr get_digit<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> i<span class="sy0">,</span> c <span class="sy0">=</span> next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	expr ret<span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>c <span class="sy0">&gt;=</span> <span class="st0">'0'</span> <span class="sy0">&amp;&amp;</span> c <span class="sy0">&lt;=</span> <span class="st0">'9'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		take<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		ret <span class="sy0">=</span> new_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>op <span class="sy0">=</span> OP_NUM<span class="sy0">;</span><br/>		ret<span class="sy0">-&gt;</span>val <span class="sy0">=</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br/>		<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> N_DIGITS<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>			<span class="kw1">if</span> <span class="br0">&#40;</span>digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">val</span> <span class="sy0">==</span> ret<span class="sy0">-&gt;</span>val <span class="sy0">&amp;&amp;</span> <span class="sy0">!</span>digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">used</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>				digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">used</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br/>				<span class="kw1">return</span> ret<span class="sy0">;</span><br/>			<span class="br0">&#125;</span><br/>		bail<span class="br0">&#40;</span><span class="st0">&quot;Invalid digit&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>expr get_fact<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> c<span class="sy0">;</span><br/>	expr l <span class="sy0">=</span> get_digit<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw1">return</span> l<span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>c <span class="sy0">=</span> next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'('</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		take<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		l <span class="sy0">=</span> get_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="st0">')'</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Unbalanced parens&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		take<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">return</span> l<span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>expr parse<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> i<span class="sy0">;</span><br/>	expr ret <span class="sy0">=</span> get_expr<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>next_tok<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span><br/>		bail<span class="br0">&#40;</span><span class="st0">&quot;Trailing garbage&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> N_DIGITS<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">used</span><span class="br0">&#41;</span><br/>			bail<span class="br0">&#40;</span><span class="st0">&quot;Not all digits are used&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">return</span> ret<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">typedef</span> <span class="kw4">struct</span> frac_t frac_t<span class="sy0">,</span> <span class="sy0">*</span>frac<span class="sy0">;</span><br/><span class="kw4">struct</span> frac_t <span class="br0">&#123;</span> <span class="kw4">int</span> denom<span class="sy0">,</span> num<span class="sy0">;</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">int</span> gcd<span class="br0">&#40;</span><span class="kw4">int</span> m<span class="sy0">,</span> <span class="kw4">int</span> n<span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> t<span class="sy0">;</span><br/>	<span class="kw1">while</span> <span class="br0">&#40;</span>m<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		t <span class="sy0">=</span> m<span class="sy0">;</span> m <span class="sy0">=</span> n <span class="sy0">%</span> m<span class="sy0">;</span> n <span class="sy0">=</span> t<span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> n<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="coMULTI">/* evaluate expression tree.  result in fraction form */</span><br/><span class="kw4">void</span> eval_tree<span class="br0">&#40;</span>expr e<span class="sy0">,</span> frac res<span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	frac_t l<span class="sy0">,</span> r<span class="sy0">;</span><br/>	<span class="kw4">int</span> t<span class="sy0">;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span>e<span class="sy0">-&gt;</span>op <span class="sy0">==</span> OP_NUM<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">=</span> e<span class="sy0">-&gt;</span>val<span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br/>		<span class="kw1">return</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>&#160;<br/>	eval_tree<span class="br0">&#40;</span>e<span class="sy0">-&gt;</span>left<span class="sy0">,</span> <span class="sy0">&amp;</span>l<span class="br0">&#41;</span><span class="sy0">;</span><br/>	eval_tree<span class="br0">&#40;</span>e<span class="sy0">-&gt;</span>right<span class="sy0">,</span> <span class="sy0">&amp;</span>r<span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>	<span class="kw1">switch</span><span class="br0">&#40;</span>e<span class="sy0">-&gt;</span>op<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>	<span class="kw1">case</span> OP_ADD<span class="sy0">:</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">=</span> l.<span class="me1">num</span> <span class="sy0">*</span> r.<span class="me1">denom</span> <span class="sy0">+</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">num</span><span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">=</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">denom</span><span class="sy0">;</span><br/>		<span class="kw2">break</span><span class="sy0">;</span><br/>	<span class="kw1">case</span> OP_SUB<span class="sy0">:</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">=</span> l.<span class="me1">num</span> <span class="sy0">*</span> r.<span class="me1">denom</span> <span class="sy0">-</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">num</span><span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">=</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">denom</span><span class="sy0">;</span><br/>		<span class="kw2">break</span><span class="sy0">;</span><br/>	<span class="kw1">case</span> OP_MUL<span class="sy0">:</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">=</span> l.<span class="me1">num</span> <span class="sy0">*</span> r.<span class="me1">num</span><span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">=</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">denom</span><span class="sy0">;</span><br/>		<span class="kw2">break</span><span class="sy0">;</span><br/>	<span class="kw1">case</span> OP_DIV<span class="sy0">:</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">=</span> l.<span class="me1">num</span> <span class="sy0">*</span> r.<span class="me1">denom</span><span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">=</span> l.<span class="me1">denom</span> <span class="sy0">*</span> r.<span class="me1">num</span><span class="sy0">;</span><br/>		<span class="kw2">break</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>t <span class="sy0">=</span> gcd<span class="br0">&#40;</span>res<span class="sy0">-&gt;</span>denom<span class="sy0">,</span> res<span class="sy0">-&gt;</span>num<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		res<span class="sy0">-&gt;</span>denom <span class="sy0">/=</span> t<span class="sy0">;</span><br/>		res<span class="sy0">-&gt;</span>num <span class="sy0">/=</span> t<span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">void</span> get_input<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	<span class="kw4">int</span> i<span class="sy0">;</span><br/>reinput<span class="sy0">:</span><br/>	reset<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;<span class="es1">\n</span>Available digits are:&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> N_DIGITS<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <br/>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;&#160;%d&quot;</span><span class="sy0">,</span> digits<span class="br0">&#91;</span>i<span class="br0">&#93;</span>.<span class="me1">val</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;. Type an expression and I'll check it for you, or make new numbers.<span class="es1">\n</span>&quot;</span><br/>		<span class="st0">&quot;Your choice? [Expr/n/q] &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>	<span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> MAX_INPUT<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> str<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="sy0">;</span><br/>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/fgets.html"><span class="kw3">fgets</span></a><span class="br0">&#40;</span>str<span class="sy0">,</span> MAX_INPUT<span class="sy0">,</span> stdin<span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>str <span class="sy0">==</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="br0">&#41;</span> <span class="kw1">goto</span> reinput<span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span>MAX_INPUT <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">!=</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="br0">&#41;</span><br/>			bail<span class="br0">&#40;</span><span class="st0">&quot;string too long&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>		<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> MAX_INPUT<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>			<span class="kw1">if</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="br0">&#41;</span> str<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">'<span class="es5">\0</span>'</span><span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'q'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Bye<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/exit.html"><span class="kw3">exit</span></a><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="br0">&#125;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>str<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">==</span> <span class="st0">'n'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>			gen_digits<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>			<span class="kw1">goto</span> reinput<span class="sy0">;</span><br/>		<span class="br0">&#125;</span><br/>		<span class="kw1">return</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>	frac_t f<span class="sy0">;</span><br/>	<a href="http://www.opengroup.org/onlinepubs/009695399/functions/srand.html"><span class="kw3">srand</span></a><span class="br0">&#40;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/time.html"><span class="kw3">time</span></a><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>	gen_digits<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">while</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>		get_input<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/setjmp.html"><span class="kw3">setjmp</span></a><span class="br0">&#40;</span>ctx<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* if parse error, jump back here with err msg set */</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>msg<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>			<span class="coMULTI">/* after error jump; announce, reset, redo */</span><br/>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%s at '%.*s'<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> msg<span class="sy0">,</span> pos<span class="sy0">,</span> str<span class="br0">&#41;</span><span class="sy0">;</span><br/>			<span class="kw1">continue</span><span class="sy0">;</span><br/>		<span class="br0">&#125;</span><br/>&#160;<br/>		eval_tree<span class="br0">&#40;</span>parse<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="sy0">&amp;</span>f<span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>f.<span class="me1">denom</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> bail<span class="br0">&#40;</span><span class="st0">&quot;Divide by zero&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">if</span> <span class="br0">&#40;</span>f.<span class="me1">denom</span> <span class="sy0">==</span> <span class="nu0">1</span> <span class="sy0">&amp;&amp;</span> f.<span class="me1">num</span> <span class="sy0">==</span> <span class="nu0">24</span><span class="br0">&#41;</span><br/>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;You got 24.  Very good.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="kw1">else</span> <span class="br0">&#123;</span><br/>			<span class="kw1">if</span> <span class="br0">&#40;</span>f.<span class="me1">denom</span> <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>				<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Eval to:&#160;%d, &quot;</span><span class="sy0">,</span> f.<span class="me1">num</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>			<span class="kw1">else</span><br/>				<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;Eval to:&#160;%d/%d, &quot;</span><span class="sy0">,</span> f.<span class="me1">num</span><span class="sy0">,</span> f.<span class="me1">denom</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>			<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;no good.  Try again.<span class="es1">\n</span>&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>		<span class="br0">&#125;</span><br/>	<span class="br0">&#125;</span><br/>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Available digits are: 5 2 3 9. Type an expression and I'll check it for you, or make new numbers.
Your choice? [Expr/n/q] 5*2*3/9
Eval to: 10/3, no good.  Try again.

Available digits are: 5 2 3 9. Type an expression and I'll check it for you, or make new numbers.
Your choice? [Expr/n/q] (5*(2+3)-9
Unbalanced parens at '(5*(2+3)-9'

Available digits are: 5 2 3 9. Type an expression and I'll check it for you, or make new numbers.
Your choice? [Expr/n/q] 3*9-(5-2)
You got 24.  Very good.

Available digits are: 5 2 3 9. Type an expression and I'll check it for you, or make new numbers.
Your choice? [Expr/n/q] n

Available digits are: 4 4 4 7. Type an expression and I'll check it for you, or make new numbers.
Your choice? [Expr/n/q] q
Bye</pre>
<p>See <a href="/wiki/24_game/C" title="24 game/C">24 game/C</a>
</p>
<h2><span class="mw-headline" id="C.23"><a href="/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=10" title="Edit section: C#">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>See <a href="/wiki/24_game/CSharp" title="24 game/CSharp">24 game/CSharp</a>
</p>
<h2><span class="mw-headline" id="C.2B.2B"><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=11" title="Edit section: C++">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/C%2B%2B11" title="C++11" class="mw-redirect">C++11</a></div>
<p>This uses the C++11 standard to simplify several parts of the code. Input is given in RPN format.
</p>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;random&gt;</span><br/><span class="co2">#include &lt;iostream&gt;</span><br/><span class="co2">#include &lt;stack&gt;</span><br/><span class="co2">#include &lt;set&gt;</span><br/><span class="co2">#include &lt;string&gt;</span><br/><span class="co2">#include &lt;functional&gt;</span><br/><span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span><br/>&#160;<br/><span class="kw2">class</span> RPNParse<br/><span class="br0">&#123;</span><br/><span class="kw2">public</span><span class="sy4">:</span><br/>  stack<span class="sy1">&lt;</span><span class="kw4">double</span><span class="sy1">&gt;</span> stk<span class="sy4">;</span><br/>  multiset<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> digits<span class="sy4">;</span><br/>&#160;<br/>  <span class="kw4">void</span> op<span class="br0">&#40;</span>function<span class="sy1">&lt;</span><span class="kw4">double</span><span class="br0">&#40;</span><span class="kw4">double</span>,<span class="kw4">double</span><span class="br0">&#41;</span><span class="sy1">&gt;</span> f<span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw1">if</span><span class="br0">&#40;</span>stk.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">&lt;</span> <span class="nu0">2</span><span class="br0">&#41;</span><br/>      <span class="kw1">throw</span> <span class="st0">&quot;Improperly written expression&quot;</span><span class="sy4">;</span><br/>    <span class="kw4">int</span> b <span class="sy1">=</span> stk.<span class="me1">top</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> stk.<span class="me1">pop</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="kw4">int</span> a <span class="sy1">=</span> stk.<span class="me1">top</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> stk.<span class="me1">pop</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    stk.<span class="me1">push</span><span class="br0">&#40;</span>f<span class="br0">&#40;</span>a, b<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/>&#160;<br/>  <span class="kw4">void</span> parse<span class="br0">&#40;</span><span class="kw4">char</span> c<span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw1">if</span><span class="br0">&#40;</span>c <span class="sy1">&gt;=</span> <span class="st0">'0'</span> <span class="sy3">&amp;&amp;</span> c <span class="sy1">&lt;=</span> <span class="st0">'9'</span><span class="br0">&#41;</span><br/>    <span class="br0">&#123;</span><br/>      stk.<span class="me1">push</span><span class="br0">&#40;</span>c <span class="sy2">-</span> <span class="st0">'0'</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>      digits.<span class="me1">insert</span><span class="br0">&#40;</span>c <span class="sy2">-</span> <span class="st0">'0'</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="br0">&#125;</span><br/>    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>c <span class="sy1">==</span> <span class="st0">'+'</span><span class="br0">&#41;</span><br/>      op<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw4">double</span> a, <span class="kw4">double</span> b<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="kw1">return</span> a<span class="sy2">+</span>b<span class="sy4">;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>c <span class="sy1">==</span> <span class="st0">'-'</span><span class="br0">&#41;</span><br/>      op<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw4">double</span> a, <span class="kw4">double</span> b<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="kw1">return</span> a<span class="sy2">-</span>b<span class="sy4">;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>c <span class="sy1">==</span> <span class="st0">'*'</span><span class="br0">&#41;</span><br/>      op<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw4">double</span> a, <span class="kw4">double</span> b<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="kw1">return</span> a<span class="sy2">*</span>b<span class="sy4">;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span>c <span class="sy1">==</span> <span class="st0">'/'</span><span class="br0">&#41;</span><br/>      op<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#40;</span><span class="kw4">double</span> a, <span class="kw4">double</span> b<span class="br0">&#41;</span> <span class="br0">&#123;</span><span class="kw1">return</span> a<span class="sy2">/</span>b<span class="sy4">;</span><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/>&#160;<br/>  <span class="kw4">void</span> parse<span class="br0">&#40;</span>string s<span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> s.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">&#41;</span><br/>      parse<span class="br0">&#40;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/>&#160;<br/>  <span class="kw4">double</span> getResult<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw1">if</span><span class="br0">&#40;</span>stk.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy3">!</span><span class="sy1">=</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>      <span class="kw1">throw</span> <span class="st0">&quot;Improperly written expression&quot;</span><span class="sy4">;</span><br/>    <span class="kw1">return</span> stk.<span class="me1">top</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/><span class="br0">&#125;</span><span class="sy4">;</span><br/>&#160;<br/><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>  random_device seed<span class="sy4">;</span><br/>  mt19937 engine<span class="br0">&#40;</span>seed<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  uniform_int_distribution<span class="sy1">&lt;&gt;</span> distribution<span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">9</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="kw4">auto</span> rnd <span class="sy1">=</span> bind<span class="br0">&#40;</span>distribution, engine<span class="br0">&#41;</span><span class="sy4">;</span><br/>&#160;<br/>  multiset<span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> digits<span class="sy4">;</span><br/>  <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Make 24 with the digits: &quot;</span><span class="sy4">;</span><br/>  <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> <span class="nu0">4</span><span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw4">int</span> n <span class="sy1">=</span> rnd<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span> <span class="sy1">&lt;&lt;</span> n<span class="sy4">;</span><br/>    digits.<span class="me1">insert</span><span class="br0">&#40;</span>n<span class="br0">&#41;</span><span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/>  <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>&#160;<br/>  RPNParse parser<span class="sy4">;</span><br/>&#160;<br/>  <span class="kw2">try</span><br/>  <span class="br0">&#123;</span><br/>    string input<span class="sy4">;</span><br/>    getline<span class="br0">&#40;</span><span class="kw3">cin</span>, input<span class="br0">&#41;</span><span class="sy4">;</span><br/>    parser.<span class="me1">parse</span><span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy4">;</span><br/>&#160;<br/>    <span class="kw1">if</span><span class="br0">&#40;</span>digits <span class="sy3">!</span><span class="sy1">=</span> parser.<span class="me1">digits</span><span class="br0">&#41;</span><br/>      <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Error: Not using the given digits&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>    <span class="kw1">else</span><br/>    <span class="br0">&#123;</span><br/>      <span class="kw4">double</span> r <span class="sy1">=</span> parser.<span class="me1">getResult</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>      <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Result: &quot;</span> <span class="sy1">&lt;&lt;</span> r <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>&#160;<br/>      <span class="kw1">if</span><span class="br0">&#40;</span>r <span class="sy1">&gt;</span> <span class="nu16">23.999</span> <span class="sy3">&amp;&amp;</span> r <span class="sy1">&lt;</span> <span class="nu16">24.001</span><span class="br0">&#41;</span><br/>        <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Good job!&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>      <span class="kw1">else</span><br/>        <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Try again.&quot;</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>    <span class="br0">&#125;</span><br/>  <span class="br0">&#125;</span><br/>  <span class="kw2">catch</span><span class="br0">&#40;</span><span class="kw4">char</span><span class="sy2">*</span> e<span class="br0">&#41;</span><br/>  <span class="br0">&#123;</span><br/>    <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;Error: &quot;</span> <span class="sy1">&lt;&lt;</span> e <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br/>  <span class="br0">&#125;</span><br/>  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br/><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
Make 24 with the digits:  1 4 9 9
9 9 + 4 * 1 +
Result: 73
Try again.

Make 24 with the digits:  3 9 9 2
9 9 + 3 2 * +
Result: 24
Good job!
</pre>
<h2><span class="mw-headline" id="Ceylon"><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=12" title="Edit section: Ceylon">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">import ceylon.random {<br/>&#160;<br/>	DefaultRandom<br/>}<br/>&#160;<br/>class Rational(shared Integer numerator, shared Integer denominator = 1) satisfies Numeric&lt;Rational&gt; {<br/>&#160;<br/>	assert(denominator&#160;!= 0);<br/>&#160;<br/>	Integer gcd(Integer a, Integer b) =&gt; if(b == 0) then a else gcd(b, a&#160;% b);<br/>&#160;<br/>	shared Rational inverted =&gt; Rational(denominator, numerator);<br/>&#160;<br/>	shared Rational simplified =&gt;<br/>		let(largestFactor = gcd(numerator, denominator))<br/>		Rational(numerator / largestFactor, denominator / largestFactor);<br/>&#160;<br/>	divided(Rational other) =&gt; (this * other.inverted).simplified;<br/>&#160;<br/>	negated =&gt; Rational(-numerator, denominator).simplified;<br/>&#160;<br/>	plus(Rational other) =&gt;<br/>			let(top = numerator * other.denominator + other.numerator * denominator,<br/>				bottom = denominator * other.denominator)<br/>			Rational(top, bottom).simplified;<br/>&#160;<br/>	times(Rational other) =&gt;<br/>			Rational(numerator * other.numerator, denominator * other.denominator).simplified;<br/>&#160;<br/>	shared Integer integer =&gt; numerator / denominator;<br/>	shared Float float =&gt; numerator.float / denominator.float;<br/>&#160;<br/>	string =&gt; denominator == 1 then numerator.string else &quot;``numerator``/``denominator``&quot;;<br/>}<br/>&#160;<br/>interface Expression {<br/>	shared formal Rational evaluate();<br/>}<br/>&#160;<br/>class NumberExpression(Rational number) satisfies Expression {<br/>	evaluate() =&gt; number;<br/>	string =&gt; number.string;<br/>}<br/>&#160;<br/>class OperatorExpression(Expression left, Character operator, Expression right) satisfies Expression {<br/>	shared actual Rational evaluate() {<br/>		switch(operator)<br/>		case('*') {<br/>			return left.evaluate() * right.evaluate();<br/>		}<br/>		case('/') {<br/>			return left.evaluate() / right.evaluate();<br/>		}<br/>		case('-') {<br/>			return left.evaluate() - right.evaluate();<br/>		}<br/>		case('+') {<br/>			return left.evaluate() + right.evaluate();<br/>		}<br/>		else {<br/>			throw Exception(&quot;unknown operator ``operator``&quot;);<br/>		}<br/>	}<br/>&#160;<br/>	string =&gt; &quot;(``left.string`` ``operator.string`` ``right.string``)&quot;;<br/>}<br/>&#160;<br/>&quot;A simplified top down operator precedence parser. There aren't any right<br/> binding operators so we don't have to worry about that.&quot;<br/>class PrattParser(String input) {<br/>&#160;<br/>	value tokens = input.replace(&quot; &quot;, &quot;&quot;);<br/>	variable value index = -1;<br/>&#160;<br/>	shared Expression expression(Integer precedence = 0) {<br/>		value token = advance();<br/>		variable value left = parseUnary(token);<br/>		while(precedence &lt; getPrecedence(peek())) {<br/>			value nextToken = advance();<br/>			left = parseBinary(left, nextToken);<br/>		}<br/>		return left;<br/>	}<br/>&#160;<br/>	Integer getPrecedence(Character op) =&gt;<br/>			switch(op)<br/>			case('*' | '/') 2<br/>			case('+' | '-') 1<br/>			else 0;<br/>&#160;<br/>	Character advance(Character? expected = null) {<br/>		index++;<br/>		value token = tokens[index] else ' ';<br/>		if(exists expected, token&#160;!= expected) {<br/>			throw Exception(&quot;unknown character ``token``&quot;);<br/>		}<br/>		return token;<br/>	}<br/>&#160;<br/>	Character peek() =&gt; tokens[index + 1] else ' ';<br/>&#160;<br/>	Expression parseBinary(Expression left, Character operator) =&gt;<br/>			let(right = expression(getPrecedence(operator)))<br/>	OperatorExpression(left, operator, right);<br/>&#160;<br/>	Expression parseUnary(Character token) {<br/>		if(token.digit) {<br/>			assert(exists int = parseInteger(token.string));<br/>			return NumberExpression(Rational(int));<br/>		} else if(token == '(') {<br/>			value exp = expression();<br/>			advance(')');<br/>			return exp;<br/>		} else {<br/>			throw Exception(&quot;unknown character ``token``&quot;);<br/>		}<br/>	}<br/>}<br/>&#160;<br/>&quot;Run the module `twentyfourgame`.&quot;<br/>shared void run() {<br/>&#160;<br/>    value random = DefaultRandom();<br/>&#160;<br/>    function random4Numbers() =&gt; <br/>            random.elements(1..9).take(4).sequence();<br/>&#160;<br/>    function isValidGuess(String input, {Integer*} allowedNumbers) {<br/>        value allowedOperators = set {*&quot;()+-/*&quot;};<br/>        value extractedNumbers = input<br/>                .split((Character ch) =&gt; ch in allowedOperators || ch.whitespace)<br/>        		.map((String element) =&gt; parseInteger(element))<br/>        		.coalesced;<br/>        if(extractedNumbers.any((Integer element) =&gt; element &gt; 9)) {<br/>            print(&quot;number too big!&quot;);<br/>            return false;<br/>        }<br/>        if(extractedNumbers.any((Integer element) =&gt; element &lt; 1)) {<br/>            print(&quot;number too small!&quot;);<br/>            return false;<br/>        }<br/>        if(extractedNumbers.sort(byIncreasing(Integer.magnitude))&#160;!= allowedNumbers.sort(byIncreasing(Integer.magnitude))) {<br/>            print(&quot;use all the numbers, please!&quot;);<br/>            return false;<br/>        }<br/>        if(!input.every((Character element) =&gt; element in allowedOperators || element.digit || element.whitespace)) {<br/>            print(&quot;only digits and mathematical operators, please&quot;);<br/>            return false;<br/>        }<br/>        variable value lefts = 0;<br/>        for(c in input) {<br/>            if(c == '(') {<br/>                lefts++;<br/>            } else if(c == ')') {<br/>                lefts--;<br/>                if(lefts &lt; 0) {<br/>                    break;<br/>                }<br/>            }<br/>        }<br/>        if(lefts&#160;!= 0) {<br/>            print(&quot;unbalanced brackets!&quot;);<br/>            return false;<br/>        }<br/>        return true;<br/>    }<br/>&#160;<br/>    function evaluate(String input) =&gt;<br/>        let(parser = PrattParser(input), <br/>        	exp = parser.expression())<br/>        exp.evaluate();<br/>&#160;<br/>    print(&quot;Welcome to The 24 Game.<br/>           Create a mathematical equation with four random<br/>           numbers that evaluates to 24.<br/>           You must use all the numbers once and only once,<br/>           but in any order.<br/>           Also, only + - / * and parentheses are allowed.<br/>           For example: (1 + 2 + 3) * 4<br/>           Also: enter n for new numbers and q to quit.<br/>           -----------------------------------------------&quot;);<br/>&#160;<br/>	while(true) {<br/>&#160;<br/>		value chosenNumbers = random4Numbers();<br/>		void pleaseTryAgain() =&gt; print(&quot;Sorry, please try again. (Your numbers are ``chosenNumbers``)&quot;);<br/>&#160;<br/>		print(&quot;Your numbers are ``chosenNumbers``. Please turn them into 24.&quot;);<br/>&#160;<br/>	    while(true) {<br/>	        value line = process.readLine()?.trimmed;<br/>	        if(exists line) {<br/>	            if(line.uppercased == &quot;Q&quot;) {<br/>	                print(&quot;bye!&quot;);<br/>	                return;<br/>	            }<br/>	            if(line.uppercased == &quot;N&quot;) {<br/>	                break;<br/>	            }<br/>	            if(isValidGuess(line, chosenNumbers)) {<br/>	                try {<br/>	                	value result = evaluate(line);<br/>	                	print(&quot;= ``result``&quot;);<br/>	                	if(result.integer == 24) {<br/>	                		print(&quot;You did it!&quot;);<br/>	                		break;<br/>	                	} else {<br/>	                		pleaseTryAgain();<br/>	                	}<br/>	            	} catch(Exception e) {<br/>	            		print(e.message);<br/>	            		pleaseTryAgain();<br/>	            	}<br/>	            } else {<br/>	                pleaseTryAgain();<br/>	            }<br/>	        }<br/>	    }<br/>	}<br/>&#160;<br/>}</pre>
<h2><span class="mw-headline" id="Clojure"><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=13" title="Edit section: Clojure">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="clojure highlighted_source">&#160;<br/><span class="br0">&#40;</span><span class="kw1">ns</span> rosettacode<span class="sy0">.</span>24game<span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">def</span> <span class="sy0">^</span>:<span class="me1">dynamic</span> <span class="sy0">*</span>luser<span class="sy0">*</span><br/><span class="st0">&quot;You guessed wrong, or your input was not in prefix notation.&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">def</span> <span class="sy0">^</span>:<span class="me1">private</span> start #<span class="br0">&#40;</span>println <br/><span class="st0">&quot;Your numbers are: &quot;</span> <span class="sy0">%</span>1 <span class="st0">&quot;. Your goal is &quot;</span> <span class="sy0">%</span>2 <span class="st0">&quot;.<span class="es0">\n</span>&quot;</span><br/><span class="st0">&quot;Use the ops [+ - * /] in prefix notation to reach&quot;</span> <span class="sy0">%</span>2 <span class="st0">&quot;.<span class="es0">\n</span>&quot;</span><br/><span class="st0">&quot;q[enter] to quit.&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defn</span> play<br/>  <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#40;</span>play <span class="nu0">24</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span><span class="br0">&#91;</span>goal<span class="br0">&#93;</span> <span class="br0">&#40;</span>play goal <span class="br0">&#40;</span><span class="kw1">repeatedly</span> <span class="nu0">4</span> #<span class="br0">&#40;</span><span class="kw1">inc</span> <span class="br0">&#40;</span>rand<span class="sy0">-</span>int <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span><span class="br0">&#91;</span>goal gns<span class="br0">&#93;</span><br/>     <span class="br0">&#40;</span>start gns goal<span class="br0">&#41;</span><br/>     <span class="br0">&#40;</span><span class="kw1">let</span> <span class="br0">&#91;</span>input <span class="br0">&#40;</span>read<span class="sy0">-</span>string <span class="br0">&#40;</span>read<span class="sy0">-</span>line<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>           flat  <span class="br0">&#40;</span>flatten input<span class="br0">&#41;</span><span class="br0">&#93;</span><br/>      <span class="br0">&#40;</span>println<br/>        <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">and</span> <span class="br0">&#40;</span><span class="kw1">re-find</span> #<span class="st0">&quot;^<span class="es0">\(</span>[<span class="es0">\d</span><span class="es0">\s</span>+*/-]+<span class="es0">\d</span>?<span class="es0">\)</span>$&quot;</span> <span class="br0">&#40;</span>pr<span class="sy0">-</span><span class="kw1">str</span> flat<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw1">set</span> gns<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">set</span> <span class="br0">&#40;</span><span class="kw1">filter</span> integer? flat<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="sy0">=</span> goal <span class="br0">&#40;</span>eval input<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>         <span class="st0">&quot;You won the game!&quot;</span><br/>         <span class="sy0">*</span>luser<span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>      <span class="br0">&#40;</span><span class="kw1">when</span> <span class="br0">&#40;</span><span class="kw1">not</span><span class="sy0">=</span> input 'q<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">recur</span> goal gns<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">; * checks prefix form, then checks to see that the numbers used</span><br/><span class="co1">; and the numbers generated by the game are the same.</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="COBOL"><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=14" title="Edit section: COBOL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="cobol highlighted_source">        &gt;&gt;<span class="kw1">SOURCE</span> FORMAT FREE<br/><span class="co1">*&gt; This code is dedicated to the public domain</span><br/><span class="co1">*&gt; This is GNUCobol 2.0</span><br/><span class="kw3">identification</span> <span class="kw3">division</span><span class="sy0">.</span><br/><span class="kw3">program-id</span><span class="sy0">.</span> twentyfour<span class="sy0">.</span><br/>environment <span class="kw3">division</span><span class="sy0">.</span><br/><span class="kw3">configuration</span> <span class="kw1">section</span><span class="sy0">.</span><br/>repository<span class="sy0">.</span> <span class="kw3">function</span> <span class="kw3">all</span> intrinsic<span class="sy0">.</span><br/><span class="kw3">data</span> <span class="kw3">division</span><span class="sy0">.</span><br/><span class="kw3">working-storage</span> <span class="kw1">section</span><span class="sy0">.</span><br/><span class="nu0">01</span>  p <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/><span class="nu0">01</span>  p1 <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/><span class="nu0">01</span>  p-<span class="kw4">max</span> <span class="kw3">pic</span> <span class="nu0">999</span> <span class="kw3">value</span> <span class="nu0">38</span><span class="sy0">.</span><br/><span class="nu0">01</span>  program-<span class="kw1">syntax</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">494</span><span class="br0">&#41;</span> <span class="kw3">value</span><br/><span class="co1">*&gt;statement = expression;</span><br/>        <span class="st0">'001 001 000 n'</span><br/>    &amp;   <span class="st0">'002 000 004 ='</span><br/>    &amp;   <span class="st0">'003 005 000 n'</span><br/>    &amp;   <span class="st0">'004 000 002&#160;;'</span><br/><span class="co1">*&gt;expression = term, {('+'|'-') term,};</span><br/>    &amp;   <span class="st0">'005 005 000 n'</span><br/>    &amp;   <span class="st0">'006 000 016 ='</span><br/>    &amp;   <span class="st0">'007 017 000 n'</span><br/>    &amp;   <span class="st0">'008 000 015 {'</span><br/>    &amp;   <span class="st0">'009 011 013 ('</span><br/>    &amp;   <span class="st0">'010 001 000 t'</span><br/>    &amp;   <span class="st0">'011 013 000 |'</span><br/>    &amp;   <span class="st0">'012 002 000 t'</span><br/>    &amp;   <span class="st0">'013 000 009 )'</span><br/>    &amp;   <span class="st0">'014 017 000 n'</span><br/>    &amp;   <span class="st0">'015 000 008 }'</span><br/>    &amp;   <span class="st0">'016 000 006&#160;;'</span><br/><span class="co1">*&gt;term = factor, {('*'|'/') factor,};</span><br/>    &amp;   <span class="st0">'017 017 000 n'</span><br/>    &amp;   <span class="st0">'018 000 028 ='</span><br/>    &amp;   <span class="st0">'019 029 000 n'</span><br/>    &amp;   <span class="st0">'020 000 027 {'</span><br/>    &amp;   <span class="st0">'021 023 025 ('</span><br/>    &amp;   <span class="st0">'022 003 000 t'</span><br/>    &amp;   <span class="st0">'023 025 000 |'</span><br/>    &amp;   <span class="st0">'024 004 000 t'</span><br/>    &amp;   <span class="st0">'025 000 021 )'</span><br/>    &amp;   <span class="st0">'026 029 000 n'</span><br/>    &amp;   <span class="st0">'027 000 020 }'</span><br/>    &amp;   <span class="st0">'028 000 018&#160;;'</span><br/><span class="co1">*&gt;factor = ('(' expression, ')' | digit,);</span><br/>    &amp;   <span class="st0">'029 029 000 n'</span><br/>    &amp;   <span class="st0">'030 000 038 ='</span><br/>    &amp;   <span class="st0">'031 035 037 ('</span><br/>    &amp;   <span class="st0">'032 005 000 t'</span><br/>    &amp;   <span class="st0">'033 005 000 n'</span><br/>    &amp;   <span class="st0">'034 006 000 t'</span><br/>    &amp;   <span class="st0">'035 037 000 |'</span><br/>    &amp;   <span class="st0">'036 000 000 n'</span><br/>    &amp;   <span class="st0">'037 000 031 )'</span><br/>    &amp;   <span class="st0">'038 000 030&#160;;'</span><span class="sy0">.</span><br/><span class="nu0">01</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> program-<span class="kw1">syntax</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  p-entry <span class="kw3">occurs</span> <span class="nu0">038.</span><br/>        <span class="nu0">05</span>  p-<span class="kw3">address</span> <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  p-definition <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  p-<span class="kw3">alternate</span> <span class="kw3">redefines</span> p-definition <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  p-matching <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  p-symbol <span class="kw3">pic</span> x<span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  t <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/><span class="nu0">01</span>  t-len <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">6</span><span class="sy0">.</span><br/><span class="nu0">01</span>  terminal-<span class="kw1">symbols</span><br/>    <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">210</span><span class="br0">&#41;</span> <span class="kw3">value</span><br/>        <span class="st0">'01 +                               '</span>                                                               <br/>    &amp;   <span class="st0">'01 -                               '</span>                                                               <br/>    &amp;   <span class="st0">'01 *                               '</span><br/>    &amp;   <span class="st0">'01 /                               '</span><br/>    &amp;   <span class="st0">'01 (                               '</span><br/>    &amp;   <span class="st0">'01 )                               '</span><span class="sy0">.</span><br/><span class="nu0">01</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> terminal-<span class="kw1">symbols</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  terminal-symbol-entry <span class="kw3">occurs</span> <span class="nu0">6</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  terminal-symbol-len <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  terminal-symbol <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  nt <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/><span class="nu0">01</span>  nt-lim <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">5</span><span class="sy0">.</span><br/><span class="nu0">01</span>  nonterminal-statements <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">294</span><span class="br0">&#41;</span> <span class="kw3">value</span><br/>        <span class="st0">&quot;000 ....,....,....,....,....,....,....,....,....,&quot;</span><br/>    &amp;   <span class="st0">&quot;001 statement = expression;                      &quot;</span>                                                       <br/>    &amp;   <span class="st0">&quot;005 expression = term, {('+'|'-') term,};        &quot;</span>                                                      <br/>    &amp;   <span class="st0">&quot;017 term = factor, {('*'|'/') factor,};          &quot;</span>                                                             <br/>    &amp;   <span class="st0">&quot;029 factor = ('(' expression, ')' | digit,);     &quot;</span>                                                           <br/>    &amp;   <span class="st0">&quot;036 digit;                                       &quot;</span><span class="sy0">.</span>                                                            <br/><span class="nu0">01</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> nonterminal-statements<span class="sy0">.</span><br/>    <span class="nu0">03</span>  nonterminal-statement-entry <span class="kw3">occurs</span> <span class="nu0">5</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  nonterminal-statement-<span class="kw3">number</span> <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  nonterminal-statement <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">45</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  indent <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">64</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="kw3">all</span> <span class="st0">'|  '</span><span class="sy0">.</span> <br/><span class="nu0">01</span>  interpreter-stack<span class="sy0">.</span><br/>    <span class="nu0">03</span>  r <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span> *&gt; previous <span class="kw3">top</span> <span class="kw3">of</span> stack<br/>    <span class="nu0">03</span>  s <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span> *&gt; current <span class="kw3">top</span> <span class="kw3">of</span> stack<br/>    <span class="nu0">03</span>  s-<span class="kw4">max</span> <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">32</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  s-entry <span class="kw3">occurs</span> <span class="nu0">32</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'p='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-p <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span> *&gt; callers <span class="kw2">return</span> <span class="kw3">address</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' sc='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-start-<span class="kw3">control</span> <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span> *&gt; <span class="kw3">sequence</span> <span class="kw3">start</span> <span class="kw3">address</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' ec='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-end-<span class="kw3">control</span> <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span> *&gt; <span class="kw3">sequence</span> <span class="kw3">end</span> <span class="kw3">address</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' al='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-<span class="kw3">alternate</span> <span class="kw3">pic</span> <span class="nu0">999</span><span class="sy0">.</span> *&gt; the <span class="kw3">next</span> <span class="kw3">alternate</span> <br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' r='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-result <span class="kw3">pic</span> x<span class="sy0">.</span> *&gt; S success<span class="sy0">,</span> F failure<span class="sy0">,</span> N <span class="kw3">no</span> result<br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' c='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-<span class="kw3">count</span> <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span> *&gt; successes <span class="kw3">in</span> a <span class="kw3">sequence</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' x='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-repeat <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span> *&gt; repeats <span class="kw3">in</span> a <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="kw3">sequence</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">' nt='</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  s-nt <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span> *&gt; current nonterminal<br/>&#160;<br/><span class="nu0">01</span>  language-<span class="kw3">area</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  l <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  l-lim <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  l-len <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">1</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  nd <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  number-definitions<span class="sy0">.</span><br/>        <span class="nu0">05</span>  n <span class="kw3">occurs</span> <span class="nu0">4</span> <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  nu <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  number-<span class="kw3">use</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  u <span class="kw3">occurs</span> <span class="nu0">4</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>    <span class="nu0">03</span>  statement<span class="sy0">.</span><br/>        <span class="nu0">05</span>  c <span class="kw3">occurs</span> <span class="nu0">32</span><span class="sy0">.</span><br/>            <span class="nu0">07</span>  c9 <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  number-validation<span class="sy0">.</span><br/>    <span class="nu0">03</span>  p4 <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  p4-lim <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">24</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  permutations-<span class="nu0">4</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">96</span><span class="br0">&#41;</span> <span class="kw3">value</span><br/>          <span class="st0">'1234'</span><br/>        &amp; <span class="st0">'1243'</span><br/>        &amp; <span class="st0">'1324'</span><br/>        &amp; <span class="st0">'1342'</span><br/>        &amp; <span class="st0">'1423'</span><br/>        &amp; <span class="st0">'1432'</span><br/>        &amp; <span class="st0">'2134'</span><br/>        &amp; <span class="st0">'2143'</span><br/>        &amp; <span class="st0">'2314'</span><br/>        &amp; <span class="st0">'2341'</span><br/>        &amp; <span class="st0">'2413'</span><br/>        &amp; <span class="st0">'2431'</span><br/>        &amp; <span class="st0">'3124'</span><br/>        &amp; <span class="st0">'3142'</span><br/>        &amp; <span class="st0">'3214'</span><br/>        &amp; <span class="st0">'3241'</span><br/>        &amp; <span class="st0">'3423'</span><br/>        &amp; <span class="st0">'3432'</span><br/>        &amp; <span class="st0">'4123'</span><br/>        &amp; <span class="st0">'4132'</span><br/>        &amp; <span class="st0">'4213'</span><br/>        &amp; <span class="st0">'4231'</span><br/>        &amp; <span class="st0">'4312'</span><br/>        &amp; <span class="st0">'4321'</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> permutations-<span class="nu0">4</span><span class="sy0">.</span><br/>         <span class="nu0">05</span>  permutation-<span class="nu0">4</span> <span class="kw3">occurs</span> <span class="nu0">24</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  current-permutation-<span class="nu0">4</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  cpx <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  od1 <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  od2 <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  odx <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  od-lim <span class="kw3">pic</span> <span class="nu0">9</span> <span class="kw3">value</span> <span class="nu0">4</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  operator-definitions <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'+-*/'</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  current-operators <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  co3 <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  rpx <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  rpx-lim <span class="kw3">pic</span> <span class="nu0">9</span> <span class="kw3">value</span> <span class="nu0">4</span><span class="sy0">.</span><br/>     <span class="nu0">03</span>  valid-rpn-forms <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">28</span><span class="br0">&#41;</span> <span class="kw3">value</span><br/>          <span class="st0">'nnonono'</span><br/>        &amp; <span class="st0">'nnnonoo'</span><br/>        &amp; <span class="st0">'nnnoono'</span><br/>        &amp; <span class="st0">'nnnnooo'</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> valid-rpn-forms<span class="sy0">.</span><br/>        <span class="nu0">05</span>  rpn-form <span class="kw3">occurs</span> <span class="nu0">4</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  current-rpn-form <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  calculation-<span class="kw3">area</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  osx <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  operator-stack <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  oqx <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  oqx1 <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  output-<span class="kw3">queue</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  work-<span class="kw3">number</span> <span class="kw3">pic</span> s9999<span class="sy0">.</span><br/>    <span class="nu0">03</span>  top-numerator <span class="kw3">pic</span> s9999 <span class="kw3">sign</span> <span class="kw3">leading</span> <span class="kw3">separate</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  top-denominator <span class="kw3">pic</span> s9999 <span class="kw3">sign</span> <span class="kw3">leading</span> <span class="kw3">separate</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  rsx <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  result-stack <span class="kw3">occurs</span> <span class="nu0">8</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  numerator <span class="kw3">pic</span> s9999<span class="sy0">.</span><br/>        <span class="nu0">05</span>  denominator <span class="kw3">pic</span> s9999<span class="sy0">.</span><br/>&#160;<br/><span class="nu0">01</span>  error-found <span class="kw3">pic</span> x<span class="sy0">.</span><br/><span class="nu0">01</span>  divide-by-zero-<span class="kw3">error</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>&#160;<br/><span class="co1">*&gt;  diagnostics</span><br/><span class="nu0">01</span>  NL <span class="kw3">pic</span> x <span class="kw3">value</span> x<span class="st0">'0A'</span><span class="sy0">.</span><br/><span class="nu0">01</span>  NL-flag <span class="kw3">pic</span> x <span class="kw3">value</span> <span class="kw3">space</span><span class="sy0">.</span><br/><span class="nu0">01</span>  display-level <span class="kw3">pic</span> x <span class="kw3">value</span> <span class="st0">'0'</span><span class="sy0">.</span><br/><span class="nu0">01</span>  loop-lim <span class="kw3">pic</span> <span class="nu0">9999</span> <span class="kw3">value</span> <span class="nu0">1500</span><span class="sy0">.</span><br/><span class="nu0">01</span>  loop-<span class="kw3">count</span> <span class="kw3">pic</span> <span class="nu0">9999</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br/><span class="nu0">01</span>  message-<span class="kw3">area</span> <span class="kw3">value</span> <span class="kw3">spaces</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  message-level <span class="kw3">pic</span> x<span class="sy0">.</span><br/>    <span class="nu0">03</span>  message-<span class="kw3">value</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">128</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/><span class="co1">*&gt;  input and examples</span><br/><span class="nu0">01</span>  instruction <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="kw3">spaces</span><span class="sy0">.</span><br/><span class="nu0">01</span>  tsx <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/><span class="nu0">01</span>  tsx-lim <span class="kw3">pic</span> <span class="nu0">99</span> <span class="kw3">value</span> <span class="nu0">14</span><span class="sy0">.</span><br/><span class="nu0">01</span>  test-statements<span class="sy0">.</span><br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;1 + 2 + 3 + 4'</span><span class="sy0">.</span><br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;1 * 2 * 3 * 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;((1)) * (((2 * 3))) * 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;((1)) * ((2 * 3))) * 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;(1 + 2 + 3 + 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;)1 + 2 + 3 + 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1234;1 * * 2 * 3 * 4'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'5679;6 - (5 - 7) * 9'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1268;((1 * (8 * 6) / 2))'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'4583;-5-3+(8*4)'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'4583;8 * 4 - 5 - 3'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'4583;8 * 4 - (5 + 3)'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'1223;1 * 3 / (2 - 2)'</span><span class="sy0">.</span> <br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">32</span><span class="br0">&#41;</span> <span class="kw3">value</span> <span class="st0">'2468;(6 * 8) / 4 / 2'</span><span class="sy0">.</span> <br/><span class="nu0">01</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> test-statements<span class="sy0">.</span><br/>    <span class="nu0">03</span>  <span class="kw3">filler</span> <span class="kw3">occurs</span> <span class="nu0">14</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  test-numbers <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>        <span class="nu0">05</span>  <span class="kw3">filler</span> <span class="kw3">pic</span> x<span class="sy0">.</span><br/>        <span class="nu0">05</span>  test-statement <span class="kw3">pic</span> x<span class="br0">&#40;</span><span class="nu0">27</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/><span class="kw3">procedure</span> <span class="kw3">division</span><span class="sy0">.</span><br/>start-twentyfour<span class="sy0">.</span><br/>    <span class="kw2">display</span> <span class="st0">'start twentyfour'</span><br/>    <span class="kw2">perform</span> generate-numbers<br/>    <span class="kw2">display</span> <span class="st0">'type h &lt;enter&gt; to see instructions'</span><br/>    <span class="kw2">accept</span> instruction<br/>    <span class="kw2">perform</span> <span class="kw2">until</span> instruction <span class="sy0">=</span> <span class="kw3">spaces</span> <span class="kw3">or</span> <span class="st0">'q'</span><br/>        <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>        <span class="kw3">when</span> instruction <span class="sy0">=</span> <span class="st0">'h'</span><br/>            <span class="kw2">perform</span> display-instructions<br/>        <span class="kw3">when</span> instruction <span class="sy0">=</span> <span class="st0">'n'</span><br/>            <span class="kw2">perform</span> generate-numbers<br/>        <span class="kw3">when</span> instruction<span class="br0">&#40;</span><span class="nu0">1</span>:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'m'</span><br/>            <span class="kw2">move</span> instruction<span class="br0">&#40;</span><span class="nu0">2</span>:<span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw2">to</span> number-definitions<br/>            <span class="kw2">perform</span> validate-<span class="kw3">number</span><br/>            <span class="kw1">if</span> divide-by-zero-<span class="kw3">error</span> <span class="sy0">=</span> <span class="kw3">space</span><br/>            <span class="kw3">and</span> <span class="nu0">24</span><span class="sy0"> * </span>top-denominator <span class="sy0">=</span> top-numerator<br/>                <span class="kw2">display</span> number-definitions <span class="st0">' is solved by '</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span><span class="nu0">1</span>:oqx<span class="br0">&#41;</span><br/>            <span class="kw3">else</span><br/>                <span class="kw2">display</span> number-definitions <span class="st0">' is not solvable'</span><br/>            end-<span class="kw1">if</span><br/>        <span class="kw3">when</span> instruction <span class="sy0">=</span> <span class="st0">'d0'</span> <span class="kw3">or</span> <span class="st0">'d1'</span> <span class="kw3">or</span> <span class="st0">'d2'</span> <span class="kw3">or</span> <span class="st0">'d3'</span><br/>            <span class="kw2">move</span> instruction<span class="br0">&#40;</span><span class="nu0">2</span>:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> display-level<br/>        <span class="kw3">when</span> instruction <span class="sy0">=</span> <span class="st0">'e'</span><br/>            <span class="kw2">display</span> <span class="st0">'examples:'</span><br/>            <span class="kw2">perform</span> <span class="kw2">varying</span> tsx <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span><br/>            <span class="kw2">until</span> tsx &gt; tsx-lim<br/>                <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> statement<br/>                <span class="kw2">move</span> test-numbers<span class="br0">&#40;</span>tsx<span class="br0">&#41;</span> <span class="kw2">to</span> number-definitions<br/>                <span class="kw2">move</span> test-statement<span class="br0">&#40;</span>tsx<span class="br0">&#41;</span> <span class="kw2">to</span> statement<br/>                <span class="kw2">perform</span> evaluate-statement<br/>                <span class="kw2">perform</span> show-result<br/>            end-<span class="kw2">perform</span><br/>        <span class="kw3">when</span> <span class="kw3">other</span><br/>            <span class="kw2">move</span> instruction <span class="kw2">to</span> statement<br/>            <span class="kw2">perform</span> evaluate-statement<br/>            <span class="kw2">perform</span> show-result<br/>        end-<span class="kw2">evaluate</span><br/>        <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> instruction<br/>        <span class="kw2">display</span> <span class="st0">'instruction? '</span> <span class="kw3">with</span> <span class="kw3">no</span> <span class="kw3">advancing</span><br/>        <span class="kw2">accept</span> instruction<br/>    end-<span class="kw2">perform</span><br/>&#160;<br/>    <span class="kw2">display</span> <span class="st0">'exit twentyfour'</span><br/>    <span class="kw3">stop</span> <span class="kw3">run</span><br/>    <span class="sy0">.</span><br/>generate-numbers<span class="sy0">.</span><br/>    <span class="kw2">perform</span> <span class="kw3">with</span> <span class="kw3">test</span> <span class="kw3">after</span> <span class="kw2">until</span> divide-by-zero-<span class="kw3">error</span> <span class="sy0">=</span> <span class="kw3">space</span><br/>    <span class="kw3">and</span> <span class="nu0">24</span><span class="sy0"> * </span>top-denominator <span class="sy0">=</span> top-numerator<br/>        <span class="kw2">compute</span> n<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw4">random</span><span class="br0">&#40;</span>seconds-past-midnight<span class="br0">&#41;</span><span class="sy0"> * </span><span class="nu0">10</span> *&gt; seed<br/>        <span class="kw2">perform</span> <span class="kw2">varying</span> nd <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> nd &gt; <span class="nu0">4</span><br/>            <span class="kw2">compute</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw4">random</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0"> * </span><span class="nu0">10</span><br/>            <span class="kw2">perform</span> <span class="kw2">until</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span> &lt;&gt; <span class="nu0">0</span><br/>                <span class="kw2">compute</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw4">random</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0"> * </span><span class="nu0">10</span><br/>            end-<span class="kw2">perform</span><br/>        end-<span class="kw2">perform</span><br/>        <span class="kw2">perform</span> validate-<span class="kw3">number</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="kw2">display</span> NL <span class="st0">'numbers:'</span> <span class="kw3">with</span> <span class="kw3">no</span> <span class="kw3">advancing</span><br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> nd <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> nd &gt; <span class="nu0">4</span><br/>        <span class="kw2">display</span> <span class="kw3">space</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span> <span class="kw3">with</span> <span class="kw3">no</span> <span class="kw3">advancing</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="kw2">display</span> <span class="kw3">space</span><br/>    <span class="sy0">.</span><br/>validate-<span class="kw3">number</span><span class="sy0">.</span><br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> p4 <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> p4 &gt; p4-lim<br/>        <span class="kw2">move</span> permutation-<span class="nu0">4</span><span class="br0">&#40;</span>p4<span class="br0">&#41;</span> <span class="kw2">to</span> current-permutation-<span class="nu0">4</span> <br/>        <span class="kw2">perform</span> <span class="kw2">varying</span> od1 <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> od1 &gt; od-lim<br/>            <span class="kw2">move</span> operator-definitions<span class="br0">&#40;</span>od1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> current-operators<span class="br0">&#40;</span><span class="nu0">1</span>:<span class="nu0">1</span><span class="br0">&#41;</span><br/>            <span class="kw2">perform</span> <span class="kw2">varying</span> od2 <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> od2 &gt; od-lim<br/>                <span class="kw2">move</span> operator-definitions<span class="br0">&#40;</span>od2:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> current-operators<span class="br0">&#40;</span><span class="nu0">2</span>:<span class="nu0">1</span><span class="br0">&#41;</span><br/>                <span class="kw2">perform</span> <span class="kw2">varying</span> odx <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> odx &gt; od-lim<br/>                    <span class="kw2">move</span> operator-definitions<span class="br0">&#40;</span>odx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> current-operators<span class="br0">&#40;</span><span class="nu0">3</span>:<span class="nu0">1</span><span class="br0">&#41;</span><br/>                    <span class="kw2">perform</span> <span class="kw2">varying</span> rpx <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> rpx &gt; rpx-lim<br/>                        <span class="kw2">move</span> rpn-form<span class="br0">&#40;</span>rpx<span class="br0">&#41;</span> <span class="kw2">to</span> current-rpn-form<br/>                        <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> cpx co3<br/>                        <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><br/>                        <span class="kw2">move</span> <span class="nu0">7</span> <span class="kw2">to</span> oqx<br/>                        <span class="kw2">perform</span> <span class="kw2">varying</span> oqx1 <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> oqx1 &gt; oqx<br/>                            <span class="kw1">if</span> current-rpn-form<span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'n'</span><br/>                                <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> cpx<br/>                                <span class="kw2">move</span> current-permutation-<span class="nu0">4</span><span class="br0">&#40;</span>cpx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> nd<br/>                                <span class="kw2">move</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span><br/>                            <span class="kw3">else</span><br/>                                <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> co3<br/>                                <span class="kw2">move</span> current-operators<span class="br0">&#40;</span>co3:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span><br/>                            end-<span class="kw1">if</span><br/>                        end-<span class="kw2">perform</span><br/>                    end-<span class="kw2">perform</span><br/>                    <span class="kw2">perform</span> evaluate-rpn<br/>                    <span class="kw1">if</span> divide-by-zero-<span class="kw3">error</span> <span class="sy0">=</span> <span class="kw3">space</span><br/>                    <span class="kw3">and</span> <span class="nu0">24</span><span class="sy0"> * </span>top-denominator <span class="sy0">=</span> top-numerator<br/>                        <span class="kw2">exit</span> paragraph<br/>                    end-<span class="kw1">if</span><br/>                end-<span class="kw2">perform</span><br/>            end-<span class="kw2">perform</span><br/>        end-<span class="kw2">perform</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="sy0">.</span>  <br/>display-instructions<span class="sy0">.</span><br/>    <span class="kw2">display</span> <span class="st0">'1)  Type h &lt;enter&gt; to repeat these instructions.'</span><br/>    <span class="kw2">display</span> <span class="st0">'2)  The program will display four randomly-generated'</span><br/>    <span class="kw2">display</span> <span class="st0">'    single-digit numbers and will then prompt you to enter'</span><br/>    <span class="kw2">display</span> <span class="st0">'    an arithmetic expression followed by &lt;enter&gt; to sum'</span><br/>    <span class="kw2">display</span> <span class="st0">'    the given numbers to 24.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    The four numbers may contain duplicates and the entered'</span><br/>    <span class="kw2">display</span> <span class="st0">'    expression must reference all the generated numbers and duplicates.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    Warning:  the program converts the entered infix expression'</span><br/>    <span class="kw2">display</span> <span class="st0">'    to a reverse polish notation (rpn) expression'</span><br/>    <span class="kw2">display</span> <span class="st0">'    which is then interpreted from RIGHT to LEFT.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    So, for instance, 8*4 - 5 - 3 will not sum to 24.'</span> <br/>    <span class="kw2">display</span> <span class="st0">'3)  Type n &lt;enter&gt; to generate a new set of four numbers.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    The program will ensure the generated numbers are solvable.'</span><br/>    <span class="kw2">display</span> <span class="st0">'4)  Type m#### &lt;enter&gt; (e.g. m1234) to create a fixed set of numbers'</span><br/>    <span class="kw2">display</span> <span class="st0">'    for testing purposes.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    The program will test the solvability of the entered numbers.'</span><br/>    <span class="kw2">display</span> <span class="st0">'    For example, m1234 is solvable and m9999 is not solvable.'</span><br/>    <span class="kw2">display</span> <span class="st0">'5)  Type d0, d1, d2 or d3 followed by &lt;enter&gt; to display none or'</span><br/>    <span class="kw2">display</span> <span class="st0">'    increasingly detailed diagnostic information as the program evaluates'</span> <br/>    <span class="kw2">display</span> <span class="st0">'    the entered expression.'</span><br/>    <span class="kw2">display</span> <span class="st0">'6)  Type e &lt;enter&gt; to see a list of example expressions and results'</span><br/>    <span class="kw2">display</span> <span class="st0">'7)  Type &lt;enter&gt; or q &lt;enter&gt; to exit the program'</span> <br/>    <span class="sy0">.</span><br/>show-result<span class="sy0">.</span><br/>    <span class="kw1">if</span> error-found <span class="sy0">=</span> <span class="st0">'y'</span><br/>    <span class="kw3">or</span> divide-by-zero-<span class="kw3">error</span> <span class="sy0">=</span> <span class="st0">'y'</span><br/>        <span class="kw2">exit</span> paragraph<br/>    end-<span class="kw1">if</span><br/>    <span class="kw2">display</span> <span class="st0">'statement in RPN is'</span> <span class="kw3">space</span> output-<span class="kw3">queue</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> top-numerator <span class="sy0">=</span> <span class="nu0">0</span><br/>    <span class="kw3">when</span> top-denominator <span class="sy0">=</span> <span class="nu0">0</span><br/>    <span class="kw3">when</span> <span class="nu0">24</span><span class="sy0"> * </span>top-denominator &lt;&gt; top-numerator<br/>        <span class="kw2">display</span> <span class="st0">'result ('</span> top-numerator <span class="st0">'/'</span> top-denominator <span class="st0">') is not 24'</span><br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        <span class="kw2">display</span> <span class="st0">'result is 24'</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/>evaluate-statement<span class="sy0">.</span><br/>    <span class="kw2">compute</span> l-lim <span class="sy0">=</span> <span class="kw4">length</span><span class="br0">&#40;</span>trim<span class="br0">&#40;</span>statement<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/>    <span class="kw2">display</span> NL <span class="st0">'numbers:'</span> <span class="kw3">space</span> n<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw3">space</span> n<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw3">space</span> n<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw3">space</span> n<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br/>    <span class="kw2">move</span> number-definitions <span class="kw2">to</span> number-<span class="kw3">use</span><br/>    <span class="kw2">display</span> <span class="st0">'statement is'</span> <span class="kw3">space</span> statement  <br/>&#160;<br/>    <span class="kw2">move</span> <span class="nu0">1</span> <span class="kw2">to</span> l<br/>    <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> loop-<span class="kw3">count</span><br/>    <span class="kw2">move</span> <span class="kw3">space</span> <span class="kw2">to</span> error-found<br/>&#160;<br/>    <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> osx oqx<br/>    <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><br/>&#160;<br/>    <span class="kw2">move</span> <span class="nu0">1</span> <span class="kw2">to</span> p<br/>    <span class="kw2">move</span> <span class="nu0">1</span> <span class="kw2">to</span> nt<br/>    <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> s<br/>    <span class="kw2">perform</span> increment-s<br/>    <span class="kw2">perform</span> display-start-nonterminal<br/>    <span class="kw2">perform</span> increment-p<br/>&#160;<br/>    *&gt;<span class="sy0">===================================</span><br/>    *&gt; interpret ebnf<br/>    *&gt;<span class="sy0">===================================</span> <br/>    <span class="kw2">perform</span> <span class="kw2">until</span> s <span class="sy0">=</span> <span class="nu0">0</span> <br/>    <span class="kw3">or</span> error-found <span class="sy0">=</span> <span class="st0">'y'</span><br/>&#160;<br/>        <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'n'</span><br/>        <span class="kw3">and</span> p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">000</span> *&gt; a variable<br/>           <span class="kw2">perform</span> test-variable<br/>       <span class="kw1">if</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span><br/>               <span class="kw2">perform</span> increment-l<br/>           end-<span class="kw1">if</span><br/>           <span class="kw2">perform</span> increment-p<br/>&#160;<br/>       <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'n'</span><br/>       <span class="kw3">and</span> p-<span class="kw3">address</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span> &lt;&gt; p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> *&gt; nonterminal <span class="kw3">reference</span><br/>           <span class="kw2">move</span> p <span class="kw2">to</span> s-p<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>           <span class="kw2">move</span> p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>&#160;<br/>       <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'n'</span><br/>       <span class="kw3">and</span> p-<span class="kw3">address</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> *&gt; nonterminal definition<br/>           <span class="kw2">perform</span> increment-s<br/>           <span class="kw2">perform</span> display-start-nonterminal<br/>           <span class="kw2">perform</span> increment-p<br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'='</span> *&gt; nonterminal <span class="kw3">control</span><br/>            <span class="kw2">move</span> p <span class="kw2">to</span> s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> p-matching<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-end-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">perform</span> increment-p<br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">';'</span> *&gt; <span class="kw3">end</span> nonterminal<br/>            <span class="kw2">perform</span> display-end-<span class="kw3">control</span><br/>            <span class="kw2">perform</span> display-end-nonterminal<br/>            <span class="kw2">perform</span> decrement-s<br/>            <span class="kw1">if</span> s &gt; <span class="nu0">0</span><br/>                <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>                <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span><br/>                    <span class="kw2">perform</span> set-success<br/>                <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'F'</span><br/>                    <span class="kw2">perform</span> set-failure<br/>                end-<span class="kw2">evaluate</span><br/>                <span class="kw2">move</span> s-p<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>                <span class="kw2">perform</span> increment-p<br/>                <span class="kw2">perform</span> display-continue-nonterminal<br/>            end-<span class="kw1">if</span><br/>&#160;<br/>    <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'{'</span> *&gt; <span class="kw3">start</span> repeat <span class="kw3">sequence</span><br/>            <span class="kw2">perform</span> increment-s<br/>            <span class="kw2">perform</span> display-start-<span class="kw3">control</span><br/>            <span class="kw2">move</span> p <span class="kw2">to</span> s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> p-<span class="kw3">alternate</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-<span class="kw3">alternate</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> p-matching<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-end-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> s-<span class="kw3">count</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">perform</span> increment-p<br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'}'</span> *&gt; <span class="kw3">end</span> repeat <span class="kw3">sequence</span><br/>            <span class="kw2">perform</span> display-end-<span class="kw3">control</span><br/>            <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>            <span class="kw3">when</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span> *&gt; repeat the <span class="kw3">sequence</span><br/>                <span class="kw2">perform</span> display-repeat-<span class="kw3">control</span><br/>                <span class="kw2">perform</span> set-nothing<br/>                <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> s-repeat<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>                <span class="kw2">move</span> s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>                <span class="kw2">perform</span> increment-p<br/>           <span class="kw3">when</span> <span class="kw3">other</span><br/>               <span class="kw2">perform</span> decrement-s<br/>               <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>               <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'N'</span><br/>               <span class="kw3">and</span> s-repeat<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span> *&gt; <span class="kw3">no</span> result<br/>                   <span class="kw2">perform</span> increment-p<br/>               <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'N'</span><br/>               <span class="kw3">and</span> s-repeat<span class="br0">&#40;</span>r<span class="br0">&#41;</span> &gt; <span class="nu0">0</span> *&gt; <span class="kw3">no</span> result <span class="kw3">after</span> success<br/>                   <span class="kw2">perform</span> set-success<br/>                   <span class="kw2">perform</span> increment-p<br/>               <span class="kw3">when</span> <span class="kw3">other</span> *&gt; fail the <span class="kw3">sequence</span><br/>                   <span class="kw2">perform</span> increment-p<br/>               end-<span class="kw2">evaluate</span><br/>           end-<span class="kw2">evaluate</span><br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'('</span> *&gt; <span class="kw3">start</span> <span class="kw3">sequence</span><br/>            <span class="kw2">perform</span> increment-s<br/>            <span class="kw2">perform</span> display-start-<span class="kw3">control</span><br/>            <span class="kw2">move</span> p <span class="kw2">to</span> s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> p-<span class="kw3">alternate</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-<span class="kw3">alternate</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> p-matching<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-end-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> s-<span class="kw3">count</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">perform</span> increment-p<br/>&#160;<br/>       <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">')'</span> *&gt; <span class="kw3">end</span> <span class="kw3">sequence</span><br/>           <span class="kw2">perform</span> display-end-<span class="kw3">control</span><br/>           <span class="kw2">perform</span> decrement-s<br/>           <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>           <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span> *&gt; success<br/>               <span class="kw2">perform</span> set-success<br/>               <span class="kw2">perform</span> increment-p<br/>           <span class="kw3">when</span> s-result<span class="br0">&#40;</span>r<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'N'</span> *&gt; <span class="kw3">no</span> result<br/>               <span class="kw2">perform</span> set-failure<br/>               <span class="kw2">perform</span> increment-p<br/>            <span class="kw3">when</span> <span class="kw3">other</span> *&gt; fail the <span class="kw3">sequence</span><br/>               <span class="kw2">perform</span> set-failure<br/>               <span class="kw2">perform</span> increment-p<br/>           end-<span class="kw2">evaluate</span><br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'|'</span> *&gt; <span class="kw3">alternate</span><br/>            <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>            <span class="kw3">when</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'S'</span> *&gt; <span class="kw2">exit</span> the <span class="kw3">sequence</span><br/>                <span class="kw2">perform</span> display-skip-<span class="kw3">alternate</span><br/>                <span class="kw2">move</span> s-end-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>            <span class="kw3">when</span> <span class="kw3">other</span><br/>                <span class="kw2">perform</span> display-take-<span class="kw3">alternate</span><br/>                <span class="kw2">move</span> p-<span class="kw3">alternate</span><span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> s-<span class="kw3">alternate</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> *&gt; the <span class="kw3">next</span> <span class="kw3">alternate</span><br/>                <span class="kw2">perform</span> increment-p<br/>                <span class="kw2">perform</span> set-nothing<br/>            end-<span class="kw2">evaluate</span><br/>&#160;<br/>        <span class="kw3">when</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'t'</span> *&gt; <span class="kw3">terminal</span><br/>            <span class="kw2">move</span> p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw2">to</span> t<br/>            <span class="kw2">move</span> terminal-symbol-len<span class="br0">&#40;</span>t<span class="br0">&#41;</span> <span class="kw2">to</span> t-len<br/>            <span class="kw2">perform</span> display-<span class="kw3">terminal</span><br/>            <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>            <span class="kw3">when</span> statement<span class="br0">&#40;</span>l:t-len<span class="br0">&#41;</span> <span class="sy0">=</span> terminal-symbol<span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">1</span>:t-len<span class="br0">&#41;</span> *&gt; successful match<br/>               <span class="kw2">perform</span> set-success<br/>               <span class="kw2">perform</span> display-recognize-<span class="kw3">terminal</span><br/>               <span class="kw2">perform</span> process-token<br/>               <span class="kw2">move</span> t-len <span class="kw2">to</span> l-len<br/>               <span class="kw2">perform</span> increment-l<br/>               <span class="kw2">perform</span> increment-p<br/>            <span class="kw3">when</span> s-<span class="kw3">alternate</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> &lt;&gt; <span class="nu0">000</span> *&gt; we are <span class="kw3">in</span> an <span class="kw3">alternate</span> <span class="kw3">sequence</span><br/>               <span class="kw2">move</span> s-<span class="kw3">alternate</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>            <span class="kw3">when</span> <span class="kw3">other</span> *&gt; fail the <span class="kw3">sequence</span><br/>               <span class="kw2">perform</span> set-failure<br/>               <span class="kw2">move</span> s-end-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> p<br/>            end-<span class="kw2">evaluate</span><br/>&#160;<br/>        <span class="kw3">when</span> <span class="kw3">other</span> *&gt; <span class="kw3">end</span> <span class="kw3">control</span><br/>            <span class="kw2">perform</span> display-control-failure *&gt; shouldnt happen<br/>&#160;<br/>        end-<span class="kw2">evaluate</span><br/>&#160;<br/>     end-<span class="kw2">perform</span><br/>&#160;<br/>     <span class="kw2">evaluate</span> <span class="kw3">true</span> *&gt; <span class="kw3">at</span> <span class="kw3">end</span> <span class="kw3">of</span> evaluation<br/>     <span class="kw3">when</span> error-found <span class="sy0">=</span> <span class="st0">'y'</span><br/>         <span class="kw2">continue</span><br/>     <span class="kw3">when</span> l &lt;<span class="sy0">=</span> l-lim *&gt; <span class="kw3">not</span> <span class="kw3">all</span> tokens parsed<br/>         <span class="kw2">display</span> <span class="st0">'error: invalid statement'</span><br/>         <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>     <span class="kw3">when</span> number-<span class="kw3">use</span> &lt;&gt; <span class="kw3">spaces</span><br/>         <span class="kw2">display</span> <span class="st0">'error:  not all numbers were used: '</span> number-<span class="kw3">use</span><br/>         <span class="kw2">move</span> <span class="st0">'y'</span> <span class="kw2">to</span> error-found<br/>     end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/>increment-l<span class="sy0">.</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> l &gt; l-lim *&gt; <span class="kw3">end</span> <span class="kw3">of</span> statement<br/>        <span class="kw2">continue</span><br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        <span class="kw2">add</span> l-len <span class="kw2">to</span> l<br/>        <span class="kw2">perform</span> <span class="kw2">varying</span> l <span class="kw3">from</span> l <span class="kw3">by</span> <span class="nu0">1</span> <br/>        <span class="kw2">until</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> &lt;&gt; <span class="kw3">space</span><br/>        <span class="kw3">or</span> l &gt; l-lim<br/>            <span class="kw2">continue</span><br/>        end-<span class="kw2">perform</span><br/>        <span class="kw2">move</span> <span class="nu0">1</span> <span class="kw2">to</span> l-len<br/>        <span class="kw1">if</span> l &gt; l-lim<br/>            <span class="kw2">perform</span> end-tokens<br/>        end-<span class="kw1">if</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/>increment-p<span class="sy0">.</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> p &gt;<span class="sy0">=</span> p-<span class="kw4">max</span><br/>        <span class="kw2">display</span> <span class="st0">'at'</span> <span class="kw3">space</span> p <span class="st0">' parse overflow'</span><br/>            <span class="kw3">space</span> <span class="st0">'s=&lt;'</span> s <span class="kw3">space</span> s-entry<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="st0">'&gt;'</span><br/>        <span class="kw2">move</span> <span class="st0">'y'</span> <span class="kw2">to</span> error-found<br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> p<br/>        <span class="kw2">perform</span> display-statement<br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/>increment-s<span class="sy0">.</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> s &gt;<span class="sy0">=</span> s-<span class="kw4">max</span><br/>        <span class="kw2">display</span> <span class="st0">'at'</span> <span class="kw3">space</span> p <span class="st0">' stack overflow '</span><br/>            <span class="kw3">space</span> <span class="st0">'s=&lt;'</span> s <span class="kw3">space</span> s-entry<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="st0">'&gt;'</span><br/>        <span class="kw2">move</span> <span class="st0">'y'</span> <span class="kw2">to</span> error-found<br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        <span class="kw2">move</span> s <span class="kw2">to</span> r<br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> s<br/>        <span class="kw2">initialize</span> s-entry<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="kw2">move</span> <span class="st0">'N'</span> <span class="kw2">to</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="kw2">move</span> p <span class="kw2">to</span> s-p<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="kw2">move</span> nt <span class="kw2">to</span> s-nt<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/>decrement-s<span class="sy0">.</span><br/>    <span class="kw1">if</span> s &gt; <span class="nu0">0</span><br/>        <span class="kw2">move</span> s <span class="kw2">to</span> r<br/>        <span class="kw3">subtract</span> <span class="nu0">1</span> <span class="kw3">from</span> s<br/>        <span class="kw1">if</span> s &gt; <span class="nu0">0</span><br/>            <span class="kw2">move</span> s-nt<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> nt<br/>        end-<span class="kw1">if</span><br/>    end-<span class="kw1">if</span><br/>    <span class="sy0">.</span><br/>set-failure<span class="sy0">.</span><br/>    <span class="kw2">move</span> <span class="st0">'F'</span> <span class="kw2">to</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="kw1">if</span> s-<span class="kw3">count</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> &gt; <span class="nu0">0</span><br/>        <span class="kw2">display</span> <span class="st0">'sequential parse failure'</span><br/>        <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>    end-<span class="kw1">if</span><br/>    <span class="sy0">.</span><br/>set-success<span class="sy0">.</span><br/>    <span class="kw2">move</span> <span class="st0">'S'</span> <span class="kw2">to</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> s-<span class="kw3">count</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="sy0">.</span><br/>set-nothing<span class="sy0">.</span><br/>    <span class="kw2">move</span> <span class="st0">'N'</span> <span class="kw2">to</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> s-<span class="kw3">count</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="sy0">.</span><br/>statement-<span class="kw3">error</span><span class="sy0">.</span><br/>    <span class="kw2">display</span> statement<br/>    <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> statement<br/>    <span class="kw2">move</span> <span class="st0">'^ syntax error'</span> <span class="kw2">to</span> statement<span class="br0">&#40;</span>l:<span class="br0">&#41;</span><br/>    <span class="kw2">display</span> statement<br/>    <span class="kw2">move</span> <span class="st0">'y'</span> <span class="kw2">to</span> error-found<br/>    <span class="sy0">.</span><br/><span class="co1">*&gt;=====================</span><br/><span class="co1">*&gt; twentyfour semantics</span><br/><span class="co1">*&gt;=====================</span><br/>test-variable<span class="sy0">.</span><br/>    *&gt; <span class="kw1">check</span> validity<br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> nd <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> nd &gt; <span class="nu0">4</span><br/>    <span class="kw3">or</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="sy0">=</span> n<span class="br0">&#40;</span>nd<span class="br0">&#41;</span><br/>        <span class="kw2">continue</span><br/>    end-<span class="kw2">perform</span><br/>    *&gt; <span class="kw1">check</span> <span class="kw3">usage</span><br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> nu <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> nu &gt; <span class="nu0">4</span><br/>    <span class="kw3">or</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="sy0">=</span> u<span class="br0">&#40;</span>nu<span class="br0">&#41;</span><br/>        <span class="kw2">continue</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> l &gt; l-lim<br/>        <span class="kw2">perform</span> set-failure<br/>    <span class="kw3">when</span> c9<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw3">not</span> <span class="kw3">numeric</span><br/>        <span class="kw2">perform</span> set-failure<br/>    <span class="kw3">when</span> nd &gt; <span class="nu0">4</span><br/>        <span class="kw2">display</span> <span class="st0">'invalid number'</span><br/>        <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>    <span class="kw3">when</span> nu &gt; <span class="nu0">4</span><br/>        <span class="kw2">display</span> <span class="st0">'number already used'</span><br/>        <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        <span class="kw2">move</span> <span class="kw3">space</span> <span class="kw2">to</span> u<span class="br0">&#40;</span>nu<span class="br0">&#41;</span><br/>        <span class="kw2">perform</span> set-success<br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> oqx<br/>        <span class="kw2">move</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span><br/><span class="co1">*&gt; ==================================</span><br/><span class="co1">*&gt; Dijkstra Shunting-Yard Algorithm</span><br/><span class="co1">*&gt; to convert infix to rpn</span><br/><span class="co1">*&gt; ==================================</span><br/>process-token<span class="sy0">.</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'('</span><br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> osx<br/>        <span class="kw2">move</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw2">to</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>    <span class="kw3">when</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">')'</span><br/>        <span class="kw2">perform</span> <span class="kw2">varying</span> osx <span class="kw3">from</span> osx <span class="kw3">by</span> -<span class="nu0">1</span> <span class="kw2">until</span> osx &lt; <span class="nu0">1</span><br/>        <span class="kw3">or</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'('</span><br/>            <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> oqx<br/>            <span class="kw2">move</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>        end-<span class="kw2">perform</span><br/>        <span class="kw1">if</span> osx &lt; <span class="nu0">1</span><br/>            <span class="kw2">display</span> <span class="st0">'parenthesis error'</span><br/>            <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>            <span class="kw2">exit</span> paragraph<br/>        end-<span class="kw1">if</span><br/>        <span class="kw3">subtract</span> <span class="nu0">1</span> <span class="kw3">from</span> osx<br/>    <span class="kw3">when</span> <span class="br0">&#40;</span>c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'+'</span> <span class="kw3">or</span> <span class="st0">'-'</span><span class="br0">&#41;</span> <span class="kw3">and</span> <span class="br0">&#40;</span>operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'*'</span> <span class="kw3">or</span> <span class="st0">'/'</span><span class="br0">&#41;</span><br/>        *&gt; lesser operator precedence<br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> oqx<br/>        <span class="kw2">move</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx:<span class="nu0">1</span><span class="br0">&#41;</span> <br/>        <span class="kw2">move</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw2">to</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>    <span class="kw3">when</span> <span class="kw3">other</span><br/>        *&gt; <span class="kw3">greater</span> operator precedence<br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> osx<br/>        <span class="kw2">move</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="kw2">to</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="sy0">.</span> <br/>end-tokens<span class="sy0">.</span><br/>    *&gt; <span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">copy</span> stacked operators <span class="kw2">to</span> the output-<span class="kw3">queue</span><br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> osx <span class="kw3">from</span> osx <span class="kw3">by</span> -<span class="nu0">1</span> <span class="kw2">until</span> osx &lt; <span class="nu0">1</span><br/>    <span class="kw3">or</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'('</span><br/>        <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> oqx<br/>        <span class="kw2">move</span> operator-stack<span class="br0">&#40;</span>osx:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx:<span class="nu0">1</span><span class="br0">&#41;</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="kw1">if</span> osx &gt; <span class="nu0">0</span><br/>        <span class="kw2">display</span> <span class="st0">'parenthesis error'</span><br/>        <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>        <span class="kw2">exit</span> paragraph<br/>    end-<span class="kw1">if</span><br/>    *&gt; <span class="nu0">2</span><span class="br0">&#41;</span> <span class="kw2">evaluate</span> the rpn statement<br/>    <span class="kw2">perform</span> evaluate-rpn<br/>    <span class="kw1">if</span> divide-by-zero-<span class="kw3">error</span> <span class="sy0">=</span> <span class="st0">'y'</span><br/>        <span class="kw2">display</span> <span class="st0">'divide by zero error'</span><br/>    end-<span class="kw1">if</span><br/>    <span class="sy0">.</span><br/>evaluate-rpn<span class="sy0">.</span><br/>    <span class="kw2">move</span> <span class="kw3">space</span> <span class="kw2">to</span> divide-by-zero-<span class="kw3">error</span><br/>    <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> rsx *&gt; stack depth<br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> oqx1 <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> oqx1 &gt; oqx<br/>        <span class="kw1">if</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> &gt;<span class="sy0">=</span> <span class="st0">'1'</span> <span class="kw3">and</span> &lt;<span class="sy0">=</span> <span class="st0">'9'</span><br/>            *&gt; push current <span class="kw3">data</span> onto the stack<br/>            <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> rsx<br/>            <span class="kw2">move</span> top-numerator <span class="kw2">to</span> numerator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> top-denominator <span class="kw2">to</span> denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>            <span class="kw2">move</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">to</span> top-numerator<br/>            <span class="kw2">move</span> <span class="nu0">1</span> <span class="kw2">to</span> top-denominator<br/>        <span class="kw3">else</span><br/>            *&gt; apply the operation<br/>            <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>            <span class="kw3">when</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'+'</span><br/>                <span class="kw2">compute</span> top-numerator <span class="sy0">=</span> top-numerator<span class="sy0"> * </span>denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>                   <span class="sy0"> + </span>top-denominator<span class="sy0"> * </span>numerator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>                <span class="kw2">compute</span> top-denominator <span class="sy0">=</span> top-denominator<span class="sy0"> * </span>denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span>  <br/>            <span class="kw3">when</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'-'</span> <br/>                <span class="kw2">compute</span> top-numerator <span class="sy0">=</span> top-denominator<span class="sy0"> * </span>numerator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>                   <span class="sy0"> - </span>top-numerator<span class="sy0"> * </span>denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>                <span class="kw2">compute</span> top-denominator <span class="sy0">=</span> top-denominator<span class="sy0"> * </span>denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span>  <br/>            <span class="kw3">when</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'*'</span> <br/>                <span class="kw2">compute</span> top-numerator <span class="sy0">=</span> top-numerator<span class="sy0"> * </span>numerator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><br/>                <span class="kw2">compute</span> top-denominator <span class="sy0">=</span> top-denominator<span class="sy0"> * </span>denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span>  <br/>            <span class="kw3">when</span> output-<span class="kw3">queue</span><span class="br0">&#40;</span>oqx1:<span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">'/'</span><br/>                <span class="kw2">compute</span> work-<span class="kw3">number</span> <span class="sy0">=</span> numerator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><span class="sy0"> * </span>top-denominator<br/>                <span class="kw2">compute</span> top-denominator <span class="sy0">=</span> denominator<span class="br0">&#40;</span>rsx<span class="br0">&#41;</span><span class="sy0"> * </span>top-numerator<br/>                <span class="kw1">if</span> top-denominator <span class="sy0">=</span> <span class="nu0">0</span><br/>                    <span class="kw2">move</span> <span class="st0">'y'</span> <span class="kw2">to</span> divide-by-zero-<span class="kw3">error</span><br/>                    <span class="kw2">exit</span> paragraph<br/>                end-<span class="kw1">if</span><br/>                <span class="kw2">move</span> work-<span class="kw3">number</span> <span class="kw2">to</span> top-numerator<br/>            end-<span class="kw2">evaluate</span><br/>            *&gt; pop the stack<br/>            <span class="kw3">subtract</span> <span class="nu0">1</span> <span class="kw3">from</span> rsx<br/>        end-<span class="kw1">if</span><br/>    end-<span class="kw2">perform</span> <br/>    <span class="sy0">.</span><br/><span class="co1">*&gt;====================</span><br/><span class="co1">*&gt; diagnostic displays</span><br/><span class="co1">*&gt;====================</span><br/>display-start-nonterminal<span class="sy0">.</span><br/>    <span class="kw2">perform</span> <span class="kw2">varying</span> nt <span class="kw3">from</span> nt-lim <span class="kw3">by</span> -<span class="nu0">1</span> <span class="kw2">until</span> nt &lt; <span class="nu0">1</span><br/>    <span class="kw3">or</span> p-definition<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="sy0">=</span> nonterminal-statement-<span class="kw3">number</span><span class="br0">&#40;</span>nt<span class="br0">&#41;</span><br/>        <span class="kw2">continue</span><br/>    end-<span class="kw2">perform</span><br/>    <span class="kw1">if</span> nt &gt; <span class="nu0">0</span><br/>        <span class="kw2">move</span> <span class="st0">'1'</span> <span class="kw2">to</span> NL-flag<br/>        <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' start '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>            <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>        <span class="kw2">move</span> nt <span class="kw2">to</span> s-nt<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    end-<span class="kw1">if</span><br/>    <span class="sy0">.</span><br/>display-continue-nonterminal<span class="sy0">.</span><br/>    <span class="kw2">move</span> s-nt<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> nt<br/>    <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="kw3">space</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="st0">' continue '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="st0">' with result '</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-end-nonterminal<span class="sy0">.</span><br/>    <span class="kw2">move</span> s-nt<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="kw2">to</span> nt<br/>    <span class="kw2">move</span> <span class="st0">'2'</span> <span class="kw2">to</span> NL-flag<br/>    <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' end '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="st0">' with result '</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>            <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-start-<span class="kw3">control</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'2'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' start '</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-repeat-<span class="kw3">control</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'2'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' repeat '</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span>  <span class="st0">' with result '</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-end-<span class="kw3">control</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'2'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' end '</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span>  <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="st0">' with result '</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-take-<span class="kw3">alternate</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'2'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' take alternate'</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-skip-<span class="kw3">alternate</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'2'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' skip alternate'</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-<span class="kw3">terminal</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p<br/>        <span class="st0">' compare '</span> statement<span class="br0">&#40;</span>l:t-len<span class="br0">&#41;</span> <span class="st0">' to '</span> terminal-symbol<span class="br0">&#40;</span>t<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="nu0">1</span>:t-len<span class="br0">&#41;</span><br/>        <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-recognize-<span class="kw3">terminal</span><span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' recognize terminal: '</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-recognize-variable<span class="sy0">.</span><br/>    <span class="kw3">string</span> <span class="st0">'1'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p <span class="st0">' recognize digit: '</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-statement<span class="sy0">.</span><br/>    <span class="kw2">compute</span> p1 <span class="sy0">=</span> p<span class="sy0"> - </span>s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>    <span class="kw3">string</span> <span class="st0">'3'</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at '</span> s <span class="kw3">space</span> p<br/>        <span class="st0">' statement: '</span> s-start-<span class="kw3">control</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="st0">'/'</span> p1<br/>        <span class="kw3">space</span> p-symbol<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="kw3">space</span> s-result<span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/>        <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">into</span> message-<span class="kw3">area</span> <span class="kw2">perform</span> display-<span class="kw3">message</span><br/>    <span class="sy0">.</span><br/>display-control-failure<span class="sy0">.</span><br/>    <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'at'</span> <span class="kw3">space</span> p <span class="st0">' control failure'</span> <span class="st0">' in '</span> trim<span class="br0">&#40;</span>nonterminal-statement<span class="br0">&#40;</span>nt<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'   '</span> <span class="st0">'p=&lt;'</span> p p-entry<span class="br0">&#40;</span>p<span class="br0">&#41;</span> <span class="st0">'&gt;'</span><br/>    <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'   '</span> <span class="st0">'s=&lt;'</span> s <span class="kw3">space</span> s-entry<span class="br0">&#40;</span>s<span class="br0">&#41;</span> <span class="st0">'&gt;'</span><br/>    <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> indent<span class="br0">&#40;</span><span class="nu0">1</span>:s<span class="sy0"> + </span>s<span class="br0">&#41;</span> <span class="st0">'   '</span> <span class="st0">'l=&lt;'</span> l <span class="kw3">space</span> c<span class="br0">&#40;</span>l<span class="br0">&#41;</span><span class="st0">'&gt;'</span><br/>    <span class="kw2">perform</span> statement-<span class="kw3">error</span><br/>    <span class="sy0">.</span><br/>display-<span class="kw3">message</span><span class="sy0">.</span><br/>    <span class="kw1">if</span> display-level <span class="sy0">=</span> <span class="nu0">1</span><br/>        <span class="kw2">move</span> <span class="kw3">space</span> <span class="kw2">to</span> NL-flag<br/>    end-<span class="kw1">if</span><br/>    <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>    <span class="kw3">when</span> loop-<span class="kw3">count</span> &gt; loop-lim *&gt; loop <span class="kw3">control</span><br/>        <span class="kw2">display</span> <span class="st0">'display count exceeds '</span> loop-lim<br/>        <span class="kw3">stop</span> <span class="kw3">run</span><br/>    <span class="kw3">when</span> message-level &lt;<span class="sy0">=</span> display-level<br/>        <span class="kw2">evaluate</span> <span class="kw3">true</span><br/>        <span class="kw3">when</span> NL-flag <span class="sy0">=</span> <span class="st0">'1'</span><br/>             <span class="kw2">display</span> NL loop-<span class="kw3">count</span> <span class="kw3">space</span> trim<span class="br0">&#40;</span>message-<span class="kw3">value</span><span class="br0">&#41;</span><br/>        <span class="kw3">when</span> NL-flag <span class="sy0">=</span> <span class="st0">'2'</span><br/>             <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> trim<span class="br0">&#40;</span>message-<span class="kw3">value</span><span class="br0">&#41;</span> NL<br/>        <span class="kw3">when</span> <span class="kw3">other</span><br/>             <span class="kw2">display</span> loop-<span class="kw3">count</span> <span class="kw3">space</span> trim<span class="br0">&#40;</span>message-<span class="kw3">value</span><span class="br0">&#41;</span><br/>        end-<span class="kw2">evaluate</span><br/>    end-<span class="kw2">evaluate</span><br/>    <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> loop-<span class="kw3">count</span><br/>    <span class="kw2">move</span> <span class="kw3">spaces</span> <span class="kw2">to</span> message-<span class="kw3">area</span><br/>    <span class="kw2">move</span> <span class="kw3">space</span> <span class="kw2">to</span> NL-flag<br/>    <span class="sy0">.</span><br/><span class="kw3">end</span> <span class="kw3">program</span> twentyfour<span class="sy0">.</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="CoffeeScript"><a href="/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=15" title="Edit section: CoffeeScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Node.js" title="Node.js">node.js</a></div>
<pre class="coffeescript highlighted_source">tty = require <span class="st0">'tty'</span><br/>tty.<span class="me1">setRawMode</span> <span class="kw4">true</span><br/>&#160;<br/>buffer  = <span class="st0">&quot;&quot;</span><br/>numbers = <span class="br0">&#91;</span><span class="br0">&#93;</span><br/>&#160;<br/><span class="kw1">for</span> n <span class="kw1">in</span> <span class="br0">&#91;</span><span class="nu0">0</span>...<span class="nu0">4</span><span class="br0">&#93;</span><br/>    numbers.<span class="me1">push</span> Math.<span class="me1">max</span> <span class="nu0">1</span><span class="sy0">,</span> Math.<span class="me1">floor</span><span class="br0">&#40;</span>Math.<span class="me1">random</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">9</span><span class="br0">&#41;</span><br/>&#160;<br/>console.<span class="me1">log</span> <span class="st0">&quot;You can use the numbers: #{numbers.join ' '}&quot;</span><br/>&#160;<br/>process.<span class="me1">stdin</span>.<span class="kw4">on</span> <span class="st0">'keypress'</span><span class="sy0">,</span> <span class="br0">&#40;</span>char<span class="sy0">,</span> key<span class="br0">&#41;</span> <span class="sy0">-&gt;</span><br/>&#160;<br/>    <span class="co1"># accept operator</span><br/>    <span class="kw1">if</span> char <span class="kw2">and</span> isNaN<span class="br0">&#40;</span>char<span class="br0">&#41;</span> <span class="kw2">and</span> <span class="sy0">/</span><span class="br0">&#91;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">*</span>\<span class="sy0">/+-</span><span class="br0">&#93;</span><span class="sy0">/</span>.<span class="me1">test</span><span class="br0">&#40;</span>char<span class="br0">&#41;</span> <span class="kw2">and</span> buffer.<span class="me1">substr</span><span class="br0">&#40;</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw2">isnt</span> char<br/>        buffer <span class="sy0">+</span>= char<br/>        process.<span class="me1">stdout</span>.<span class="me1">write</span> char<br/>    <span class="co1"># accept number</span><br/>    <span class="kw1">else</span> <span class="kw1">if</span> <span class="sy0">!</span>isNaN<span class="br0">&#40;</span><span class="sy0">+</span>char<span class="br0">&#41;</span> <span class="kw2">and</span> <span class="br0">&#40;</span>buffer == <span class="st0">''</span> <span class="kw2">or</span> isNaN<span class="br0">&#40;</span>buffer.<span class="me1">substr</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        buffer <span class="sy0">+</span>= char<br/>        process.<span class="me1">stdout</span>.<span class="me1">write</span> char<br/>&#160;<br/>    <span class="co1"># check then evaluate expression</span><br/>    <span class="kw1">if</span> key<span class="sy0">?</span>.<span class="me1">name</span> <span class="kw2">is</span> <span class="st0">'enter'</span><br/>        result = calculate<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>        process.<span class="me1">stdout</span>.<span class="me1">write</span> <span class="st0">'<span class="es0">\n</span>'</span><br/>        <span class="kw1">if</span> result <span class="kw2">and</span> result <span class="kw2">is</span> <span class="nu0">24</span><br/>            console.<span class="me1">log</span> <span class="st0">&quot; = 24! congratulations.&quot;</span><br/>        <span class="kw1">else</span><br/>            console.<span class="me1">log</span> <span class="st0">&quot;#{result}. nope.&quot;</span><br/>        process.<span class="me1">exit</span> <span class="nu0">0</span><br/>&#160;<br/>    <span class="co1"># quit</span><br/>    <span class="kw1">if</span> key<span class="sy0">?</span>.<span class="me1">name</span> <span class="kw2">is</span> <span class="st0">'escape'</span> <span class="kw2">or</span> <span class="br0">&#40;</span>key<span class="sy0">?</span>.<span class="me1">name</span> == <span class="st0">'c'</span> <span class="kw2">and</span> key.<span class="me1">ctrl</span><span class="br0">&#41;</span><br/>        process.<span class="me1">exit</span> <span class="nu0">0</span><br/>&#160;<br/>calculate = <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">-&gt;</span><br/>&#160;<br/>    <span class="kw1">if</span> <span class="sy0">/</span><span class="br0">&#91;</span><span class="sy0">^</span>\d\s<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">+*</span>\<span class="sy0">/-</span><span class="br0">&#93;</span><span class="sy0">/</span>.<span class="me1">test</span> buffer<br/>        console.<span class="me1">log</span> <span class="st0">&quot;invalid characters&quot;</span><br/>        process.<span class="me1">exit</span> <span class="nu0">1</span><br/>&#160;<br/>    used = buffer.<span class="me1">match</span><span class="br0">&#40;</span><span class="sy0">/</span>\d<span class="sy0">/</span>g<span class="br0">&#41;</span><br/>    <span class="kw1">if</span> used<span class="sy0">?</span>.<span class="me1">length</span> <span class="sy0">!</span>= <span class="nu0">4</span> <span class="kw2">or</span> used.<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">join</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">!</span>= numbers.<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">join</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/>        console.<span class="me1">log</span> <span class="st0">&quot;you must use the 4 numbers provided&quot;</span><br/>        process.<span class="me1">exit</span> <span class="nu0">1</span><br/>&#160;<br/>    res = <span class="kw1">try</span> eval buffer <span class="kw1">catch</span> e<br/>    <span class="kw1">return</span> res <span class="kw2">or</span> <span class="st0">'invalid expression'</span><br/>&#160;<br/>&#160;<br/><span class="co1"># begin taking input</span><br/>process.<span class="me1">stdin</span>.<span class="me1">resume</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Common_Lisp"><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=16" title="Edit section: Common Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lisp highlighted_source"><span class="br0">&#40;</span>define-condition choose-digits <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="br0">&#40;</span>define-condition bad-equation <span class="br0">&#40;</span><span class="kw1">error</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> <span class="nu0">24</span>-game <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span><span class="kw1">let</span> <span class="br0">&#40;</span>chosen-digits<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>labels <span class="br0">&#40;</span><span class="br0">&#40;</span>prompt <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>format t <span class="st0">&quot;Chosen digits: ~{~D~^, ~}~%~<br/>                          Enter expression (or `bye' to quit, `!' to choose new digits): &quot;</span><br/>                       chosen-digits<span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>read<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>             <span class="br0">&#40;</span>lose <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">error</span> 'bad-equation<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>             <span class="br0">&#40;</span>choose <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">setf</span> chosen-digits <span class="br0">&#40;</span>loop repeat <span class="nu0">4</span> collecting <span class="br0">&#40;</span><span class="nu0">1</span>+ <span class="br0">&#40;</span><span class="kw1">random</span> <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>             <span class="br0">&#40;</span>check <span class="br0">&#40;</span>e<span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>typecase e<br/>                 <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">eql</span> bye<span class="br0">&#41;</span> <span class="br0">&#40;</span>return-from <span class="nu0">24</span>-game<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">eql</span> <span class="sy0">!</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>signal 'choose-digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="kw1">atom</span> <span class="br0">&#40;</span>lose<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="kw1">cons</span> <span class="br0">&#40;</span>check-sub <span class="br0">&#40;</span><span class="kw1">car</span> e<span class="br0">&#41;</span> <span class="br0">&#40;</span>check-sub <span class="br0">&#40;</span><span class="kw1">cdr</span> e<span class="br0">&#41;</span> chosen-digits<span class="br0">&#41;</span><span class="br0">&#41;</span> e<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>             <span class="br0">&#40;</span>check-sub <span class="br0">&#40;</span>sub allowed-digits<span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>typecase sub<br/>                 <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">member</span> <span class="kw1">nil</span><span class="sy0"> + </span>-<span class="sy0"> * </span>/<span class="br0">&#41;</span> allowed-digits<span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="kw1">integer</span><br/>                  <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">member</span> sub allowed-digits<span class="br0">&#41;</span><br/>                      <span class="br0">&#40;</span><span class="kw1">remove</span> sub allowed-digits <span class="sy0">:</span><span class="me1">count</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>                      <span class="br0">&#40;</span>lose<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><span class="kw1">cons</span> <span class="br0">&#40;</span>check-sub <span class="br0">&#40;</span><span class="kw1">car</span> sub<span class="br0">&#41;</span> <span class="br0">&#40;</span>check-sub <span class="br0">&#40;</span><span class="kw1">cdr</span> sub<span class="br0">&#41;</span> allowed-digits<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span>t <span class="br0">&#40;</span>lose<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>             <span class="br0">&#40;</span>win <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>format t <span class="st0">&quot;You win.~%&quot;</span><span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>return-from <span class="nu0">24</span>-game<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>      <span class="br0">&#40;</span>choose<span class="br0">&#41;</span><br/>      <span class="br0">&#40;</span>loop<br/>       <span class="br0">&#40;</span>handler-<span class="kw1">case</span><br/>           <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">=</span> <span class="nu0">24</span> <span class="br0">&#40;</span><span class="kw1">eval</span> <span class="br0">&#40;</span>check <span class="br0">&#40;</span>prompt<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>win<span class="br0">&#41;</span> <span class="br0">&#40;</span>lose<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>         <span class="br0">&#40;</span><span class="kw1">error</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>format t <span class="st0">&quot;Bad equation, try again.~%&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>         <span class="br0">&#40;</span>choose-digits <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>choose<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre>
<p><b>Verbose Implementation</b>
</p>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Clisp" title="Clisp" class="mw-redirect">clisp</a> version 2.47</div>
<pre class="lisp highlighted_source">&#160;<br/><span class="br0">&#40;</span>defconstant +ops+ '<span class="br0">&#40;</span>*<span class="sy0"> / </span>+ -<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> expr-numbers <span class="br0">&#40;</span>e <span class="sy0">&amp;</span>optional acc<span class="br0">&#41;</span><br/>  <span class="st0">&quot;Return all the numbers in argument positions in the expression.&quot;</span><br/>  <span class="br0">&#40;</span><span class="kw1">cond</span><br/>   <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">numberp</span> e<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">cons</span> e acc<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>   <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">consp</span> e<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span><span class="kw1">append</span> <span class="br0">&#40;</span><span class="kw1">apply</span> #'<span class="kw1">append</span><br/>                   <span class="br0">&#40;</span><span class="kw1">mapcar</span> #'expr-numbers <span class="br0">&#40;</span><span class="kw1">cdr</span> e<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>            acc<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> expr-well-formed-p <span class="br0">&#40;</span>e<span class="br0">&#41;</span><br/>  <span class="st0">&quot;Return non-nil if the given expression is well-formed.&quot;</span><br/>  <span class="br0">&#40;</span><span class="kw1">cond</span><br/>   <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">numberp</span> e<span class="br0">&#41;</span> t<span class="br0">&#41;</span><br/>   <span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw1">consp</span> e<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span><span class="kw1">and</span> <span class="br0">&#40;</span><span class="kw1">member</span> <span class="br0">&#40;</span><span class="kw1">car</span> e<span class="br0">&#41;</span> +ops+<span class="br0">&#41;</span><br/>         <span class="br0">&#40;</span>every #'expr-well-formed-p <span class="br0">&#40;</span><span class="kw1">cdr</span> e<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>   <span class="br0">&#40;</span>t <span class="kw1">nil</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> expr-valid-p <span class="br0">&#40;</span>e available-digits<span class="br0">&#41;</span><br/>  <span class="st0">&quot;Return non-nil if the expression is well-formed and uses exactly<br/>the digits specified.&quot;</span><br/>  <span class="br0">&#40;</span><span class="kw1">and</span> <span class="br0">&#40;</span>expr-well-formed-p e<span class="br0">&#41;</span><br/>       <span class="br0">&#40;</span>equalp <span class="br0">&#40;</span>sort <span class="br0">&#40;</span>copy-seq available-digits<span class="br0">&#41;</span> #'<span class="sy0">&lt;</span><span class="br0">&#41;</span><br/>               <span class="br0">&#40;</span>sort <span class="br0">&#40;</span>expr-numbers e<span class="br0">&#41;</span> #'<span class="sy0">&lt;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> expr-<span class="kw1">get</span> <span class="br0">&#40;</span><span class="sy0">&amp;</span>optional using<span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>emit <span class="st0">&quot;Enter lisp form~@[ using the digit~P ~{~D~^ ~}~]: &quot;</span><br/>        <span class="br0">&#40;</span><span class="kw1">when</span> using<br/>          <span class="br0">&#40;</span><span class="kw1">length</span> using<span class="br0">&#41;</span><span class="br0">&#41;</span> using<span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span><span class="kw1">let</span> <span class="br0">&#40;</span>*read-<span class="kw1">eval</span>*<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>read<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> digits <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>sort <span class="br0">&#40;</span>loop repeat <span class="nu0">4</span> collect <span class="br0">&#40;</span><span class="nu0">1</span>+ <span class="br0">&#40;</span><span class="kw1">random</span> <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> #'<span class="sy0">&lt;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> emit <span class="br0">&#40;</span>fmt <span class="sy0">&amp;</span>rest args<span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>format t <span class="st0">&quot;~&amp;~?&quot;</span> fmt args<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> prompt <span class="br0">&#40;</span>digits<span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>emit <span class="st0">&quot;Using only these operators:~%~%~<br/>           ~2T~{~A~^ ~}~%~%~<br/>         And exactly these numbers <span class="es0">\(</span>no repetition<span class="es0">\)</span>:~%~%~<br/>           ~2T~{~D~^ ~}~%~%~<br/>         ~A&quot;</span><br/>        +ops+ digits <span class="br0">&#40;</span>secondary-prompt<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> secondary-prompt <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>fill-to <span class="nu0">50</span> <span class="st0">&quot;Enter a lisp form which evaluates to ~<br/>               the integer 24, or <span class="es0">\&quot;</span>!<span class="es0">\&quot;</span> to get fresh ~<br/>               digits, or <span class="es0">\&quot;</span>q<span class="es0">\&quot;</span> to abort.&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> fill-to <span class="br0">&#40;</span>n fmt <span class="sy0">&amp;</span>rest args<span class="br0">&#41;</span><br/>  <span class="st0">&quot;Poor-man's text filling mechanism.&quot;</span><br/>  <span class="br0">&#40;</span>loop with s <span class="sy0">=</span> <span class="br0">&#40;</span>format <span class="kw1">nil</span> <span class="st0">&quot;~?&quot;</span> fmt args<span class="br0">&#41;</span><br/>        for c across s<br/>        <span class="kw1">and</span> i from <span class="nu0">0</span><br/>        <span class="kw1">and</span> j <span class="sy0">=</span> <span class="nu0">0</span> then <span class="br0">&#40;</span><span class="nu0">1</span>+ j<span class="br0">&#41;</span> <span class="co1">; since-last-newline ctr</span><br/>&#160;<br/>        <span class="kw1">when</span> <span class="br0">&#40;</span>char<span class="sy0">=</span> c #\Newline<span class="br0">&#41;</span><br/>        <span class="kw1">do</span> <span class="br0">&#40;</span><span class="kw1">setq</span> j <span class="nu0">0</span><span class="br0">&#41;</span><br/>&#160;<br/>        else <span class="kw1">when</span> <span class="br0">&#40;</span><span class="kw1">and</span> <span class="br0">&#40;</span><span class="kw1">not</span> <span class="br0">&#40;</span><span class="kw1">zerop</span> j<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                       <span class="br0">&#40;</span><span class="kw1">zerop</span> <span class="br0">&#40;</span>mod j n<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw1">do</span> <span class="br0">&#40;</span>loop for k from i below <span class="br0">&#40;</span><span class="kw1">length</span> s<span class="br0">&#41;</span><br/>                 <span class="kw1">when</span> <span class="br0">&#40;</span>char<span class="sy0">=</span> #\Space <span class="br0">&#40;</span>schar s k<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="kw1">do</span> <span class="br0">&#40;</span><span class="kw1">progn</span><br/>                      <span class="br0">&#40;</span><span class="kw1">setf</span> <span class="br0">&#40;</span>schar s k<span class="br0">&#41;</span> #\Newline<br/>                            j <span class="nu0">0</span><span class="br0">&#41;</span><br/>                      <span class="br0">&#40;</span>loop-finish<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        finally <span class="br0">&#40;</span><span class="kw1">return</span> s<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">defun</span> <span class="nu0">24</span>-game <span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="br0">&#40;</span>loop with playing-p <span class="sy0">=</span> t<br/>        <span class="kw1">and</span> initial-digits <span class="sy0">=</span> <span class="br0">&#40;</span>digits<span class="br0">&#41;</span><br/>&#160;<br/>        for attempts from <span class="nu0">0</span><br/>        <span class="kw1">and</span> digits <span class="sy0">=</span> initial-digits then <span class="br0">&#40;</span>digits<span class="br0">&#41;</span><br/>&#160;<br/>        while playing-p<br/>&#160;<br/>        <span class="kw1">do</span> <span class="br0">&#40;</span>loop for e <span class="sy0">=</span> <span class="br0">&#40;</span>expr-<span class="kw1">get</span> <span class="br0">&#40;</span>unless <span class="br0">&#40;</span><span class="kw1">zerop</span> attempts<span class="br0">&#41;</span><br/>                                     digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                 <span class="kw1">do</span><br/>                 <span class="br0">&#40;</span><span class="kw1">case</span> e<br/>                   <span class="br0">&#40;</span><span class="sy0">!</span> <span class="br0">&#40;</span>loop-finish<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                   <span class="br0">&#40;</span>Q <span class="br0">&#40;</span><span class="kw1">setq</span> playing-p <span class="kw1">nil</span><span class="br0">&#41;</span><br/>                      <span class="br0">&#40;</span>loop-finish<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                   <span class="br0">&#40;</span>R <span class="br0">&#40;</span>emit <span class="st0">&quot;Current digits: ~S&quot;</span> digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                   <span class="br0">&#40;</span>t<br/>                    <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span>expr-valid-p e digits<span class="br0">&#41;</span><br/>                        <span class="br0">&#40;</span><span class="kw1">let</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>v <span class="br0">&#40;</span><span class="kw1">eval</span> e<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                          <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">eql</span> v <span class="nu0">24</span><span class="br0">&#41;</span><br/>                              <span class="br0">&#40;</span><span class="kw1">progn</span><br/>                                <span class="br0">&#40;</span>emit <span class="st0">&quot;~%~%---&gt; A winner is you! &lt;---~%~%&quot;</span><span class="br0">&#41;</span><br/>                                <span class="br0">&#40;</span><span class="kw1">setq</span> playing-p <span class="kw1">nil</span><span class="br0">&#41;</span><br/>                                <span class="br0">&#40;</span>loop-finish<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                            <span class="br0">&#40;</span>emit <span class="st0">&quot;Sorry, the form you entered ~<br/>                                   computes to ~S, not 24.~%~%&quot;</span><br/>                                  v<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>                      <span class="br0">&#40;</span>emit <span class="st0">&quot;Sorry, the form you entered did not ~<br/>                             compute.~%~%&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        initially <span class="br0">&#40;</span>prompt initial-digits<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre>
<p>Example Usage:
</p>
<pre>CL-USER 97 &gt; (24-game)
Using only these operators:

  * / + -

And exactly these numbers (no repetition):

  3 7 7 9

Enter a lisp form which evaluates to the integer 24,
or &quot;!&quot; to get fresh digits, or &quot;q&quot; to abort.
Enter lisp form: (eval (read-from-string &quot;(/ 1 0)&quot;))
Sorry, the form you entered did not compute.

Enter lisp form:&#160;!
Enter lisp form using the digits 4 5 7 8:&#160;!
Enter lisp form using the digits 1 2 4 5: (* 4 (* 5 (- 2 1)))
Sorry, the form you entered computes to 20, not 24.

Enter lisp form using the digits 1 2 4 5: (* 4 (+ 5 (- 2 1)))


---&gt; A winner is you! &lt;---

NIL</pre>
<h2><span class="mw-headline" id="D"><a href="/wiki/Category:D" title="Category:D">D</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=17" title="Edit section: D">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">,</span> std.<span class="me1">random</span><span class="sy0">,</span> std.<span class="me1">math</span><span class="sy0">,</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">range</span><span class="sy0">,</span><br/>       std.<span class="me1">typetuple</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw4">void</span> op<span class="br0">&#40;</span><span class="kw4">char</span> c<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        <span class="kw1">if</span> <span class="br0">&#40;</span>stack.<span class="me1">length</span> <span class="sy0">&lt;</span> <span class="nu0">2</span><span class="br0">&#41;</span><br/>            <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">&#40;</span><span class="st0">&quot;Wrong expression.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>        stack<span class="br0">&#91;</span>$ <span class="sy0">-</span> <span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw2">mixin</span><span class="br0">&#40;</span><span class="st0">&quot;stack[$ - 2]&quot;</span> <span class="sy0">~</span> c <span class="sy0">~</span> <span class="st0">&quot;stack[$ - 1]&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>        stack.<span class="me1">popBack</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="kw4">const</span> problem <span class="sy0">=</span> iota<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>.<span class="me1">map</span><span class="sy0">!</span><span class="br0">&#40;</span>_ <span class="sy0">=&gt;</span> uniform<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">array</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    writeln<span class="br0">&#40;</span><span class="st0">&quot;Make 24 with the digits: &quot;</span><span class="sy0">,</span> problem<span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>    <span class="kw4">double</span><span class="br0">&#91;</span><span class="br0">&#93;</span> stack<span class="sy0">;</span><br/>    <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> digits<span class="sy0">;</span><br/>    <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">char</span> c<span class="sy0">;</span> readln<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw1">switch</span> <span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>            <span class="kw1">case</span> <span class="st0">' '</span><span class="sy0">,</span> <span class="st0">'<span class="es1">\t</span>'</span><span class="sy0">,</span> <span class="st0">'<span class="es1">\n</span>'</span><span class="sy0">:</span> <span class="kw1">break</span><span class="sy0">;</span><br/>            <span class="kw1">case</span> <span class="st0">'1'</span><span class="sy0">:</span> <span class="sy0">..</span> <span class="kw1">case</span> <span class="st0">'9'</span><span class="sy0">:</span><br/>                stack <span class="sy0">~=</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br/>                digits <span class="sy0">~=</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br/>                <span class="kw1">break</span><span class="sy0">;</span><br/>            <span class="kw1">foreach</span> <span class="br0">&#40;</span>o<span class="sy0">;</span> TypeTuple<span class="sy0">!</span><span class="br0">&#40;</span><span class="st0">'+'</span><span class="sy0">,</span> <span class="st0">'-'</span><span class="sy0">,</span> <span class="st0">'*'</span><span class="sy0">,</span> <span class="st0">'/'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>                <span class="kw1">case</span> o<span class="sy0">:</span> op<span class="sy0">!</span>o<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="kw1">break</span><span class="sy0">;</span><br/>            <span class="br0">&#125;</span><br/>            <span class="kw1">break</span><span class="sy0">;</span><br/>            <span class="kw2">default</span><span class="sy0">:</span> <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">&#40;</span><span class="st0">&quot;Wrong char: &quot;</span> <span class="sy0">~</span> c<span class="br0">&#41;</span><span class="sy0">;</span><br/>        <span class="br0">&#125;</span><br/>&#160;<br/>    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>digits.<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">equal</span><span class="br0">&#40;</span>problem.<span class="me1">dup</span>.<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>        <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">&#40;</span><span class="st0">&quot;Not using the given digits.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="kw1">if</span> <span class="br0">&#40;</span>stack.<span class="me1">length</span> <span class="sy0">!=</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>        <span class="kw2">throw</span> <span class="kw2">new</span> <span class="kw3">Exception</span><span class="br0">&#40;</span><span class="st0">&quot;Wrong expression.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    writeln<span class="br0">&#40;</span><span class="st0">&quot;Result: &quot;</span><span class="sy0">,</span> stack<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    writeln<span class="br0">&#40;</span>abs<span class="br0">&#40;</span>stack<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">-</span> <span class="nu0">24</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> <span class="nu16">0.001</span> <span class="sy0">?</span> <span class="st0">&quot;Good job!&quot;</span> <span class="sy0">:</span> <span class="st0">&quot;Try again.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<p>Example:
</p>
<pre>Make 24 with the digits: [1, 8, 9, 8]
8 1 - 9 + 8 +
Result: 24
Good job!</pre>
<h2><span class="mw-headline" id="EchoLisp"><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=18" title="Edit section: EchoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="scheme highlighted_source">&#160;<br/><span class="br0">&#40;</span>string<span class="sy0">-</span>delimiter <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br/><span class="co1">;; check that nums are in expr, and only once</span><br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>is<span class="sy0">-</span>valid? expr sorted: nums<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>when <span class="br0">&#40;</span><span class="kw1">equal?</span> 'q expr<span class="br0">&#41;</span> <span class="br0">&#40;</span>error <span class="st0">&quot;24-game&quot;</span> <span class="st0">&quot;Thx for playing&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>unless <span class="br0">&#40;</span><span class="kw1">and</span> <br/>        <span class="br0">&#40;</span><span class="kw1">list?</span> expr<span class="br0">&#41;</span> <br/>        <span class="br0">&#40;</span><span class="kw1">equal?</span> nums <span class="br0">&#40;</span>list<span class="sy0">-</span>sort <span class="sy0">&lt;</span> <span class="br0">&#40;</span>filter <span class="kw1">number?</span> <span class="br0">&#40;</span>flatten expr<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>writeln <span class="st0">&quot;🎃 Please use&quot;</span> nums<span class="br0">&#41;</span><br/>    #f<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">;; 4 random  digits</span><br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>gen24<span class="br0">&#41;</span><br/>     <span class="br0">&#40;</span><span class="sy0">-&gt;&gt;</span> <span class="br0">&#40;</span><span class="kw1">append</span> <span class="br0">&#40;</span>range <span class="nu0">1</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#40;</span>range <span class="nu0">1</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span> shuffle <span class="br0">&#40;</span>take <span class="nu0">4</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>list<span class="sy0">-</span>sort <span class="sy0">&lt;</span> <span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>is<span class="sy0">-</span><span class="nu0">24</span>? num<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>unless <span class="br0">&#40;</span><span class="sy0">=</span> <span class="nu0">24</span> num<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>writeln <span class="st0">&quot;😧 Sorry - Result = &quot;</span> num<span class="br0">&#41;</span><br/>    #f<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>check<span class="sy0">-</span><span class="nu0">24</span> expr<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span><span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">and</span> <br/>        <span class="br0">&#40;</span>is<span class="sy0">-</span>valid? expr nums<span class="br0">&#41;</span> <br/>        <span class="br0">&#40;</span>is<span class="sy0">-</span><span class="nu0">24</span>?  <span class="br0">&#40;</span>js<span class="sy0">-</span>eval <span class="br0">&#40;</span><span class="kw1">string</span> expr<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="co1">;; use js evaluator</span><br/>        <span class="st0">&quot;🍀 🌸 Congrats - (play24) for another one.&quot;</span><br/>        <span class="br0">&#40;</span>input<span class="sy0">-</span>expr check<span class="sy0">-</span><span class="nu0">24</span> <span class="br0">&#40;</span><span class="kw1">string</span> nums<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><span class="kw1">define</span> nums null<span class="br0">&#41;</span><br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>play24<span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span><span class="kw1">set!</span> nums <span class="br0">&#40;</span>gen24<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>writeln <span class="st0">&quot;24-game - Can you combine&quot;</span> nums <span class="st0">&quot;to get 24 ❓ (q to exit)&quot;</span><span class="br0">&#41;</span><br/>    <span class="br0">&#40;</span>input<span class="sy0">-</span>expr check<span class="sy0">-</span><span class="nu0">24</span> <span class="br0">&#40;</span><span class="kw1">string-append</span>  <span class="br0">&#40;</span><span class="kw1">string</span> nums<span class="br0">&#41;</span> <span class="st0">&quot; -&gt; 24 ❓&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
24-game - Can you combine     (2 5 6 7)     to get 24 ❓ (q to exit) 
difficult game
🎃 Please use     (2 5 6 7)    
12 * 2
🎃 Please use     (2 5 6 7)    
6 * (7 - 5 + 2)
🍀 🌸 Congrats - (play24) for another one.
    
(play24)
24-game - Can you combine     (3 5 8 9)     to get 24 ❓ (q to exit)    
3 + 5 + 8 * 9
😧 Sorry - Result =      80    
9 * 3 - (8 - 5)
🍀 🌸 Congrats - (play24) for another one.
    
(play24)
24-game - Can you combine     (1 8 8 9)     to get 24 ❓ (q to exit)    
9 + 8 + 8 - 1
🍀 🌸 Congrats - (play24) for another one.
</pre>
<h2><span class="mw-headline" id="Elena"><a href="/wiki/Category:Elena" title="Category:Elena">Elena</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=19" title="Edit section: Elena">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">#define system.<br/>#define system'routines.<br/>#define system'collections.<br/>#define system'dynamic.<br/>#define extensions.<br/>&#160;<br/>#class ExpressionTree<br/>{<br/>    #field theTree.<br/>&#160;<br/>    #constructor new&#160;: aLiteral<br/>    [<br/>        #var aLevel&#160;:= Integer new:0.<br/>&#160;<br/>        aLiteral run &amp;each: ch<br/>        [<br/>            #var node&#160;:= Dynamic new.<br/>&#160;<br/>            ch =&gt;<br/>                #43&#160;? [ node set &amp;level:(aLevel + 1) set &amp;operation:%add. ]       // +<br/>                #45&#160;? [ node set &amp;level:(aLevel + 1) set &amp;operation:%subtract. ]  // -<br/>                #42&#160;? [ node set &amp;level:(aLevel + 2) set &amp;operation:%multiply. ]  // *<br/>                #47&#160;? [ node set &amp;level:(aLevel + 2) set &amp;operation:%divide. ]    // /<br/>                #40&#160;? [ aLevel += 10. ^ $self. ] // (<br/>                #41&#160;? [ aLevel -= 10. ^ $self. ] // )<br/>               &#160;! [<br/>                    node set &amp;leaf:(ch literal toReal) set &amp;level:((aLevel + 3)).<br/>                ].<br/>&#160;<br/>            ($nil == theTree)<br/>               &#160;? [ theTree&#160;:= node. ]<br/>               &#160;! [<br/>                    (theTree level &gt;= node level)<br/>                       &#160;? [<br/>                            node set &amp;left:theTree set &amp;right:$nil.<br/>&#160;<br/>                            theTree&#160;:= node.<br/>                        ]<br/>                       &#160;! [<br/>                            #var aTop&#160;:= theTree.<br/>                            #loop (($nil&#160;!= aTop right)and:[aTop right level &lt; node level] )<br/>                               &#160;? [ aTop&#160;:= aTop right. ].<br/>&#160;<br/>                            node set &amp;left:(aTop right) set &amp;right:$nil.<br/>&#160;<br/>                            aTop set &amp;right:node.<br/>                        ].<br/>                ].<br/>        ].<br/>    ]<br/>&#160;<br/>    #method eval&#160;: aNode<br/>    [<br/>        (aNode if &amp;leaf)<br/>           &#160;? [ ^ aNode leaf. ]<br/>           &#160;! [<br/>                #var aLeft&#160;:= $self eval:(aNode left).<br/>                #var aRight&#160;:= $self eval:(aNode right).<br/>&#160;<br/>                ^ aLeft::(aNode operation) eval:aRight.<br/>            ]<br/>    ]<br/>&#160;<br/>    #method value<br/>        &lt;= eval:theTree.<br/>&#160;<br/>    #method readLeaves&#160;: aList &amp;at:aNode<br/>    [<br/>        ($nil == aNode)<br/>           &#160;? [ #throw InvalidArgumentException new. ].<br/>&#160;<br/>        (aNode if &amp;leaf)<br/>           &#160;? [ aList += aNode leaf. ]<br/>           &#160;! [<br/>                $self readLeaves:aList &amp;at:(aNode left).<br/>                $self readLeaves:aList &amp;at:(aNode right).<br/>            ].<br/>    ]        <br/>&#160;<br/>    #method readLeaves&#160;: aList<br/>        &lt;= readLeaves:aList &amp;at:theTree.<br/>}<br/>&#160;<br/>#class TwentyFourGame<br/>{<br/>    #field theNumbers.<br/>&#160;<br/>    #constructor new<br/>    [<br/>        $self newPuzzle.        <br/>    ]<br/>&#160;<br/>    #method newPuzzle<br/>    [<br/>        theNumbers&#160;:= (<br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9, <br/>            1 + randomGenerator eval:9).<br/>    ]<br/>&#160;<br/>    #method help<br/>    [<br/>        console <br/>            writeLine:&quot;------------------------------- Instructions ------------------------------&quot;<br/>            writeLine:&quot;Four digits will be displayed.&quot;<br/>            writeLine:&quot;Enter an equation using all of those four digits that evaluates to 24&quot;<br/>            writeLine:&quot;Only * / + - operators and () are allowed&quot;<br/>            writeLine:&quot;Digits can only be used once, but in any order you need.&quot;<br/>            writeLine:&quot;Digits cannot be combined - i.e.: 12 + 12 when given 1,2,2,1 is not allowed&quot;<br/>            writeLine:&quot;Submit a blank line to skip the current puzzle.&quot;<br/>            writeLine:&quot;Type 'q' to quit&quot;<br/>            writeLine<br/>            writeLine:&quot;Example: given 2 3 8 2, answer should resemble 8*3-(2-2)&quot;<br/>            writeLine:&quot;------------------------------- --------------------------------------------&quot;.<br/>    ]<br/>&#160;<br/>    #method prompt<br/>    [<br/>        theNumbers run &amp;each: n [ console writeLiteral:n:&quot; &quot;. ].<br/>&#160;<br/>        console write:&quot;: &quot;.<br/>    ]<br/>&#160;<br/>    #method resolve&#160;: aLine<br/>    [<br/>        #var exp&#160;:= ExpressionTree new:aLine.<br/>&#160;<br/>        #var Leaves&#160;:= ArrayList new.<br/>        exp readLeaves:Leaves.<br/>&#160;<br/>        (Leaves ascendant equal &amp;indexable:(theNumbers ascendant))<br/>           &#160;! [ console writeLine:&quot;Invalid input. Enter an equation using all of those four digits. Try again.&quot;. ^ $self. ].<br/>&#160;<br/>        #var aResult&#160;:= exp value.<br/>        (aResult == 24)<br/>           &#160;? [<br/>                console writeLine:&quot;Good work. &quot;:aLine:&quot;=&quot;:aResult.<br/>&#160;<br/>                $self newPuzzle.<br/>            ]<br/>           &#160;! [ console writeLine:&quot;Incorrect. &quot;:aLine:&quot;=&quot;:aResult. ].<br/>    ]    <br/>}<br/>&#160;<br/>#class(extension) gameOp<br/>{<br/>    #method playRound&#160;: aLine<br/>    [<br/>        (aLine == &quot;q&quot;)<br/>           &#160;? [ ^ false. ]<br/>           &#160;! [<br/>                (aLine == &quot;&quot;)<br/>                   &#160;? [ console writeLine:&quot;Skipping this puzzle&quot;. self newPuzzle. ]<br/>                   &#160;! [<br/>                        self resolve:aLine<br/>                            | if &amp;Error: e<br/>                                [<br/>                                    console writeLine:&quot;An error occurred.  Check your input and try again.&quot;.<br/>                                ].<br/>                    ].<br/>&#160;<br/>                ^ true.<br/>            ].<br/>    ]<br/>}<br/>&#160;<br/>#symbol program =<br/>[<br/>    #var aGame&#160;:= TwentyFourGame new help.<br/>&#160;<br/>    #loop (aGame prompt playRound:(console readLine))&#160;? [].<br/>].<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
------------------------------- Instructions ------------------------------
Four digits will be displayed.
Enter an equation using all of those four digits that evaluates to 24
Only * / + - operators and () are allowed
Digits can only be used once, but in any order you need.
Digits cannot be combined - i.e.: 12 + 12 when given 1,2,2,1 is not allowed
Submit a blank line to skip the current puzzle.
Type 'q' to quit

Example: given 2 3 8 2, answer should resemble 8*3-(2-2)
------------------------------- --------------------------------------------
7 6 9 6&#160;:
Skipping this puzzle
8 6 2 6&#160;: 6*6-8-2
Incorrect. 6*6-8-2=26.0
8 6 2 6&#160;:
Skipping this puzzle
5 2 7 7&#160;: 7+7+(5*2)
Good work. 7+7+(5*2)=24.0
</pre>
<h2><span class="mw-headline" id="Elixir"><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=20" title="Edit section: Elixir">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Erlang">Erlang</a></div>
<pre class="text highlighted_source">defmodule Game24 do<br/>  def main do<br/>    IO.puts &quot;24 Game&quot;<br/>    play<br/>  end<br/>&#160;<br/>  defp play do<br/>    IO.puts &quot;Generating 4 digits...&quot;<br/>    digts = for _ &lt;- 1..4, do: Enum.random(1..9)<br/>    IO.puts &quot;Your digits\t#{inspect digts, char_lists:&#160;:as_lists}&quot;<br/>    read_eval(digts)<br/>    play<br/>  end<br/>&#160;<br/>  defp read_eval(digits) do<br/>    exp = IO.gets(&quot;Your expression: &quot;) |&gt; String.strip<br/>    if exp in [&quot;&quot;,&quot;q&quot;], do: exit(:normal)        # give up<br/>    case {correct_nums(exp, digits), eval(exp)} do<br/>      {:ok, x} when x==24 -&gt; IO.puts &quot;You Win!&quot;<br/>      {:ok, x} -&gt; IO.puts &quot;You Lose with #{inspect x}!&quot;<br/>      {err, _} -&gt; IO.puts &quot;The following numbers are wrong: #{inspect err, char_lists:&#160;:as_lists}&quot;<br/>    end<br/>  end<br/>&#160;<br/>  defp correct_nums(exp, digits) do<br/>    nums = String.replace(exp, ~r/\D/, &quot; &quot;) |&gt; String.split |&gt; Enum.map(&amp;String.to_integer &amp;1)<br/>    if length(nums)==4 and (nums--digits)==[], do:&#160;:ok, else: nums<br/>  end<br/>&#160;<br/>  defp eval(exp) do<br/>    try do<br/>      Code.eval_string(exp) |&gt; elem(0)<br/>    rescue<br/>      e -&gt; Exception.message(e)<br/>    end<br/>  end<br/>end<br/>&#160;<br/>Game24.main</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
24 Game
Generating 4 digits...
Your digits     [9, 6, 7, 4]
Your expression: (9+7)*6/4
You Win!
Generating 4 digits...
Your digits     [3, 2, 2, 4]
Your expression: 3*(2+2+4)
You Win!</pre>
<h2><span class="mw-headline" id="Erlang"><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=21" title="Edit section: Erlang">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="erlang highlighted_source"><span class="sy3">-</span><span class="re2">module</span><span class="br0">&#40;</span>g24<span class="br0">&#41;</span><span class="sy1">.</span><br/><span class="sy3">-</span><span class="re2">export</span><span class="br0">&#40;</span><span class="br0">&#91;</span>main<span class="sy3">/</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">main</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <a href="http://erlang.org/doc/man/random.html"><span class="kw5">random</span></a>:<span class="re3">seed</span><span class="br0">&#40;</span><span class="kw3">now</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;24 Game~n&quot;</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">play</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">play</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;Generating 4 digits...~n&quot;</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re5">Digts</span> <span class="sy3">=</span> <span class="br0">&#91;</span><a href="http://erlang.org/doc/man/random.html"><span class="kw5">random</span></a>:<span class="re3">uniform</span><span class="br0">&#40;</span><span class="re5">X</span><span class="br0">&#41;</span> <span class="sy3">||</span> <span class="re5">X</span> <span class="sy3">&lt;-</span> <span class="br0">&#91;</span><span class="nu0">9</span><span class="sy1">,</span><span class="nu0">9</span><span class="sy1">,</span><span class="nu0">9</span><span class="sy1">,</span><span class="nu0">9</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="sy1">,</span><br/>    <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;Your digits<span class="es0">\t</span>~w~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="re5">Digts</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">read_eval</span><span class="br0">&#40;</span><span class="re5">Digts</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">play</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">read_eval</span><span class="br0">&#40;</span><span class="re5">Digits</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="re5">Exp</span> <span class="sy3">=</span> <a href="http://erlang.org/doc/man/string.html"><span class="kw5">string</span></a>:<span class="re3">strip</span><span class="br0">&#40;</span><a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="kw3">get</span>_<span class="re3">line</span><span class="br0">&#40;</span>standard_io<span class="sy1">,</span> <span class="st0">&quot;Your expression: &quot;</span><span class="br0">&#41;</span><span class="sy1">,</span> both<span class="sy1">,</span> $\n<span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="kw1">case</span> <span class="br0">&#123;</span><span class="re3">correct_nums</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Digits</span><span class="br0">&#41;</span><span class="sy1">,</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="br0">&#41;</span><span class="br0">&#125;</span> <span class="kw1">of</span><br/>        <span class="br0">&#123;</span>ok<span class="sy1">,</span> <span class="re5">X</span><span class="br0">&#125;</span> <span class="kw1">when</span> <span class="re5">X</span> <span class="sy3">==</span> <span class="nu0">24</span> <span class="sy1">-&gt;</span> <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;You Win!~n&quot;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>        <span class="br0">&#123;</span>ok<span class="sy1">,</span> <span class="re5">X</span><span class="br0">&#125;</span> <span class="sy1">-&gt;</span> <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;You Lose with ~p!~n&quot;</span><span class="sy1">,</span><span class="br0">&#91;</span><span class="re5">X</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>        <span class="br0">&#123;</span><span class="re5">List</span><span class="sy1">,</span> <span class="re5">_</span><span class="br0">&#125;</span> <span class="sy1">-&gt;</span> <a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">format</span><span class="br0">&#40;</span><span class="st0">&quot;The following numbers are wrong: ~p~n&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="re5">List</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br/>    <span class="kw1">end</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">correct_nums</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Digits</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="kw1">case</span> <a href="http://erlang.org/doc/man/re.html"><span class="kw5">re</span></a>:<span class="re3">run</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="st0">&quot;([0-9]+)&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span>global<span class="sy1">,</span> <span class="br0">&#123;</span>capture<span class="sy1">,</span> all_but_first<span class="sy1">,</span> <span class="kw4">list</span><span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">of</span><br/>        nomatch <span class="sy1">-&gt;</span><br/>            <span class="st0">&quot;No number entered&quot;</span><span class="sy1">;</span><br/>        <span class="br0">&#123;</span>match<span class="sy1">,</span> <span class="re5">IntLs</span><span class="br0">&#125;</span> <span class="sy1">-&gt;</span><br/>            <span class="kw1">case</span> <span class="br0">&#91;</span><span class="re5">X</span> <span class="sy3">||</span> <span class="br0">&#91;</span><span class="re5">X</span><span class="br0">&#93;</span> <span class="sy3">&lt;-</span> <span class="re5">IntLs</span><span class="sy1">,</span> <span class="kw2">not</span> <a href="http://erlang.org/doc/man/lists.html"><span class="kw5">lists</span></a>:<span class="re3">member</span><span class="br0">&#40;</span><span class="kw3">list_to_integer</span><span class="br0">&#40;</span><span class="re5">X</span><span class="br0">&#41;</span><span class="sy1">,</span> <span class="re5">Digits</span><span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="kw1">of</span><br/>                <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy1">-&gt;</span> <span class="me1">ok</span><span class="sy1">;</span><br/>                <span class="re5">L</span> <span class="sy1">-&gt;</span> <span class="re5">L</span><br/>            <span class="kw1">end</span><br/>    <span class="kw1">end</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">X</span><span class="sy1">,</span> <span class="re5">_</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><a href="http://erlang.org/doc/man/re.html"><span class="kw5">re</span></a>:<span class="re3">replace</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="st0">&quot;<span class="es0">\\</span>s&quot;</span><span class="sy1">,</span> <span class="st0">&quot;&quot;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="br0">&#123;</span>return<span class="sy1">,</span> <span class="kw4">list</span><span class="br0">&#125;</span><span class="sy1">,</span>global<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>                  <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re5">X</span><span class="sy1">.</span><br/>&#160;<br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">Val</span><span class="sy1">,</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#125;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="br0">&#40;</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewVal</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">NewVal</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="br0">&#41;</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">Val</span><span class="sy1">,</span> <span class="re5">Rest</span><span class="br0">&#125;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="br0">&#91;</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewVal</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">NewVal</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="br0">&#93;</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">Val</span><span class="sy1">,</span> <span class="re5">Rest</span><span class="br0">&#125;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="sy3">+</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewOperand</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Val</span> <span class="sy3">+</span> <span class="re5">NewOperand</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="sy3">-</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewOperand</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Val</span> <span class="sy3">-</span> <span class="re5">NewOperand</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="sy3">*</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewOperand</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Val</span> <span class="sy3">*</span> <span class="re5">NewOperand</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span>$<span class="sy3">/</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="re5">Val</span><span class="br0">&#41;</span> <span class="sy1">-&gt;</span><br/>    <span class="br0">&#123;</span><span class="re5">NewOperand</span><span class="sy1">,</span> <span class="re5">Exp</span><span class="br0">&#125;</span> <span class="sy3">=</span> <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy1">,</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Exp</span><span class="sy1">,</span> <span class="re5">Val</span> <span class="sy3">/</span> <span class="re5">NewOperand</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="re3">eval</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="re5">X</span>|Rest<span class="br0">&#93;</span><span class="sy1">,</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">when</span> <span class="re5">X</span> <span class="sy3">&gt;=</span> <span class="re6">$1</span><span class="sy1">,</span> <span class="re5">X</span> <span class="sy3">=&lt;</span> <span class="re6">$9</span> <span class="sy1">-&gt;</span><br/>    <span class="re3">eval</span><span class="br0">&#40;</span><span class="re5">Rest</span><span class="sy1">,</span> <span class="re5">X</span><span class="sy3">-</span><span class="re6">$0</span><span class="br0">&#41;</span><span class="sy1">.</span><br/>&#160;</pre>
<p>The evaluator uses a simple infix scheme that doesn't care about operator precedence, but does support brackets and parentheses alike. Thus, <code>((9+1)*2)+2+2</code> is evaluated as:
</p>
<pre>
9 + 1 = 10
10 * 2 = 20
2 + 2 = 4
20 + 4
</pre>
<p>Example:
</p>
<pre>1&gt; c(g24).    
{ok,g24}
2&gt; g24:main().
24 Game
Generating 4 digits...
Your digits     [7,4,6,8]
Your expression: 6*4
You Win!
Generating 4 digits...
Your digits     [4,1,5,8]
Your expression: 6*4
The following numbers are wrong: [&quot;6&quot;]
Generating 4 digits...
Your digits     [8,5,8,2]
Your expression: 2*([8/5]*2)
You Lose with 6.4!
Generating 4 digits...
Your digits     [7,4,8,1]</pre>
<h2><span class="mw-headline" id="F.23"><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=22" title="Edit section: F#">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="fsharp highlighted_source"><span class="kw1">open</span> System<br/><span class="kw1">open</span> System.<span class="me1">Text</span>.<span class="me1">RegularExpressions</span><br/>&#160;<br/><span class="co1">// Some utilities</span><br/><span class="kw1">let</span> <span class="br0">&#40;</span>|Parse|_|<span class="br0">&#41;</span> regex str <span class="sy0">=</span><br/>   <span class="kw1">let</span> m <span class="sy0">=</span> Regex<span class="br0">&#40;</span>regex<span class="br0">&#41;</span>.<span class="me1">Match</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><br/>   <span class="kw1">if</span> m.<span class="me1">Success</span> <span class="kw1">then</span> Some <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">for</span> g <span class="kw1">in</span> m.<span class="me1">Groups</span> <span class="sy0">-&gt;</span> g.<span class="me1">Value</span><span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="kw1">else</span> None<br/><span class="kw1">let</span> <span class="kw1">rec</span> gcd x y <span class="sy0">=</span> <span class="kw1">if</span> x <span class="sy0">=</span> y || x <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">then</span> y <span class="kw1">else</span> <span class="kw1">if</span> x <span class="sy0">&lt;</span> y <span class="kw1">then</span> gcd y x <span class="kw1">else</span> gcd y <span class="br0">&#40;</span>x<span class="sy0">-</span>y<span class="br0">&#41;</span><br/><span class="kw1">let</span> <span class="kw3">abs</span> <span class="br0">&#40;</span>x&#160;: <span class="kw4">int</span><span class="br0">&#41;</span> <span class="sy0">=</span> Math.<span class="me1">Abs</span> x<br/><span class="kw1">let</span> <span class="kw3">sign</span> <span class="br0">&#40;</span>x: <span class="kw4">int</span><span class="br0">&#41;</span> <span class="sy0">=</span> Math.<span class="me1">Sign</span> x<br/><span class="kw1">let</span> cint s <span class="sy0">=</span> Int32.<span class="me1">Parse</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><br/><span class="kw1">let</span> replace m <span class="br0">&#40;</span>s&#160;: <span class="kw4">string</span><span class="br0">&#41;</span> t <span class="sy0">=</span> Regex.<span class="me1">Replace</span><span class="br0">&#40;</span>t, m, s<span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">// computing in Rationals</span><br/><span class="kw1">type</span> Rat<span class="br0">&#40;</span>x&#160;: <span class="kw4">int</span>, y&#160;: <span class="kw4">int</span><span class="br0">&#41;</span> <span class="sy0">=</span><br/>    <span class="kw1">let</span> g <span class="sy0">=</span> <span class="kw1">if</span> y <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span> gcd <span class="br0">&#40;</span><span class="kw3">abs</span> x<span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw3">abs</span> y<span class="br0">&#41;</span> <span class="kw1">else</span> <span class="kw5">raise</span> <span class="sy0">&lt;|</span> DivideByZeroException<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>    <span class="kw1">member</span> this.<span class="me1">n</span> <span class="sy0">=</span> <span class="kw3">sign</span> y <span class="sy0">*</span> x <span class="sy0">/</span> g   <span class="co1">// store a minus sign in the numerator</span><br/>    <span class="kw1">member</span> this.<span class="me1">d</span> <span class="sy0">=</span><br/>        <span class="kw1">if</span> y <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span> <span class="kw3">sign</span> y <span class="sy0">*</span> y <span class="sy0">/</span> g <span class="kw1">else</span> <span class="kw5">raise</span> <span class="sy0">&lt;|</span> DivideByZeroException<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>    <span class="kw1">static</span> <span class="kw1">member</span> <span class="br0">&#40;</span><span class="sy0">~-</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>x&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> Rat<span class="br0">&#40;</span><span class="sy0">-</span>x.<span class="me1">n</span>, x.<span class="me1">d</span><span class="br0">&#41;</span><br/>    <span class="kw1">static</span> <span class="kw1">member</span> <span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>x&#160;: Rat, y&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> Rat<span class="br0">&#40;</span>x.<span class="me1">n</span> <span class="sy0">*</span> y.<span class="me1">d</span> <span class="sy0">+</span> y.<span class="me1">n</span> <span class="sy0">*</span> x.<span class="me1">d</span>, x.<span class="me1">d</span> <span class="sy0">*</span> y.<span class="me1">d</span><span class="br0">&#41;</span><br/>    <span class="kw1">static</span> <span class="kw1">member</span> <span class="br0">&#40;</span><span class="sy0">-</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>x&#160;: Rat, y&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> x <span class="sy0">+</span> Rat<span class="br0">&#40;</span><span class="sy0">-</span>y.<span class="me1">n</span>, y.<span class="me1">d</span><span class="br0">&#41;</span><br/>    <span class="kw1">static</span> <span class="kw1">member</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>x&#160;: Rat, y&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> Rat<span class="br0">&#40;</span>x.<span class="me1">n</span> <span class="sy0">*</span> y.<span class="me1">n</span>, x.<span class="me1">d</span> <span class="sy0">*</span> y.<span class="me1">d</span><span class="br0">&#41;</span><br/>    <span class="kw1">static</span> <span class="kw1">member</span> <span class="br0">&#40;</span><span class="sy0">/</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>x&#160;: Rat, y&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> x <span class="sy0">*</span> Rat<span class="br0">&#40;</span>y.<span class="me1">d</span>, y.<span class="me1">n</span><span class="br0">&#41;</span><br/>    <span class="kw1">override</span> this.<span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> sprintf <span class="st_h">@&quot;&lt;%d,%d&gt;&quot;</span> this.<span class="me1">n</span> this.<span class="me1">d</span><br/>    <span class="kw1">new</span><span class="br0">&#40;</span>x&#160;: <span class="kw4">string</span>, y&#160;: <span class="kw4">string</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">if</span> y <span class="sy0">=</span> <span class="st0">&quot;&quot;</span> <span class="kw1">then</span> Rat<span class="br0">&#40;</span>cint x, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">else</span> Rat<span class="br0">&#40;</span>cint x, cint y<span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">// Due to the constraints imposed by the game (reduced set</span><br/><span class="co1">// of operators, all left associativ) we can get away with a repeated reduction</span><br/><span class="co1">// to evaluate the algebraic expression.</span><br/><span class="kw1">let</span> <span class="kw1">rec</span> reduce <span class="br0">&#40;</span>str&#160;:<span class="kw4">string</span><span class="br0">&#41;</span> <span class="sy0">=</span><br/>    <span class="kw1">let</span> eval <span class="br0">&#40;</span>x&#160;: Rat<span class="br0">&#41;</span> <span class="br0">&#40;</span>y&#160;: Rat<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw1">function</span><br/>    | <span class="st0">&quot;*&quot;</span> <span class="sy0">-&gt;</span> x <span class="sy0">*</span> y | <span class="st0">&quot;/&quot;</span> <span class="sy0">-&gt;</span> x <span class="sy0">/</span> y | <span class="st0">&quot;+&quot;</span> <span class="sy0">-&gt;</span> x <span class="sy0">+</span> y | <span class="st0">&quot;-&quot;</span> <span class="sy0">-&gt;</span> x <span class="sy0">-</span> y | _ <span class="sy0">-&gt;</span> <span class="kw5">failwith</span> <span class="st0">&quot;unknown op&quot;</span><br/>    <span class="kw1">let</span> subst s r <span class="sy0">=</span> str.<span class="me1">Replace</span><span class="br0">&#40;</span>s, r.<span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="kw1">let</span> rstr <span class="sy0">=</span><br/>        <span class="kw1">match</span> str <span class="kw1">with</span><br/>        | Parse <span class="st_h">@&quot;\(&lt;(-?\d+),(\d+)&gt;([*/+-])&lt;(-?\d+),(\d+)&gt;\)&quot;</span> <span class="br0">&#91;</span>matched<span class="sy0">;</span> xn<span class="sy0">;</span> xd<span class="sy0">;</span> op<span class="sy0">;</span> yn<span class="sy0">;</span> yd<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <br/>            subst matched <span class="sy0">&lt;|</span> eval <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>xn,xd<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>yn,yd<span class="br0">&#41;</span><span class="br0">&#41;</span> op<br/>        | Parse <span class="st_h">@&quot;&lt;(-?\d+),(\d+)&gt;([*/])&lt;(-?\d+),(\d+)&gt;&quot;</span> <span class="br0">&#91;</span>matched<span class="sy0">;</span> xn<span class="sy0">;</span> xd<span class="sy0">;</span> op<span class="sy0">;</span> yn<span class="sy0">;</span> yd<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <br/>            subst matched <span class="sy0">&lt;|</span> eval <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>xn,xd<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>yn,yd<span class="br0">&#41;</span><span class="br0">&#41;</span> op<br/>        | Parse <span class="st_h">@&quot;&lt;(-?\d+),(\d+)&gt;([+-])&lt;(-?\d+),(\d+)&gt;&quot;</span> <span class="br0">&#91;</span>matched<span class="sy0">;</span> xn<span class="sy0">;</span> xd<span class="sy0">;</span> op<span class="sy0">;</span> yn<span class="sy0">;</span> yd<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <br/>            subst matched <span class="sy0">&lt;|</span> eval <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>xn,xd<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>Rat<span class="br0">&#40;</span>yn,yd<span class="br0">&#41;</span><span class="br0">&#41;</span> op<br/>        | Parse <span class="st_h">@&quot;\(&lt;(-?\d+),(\d+)&gt;\)&quot;</span> <span class="br0">&#91;</span>matched<span class="sy0">;</span> xn<span class="sy0">;</span> xd<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <br/>            subst matched <span class="sy0">&lt;|</span> Rat<span class="br0">&#40;</span>xn,xd<span class="br0">&#41;</span><br/>        | Parse <span class="st_h">@&quot;(?&lt;!&gt;)-&lt;(-?\d+),(\d+)&gt;&quot;</span> <span class="br0">&#91;</span>matched<span class="sy0">;</span> xn<span class="sy0">;</span> xd<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <br/>            subst matched <span class="sy0">&lt;|</span> <span class="sy0">-</span>Rat<span class="br0">&#40;</span>xn,xd<span class="br0">&#41;</span><br/>        | _ <span class="sy0">-&gt;</span> str<br/>    <span class="kw1">if</span> str <span class="sy0">=</span> rstr <span class="kw1">then</span> str <span class="kw1">else</span> reduce rstr<br/>&#160;<br/><span class="kw1">let</span> gameLoop<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span><br/>    <span class="kw1">let</span> checkInput dddd input <span class="sy0">=</span><br/>        <span class="kw1">match</span> input <span class="kw1">with</span><br/>        | <span class="st0">&quot;n&quot;</span> | <span class="st0">&quot;q&quot;</span> <span class="sy0">-&gt;</span> Some<span class="br0">&#40;</span>input<span class="br0">&#41;</span><br/>        | Parse <span class="st_h">@&quot;[^1-9()*/+-]&quot;</span> <span class="br0">&#91;</span>c<span class="br0">&#93;</span> <span class="sy0">-&gt;</span><br/>            printfn <span class="st0">&quot;You used an illegal character in your expression:&#160;%s&quot;</span> c<br/>            None<br/>        | Parse <span class="st_h">@&quot;^\D*(\d)\D+(\d)\D+(\d)\D+(\d)(?:\D*(\d))*\D*$&quot;</span> <span class="br0">&#91;</span>m<span class="sy0">;</span> d1<span class="sy0">;</span> d2<span class="sy0">;</span> d3<span class="sy0">;</span> d4<span class="sy0">;</span> d5<span class="br0">&#93;</span> <span class="sy0">-&gt;</span><br/>            <span class="kw1">if</span> d5 <span class="sy0">=</span> <span class="st0">&quot;&quot;</span> &amp;&amp; <span class="br0">&#40;</span><a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">String</span></a>.<span class="me1">Join</span><span class="br0">&#40;</span><span class="st0">&quot; &quot;</span>, <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Array</span></a>.<span class="me1">sort</span> <span class="br0">&#91;</span>|d1<span class="sy0">;</span>d2<span class="sy0">;</span>d3<span class="sy0">;</span>d4|<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> dddd <span class="kw1">then</span> Some<span class="br0">&#40;</span>input<span class="br0">&#41;</span><br/>            <span class="kw1">elif</span> d5 <span class="sy0">=</span> <span class="st0">&quot;&quot;</span> <span class="kw1">then</span><br/>                printfn <span class="st0">&quot;Use this 4 digits with operators in between:&#160;%s.&quot;</span> dddd<br/>                None<br/>            <span class="kw1">else</span> <br/>                printfn <span class="st0">&quot;Use only this 4 digits with operators in between:&#160;%s.&quot;</span> dddd<br/>                None<br/>        | _ <span class="sy0">-&gt;</span><br/>            printfn <span class="st0">&quot;Use all 4 digits with operators in between:&#160;%s.&quot;</span> dddd<br/>            None<br/>&#160;<br/>    <span class="kw1">let</span> <span class="kw1">rec</span> userLoop dddd  <span class="sy0">=</span><br/>        <span class="kw1">let</span> tryAgain msg <span class="sy0">=</span><br/>            printfn <span class="st0">&quot;%s&quot;</span> msg<br/>            userLoop dddd<br/>        printf <span class="st0">&quot;[Expr|n|q]: &quot;</span><br/>        <span class="kw1">match</span> Console.<span class="me1">ReadLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">|&gt;</span> replace <span class="st_h">@&quot;\s&quot;</span> <span class="st0">&quot;&quot;</span> <span class="sy0">|&gt;</span> checkInput dddd <span class="kw1">with</span><br/>        | Some<span class="br0">&#40;</span>input<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <br/>            <span class="kw1">let</span> data <span class="sy0">=</span> input <span class="sy0">|&gt;</span> replace <span class="st_h">@&quot;((?&lt;!\d)-)?\d+&quot;</span> <span class="st_h">@&quot;&lt;$&amp;,1&gt;&quot;</span><br/>            <span class="kw1">match</span> data <span class="kw1">with</span><br/>            | <span class="st0">&quot;n&quot;</span> <span class="sy0">-&gt;</span> <span class="kw1">true</span> | <span class="st0">&quot;q&quot;</span> <span class="sy0">-&gt;</span> <span class="kw1">false</span><br/>            | _ <span class="sy0">-&gt;</span><br/>                <span class="kw1">try</span><br/>                    <span class="kw1">match</span> reduce data <span class="kw1">with</span><br/>                    | Parse <span class="st_h">@&quot;^&lt;(-?\d+),(\d+)&gt;$&quot;</span> <span class="br0">&#91;</span>_<span class="sy0">;</span> x<span class="sy0">;</span> y<span class="br0">&#93;</span> <span class="sy0">-&gt;</span><br/>                        <span class="kw1">let</span> n, d <span class="sy0">=</span> <span class="br0">&#40;</span>cint x<span class="br0">&#41;</span>, <span class="br0">&#40;</span>cint y<span class="br0">&#41;</span><br/>                        <span class="kw1">if</span> n <span class="sy0">=</span> <span class="nu0">24</span> <span class="kw1">then</span><br/>                            printfn <span class="st0">&quot;Correct!&quot;</span><br/>                            <span class="kw1">true</span><br/>                        <span class="kw1">elif</span> d<span class="sy0">=</span><span class="nu0">1</span> <span class="kw1">then</span> tryAgain <span class="sy0">&lt;|</span> sprintf <span class="st0">&quot;Wrong! Value =&#160;%d.&quot;</span> n<br/>                        <span class="kw1">else</span> tryAgain <span class="sy0">&lt;|</span> sprintf <span class="st0">&quot;Wrong! Value =&#160;%d/%d.&quot;</span> n d<br/>                    | _ <span class="sy0">-&gt;</span> tryAgain <span class="st0">&quot;Wrong! not a well-formed expression!&quot;</span><br/>                <span class="kw1">with</span><br/>                    |&#160;:? System.<span class="me1">DivideByZeroException</span> <span class="sy0">-&gt;</span><br/>                        tryAgain <span class="st0">&quot;Wrong! Your expression results in a division by zero!&quot;</span><br/>                    | ex <span class="sy0">-&gt;</span><br/>                        tryAgain <span class="sy0">&lt;|</span> sprintf <span class="st0">&quot;There is an unforeseen problem with yout input:&#160;%s&quot;</span> ex.<span class="me1">Message</span><br/>        | None <span class="sy0">-&gt;</span> userLoop dddd<br/>&#160;<br/>    <span class="kw1">let</span> random <span class="sy0">=</span> <span class="kw1">new</span> Random<span class="br0">&#40;</span>DateTime.<span class="me1">Now</span>.<span class="me1">Millisecond</span><span class="br0">&#41;</span><br/>    <span class="kw1">let</span> <span class="kw1">rec</span> loop<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span><br/>        <span class="kw1">let</span> dddd <span class="sy0">=</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">String</span></a>.<span class="me1">Join</span><span class="br0">&#40;</span><span class="st0">&quot; &quot;</span>, <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Array</span></a>.<span class="me1">init</span> <span class="nu0">4</span> <span class="br0">&#40;</span><span class="kw1">fun</span> _ <span class="sy0">-&gt;</span> <span class="nu0">1</span> <span class="sy0">+</span> random.<span class="me1">Next</span> <span class="nu0">9</span><span class="br0">&#41;</span> <span class="sy0">|&gt;</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Array</span></a>.<span class="me1">sort</span><span class="br0">&#41;</span><br/>        printfn <span class="st0">&quot;<span class="es0">\n</span>Compute 24 from the following 4 numbers:&#160;%s&quot;</span> dddd<br/>        printfn <span class="st0">&quot;Use them in any order with * / + - and parentheses; n = new numbers; q = quit&quot;</span><br/>        <span class="kw1">if</span> userLoop dddd <span class="kw1">then</span> loop<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>&#160;<br/>    loop<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>&#160;<br/>gameLoop<span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Compute 24 from the following 4 numbers: 3 3 3 5
Use them in any order with * / + - and parentheses; n = new numbers; q = quit
[Expr|n|q]: n

Compute 24 from the following 4 numbers: 3 5 6 7
Use them in any order with * / + - and parentheses; n = new numbers; q = quit
[Expr|n|q]: (7 + 5) + 6/3
Wrong! Value = 14.
[Expr|n|q]: (7 + 5) * 6/3
Correct!

Compute 24 from the following 4 numbers: 3 3 4 5
Use them in any order with * / + - and parentheses; n = new numbers; q = quit
[Expr|n|q]: q
</pre>
<h2><span class="mw-headline" id="Factor"><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=23" title="Edit section: Factor">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">USING:<br/>    combinators.short-circuit<br/>    continuations<br/>    eval<br/>    formatting<br/>    fry<br/>    kernel<br/>    io<br/>    math math.ranges<br/>    prettyprint<br/>    random<br/>    sequences<br/>    sets&#160;;<br/>IN: 24game<br/>&#160;<br/>: choose4 ( -- seq )<br/>    4 [ 9 [1,b] random ] replicate&#160;;<br/>&#160;<br/>: step ( numbers --&#160;? )<br/>    readln<br/>    [<br/>        parse-string<br/>        {<br/>           &#160;! Is only allowed tokens used?<br/>            [ swap { + - / * } append subset? ]<br/>           &#160;! Digit count in expression should be equal to the given numbers.<br/>            [ [ number? ] count swap length = ]<br/>           &#160;! Of course it must evaluate to 24<br/>            [ nip call( -- x ) 24 = ]<br/>        } 2&amp;&amp;<br/>        [ f &quot;You got it!&quot; ]<br/>        [ t &quot;Expression isnt valid, or doesnt evaluate to 24.&quot; ]<br />        if<br />    ]<br />    [ 3drop f &quot;Could not parse that.&quot; ]<br />    recover print flush&#160;;<br />&#160;<br />: main ( -- )<br />    choose4<br />    [ &quot;Your numbers are&#160;%[%s,&#160;%], make an expression\n&quot; printf flush ]<br />    [ '[ _ step ] loop ]<br />    bi&#160;;<br />&#160;</pre>
<p>Sample:
</p>
<pre class="text highlighted_source">&#160;<br />IN: scratchpad main<br />Your numbers are { 4, 1, 8, 2 }, make an expression<br />8 4 + 2 * 1 /<br />You got it!<br />&#160;</pre>
<h2><span class="mw-headline" id="Falcon"><a href="/wiki/Category:Falcon" title="Category:Falcon">Falcon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=24" title="Edit section: Falcon">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="falcon highlighted_source"><span class="kw4">load</span> compiler<br />&#160;<br /><span class="kw1">function</span> genRandomNumbers<span class="br0">&#40;</span> amount <span class="br0">&#41;</span><br />  rtn <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><br />  <span class="kw1">for</span> i <span class="kw3">in</span> <span class="br0">&#91;</span> <span class="nu0">0</span> <span class="sy0">:</span> amount <span class="br0">&#93;</span><span class="sy0">:</span> rtn <span class="sy0">+=</span> <a href="http://falconpl.org/project_docs/core/functions.html#random"><span class="kw6">random</span></a><span class="br0">&#40;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">9</span> <span class="br0">&#41;</span><br />  <span class="kw1">return</span><span class="br0">&#40;</span> rtn <span class="br0">&#41;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">function</span> getAnswer<span class="br0">&#40;</span> <a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a> <span class="br0">&#41;</span><br />  ic <span class="sy0">=</span> ICompiler<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  ic.<span class="me0">compileAll</span><span class="br0">&#40;</span><a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a><span class="br0">&#41;</span><br />&#160;<br />  <span class="kw1">return</span><span class="br0">&#40;</span> ic.<span class="me0">result</span> <span class="br0">&#41;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">function</span> validInput<span class="br0">&#40;</span> str <span class="br0">&#41;</span><br />  <span class="kw1">for</span> i <span class="kw3">in</span> <span class="br0">&#91;</span> <span class="nu0">0</span> <span class="sy0">:</span> str.<a href="http://falconpl.org/project_docs/core/functions.html#len"><span class="kw6">len</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#93;</span><br />    <span class="kw1">if</span> str<span class="br0">&#91;</span><span class="re0">i</span><span class="br0">&#93;</span> <span class="kw3">notin</span> <span class="st0">' ()[]0123456789-+/*'</span><br />      <span class="sy0">&gt;</span> <span class="st0">'INVALID Character = '</span><span class="sy0">,</span> str<span class="br0">&#91;</span><span class="re0">i</span><span class="br0">&#93;</span><br />      <span class="kw1">return</span><span class="br0">&#40;</span> <span class="kw2">false</span> <span class="br0">&#41;</span><br />    <span class="kw1">end</span><br />  <span class="kw1">end</span><br />&#160;<br />  <span class="kw1">return</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><br /><span class="kw1">end</span><br />&#160;<br /><a href="http://falconpl.org/project_docs/core/functions.html#printl"><span class="kw6">printl</span></a><span class="br0">&#40;</span><span class="st0">'<br />The 24 Game<br />&#160;<br />Given any four digits in the range 1 to 9, which may have repetitions,<br />Using just the +, -, *, and / operators; and the possible use of<br />brackets, (), show how to make an answer of 24.<br />&#160;<br />An answer of &quot;q&quot; will quit the game.<br />An answer of &quot;!&quot; will generate a new set of four digits.<br />Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />&#160;<br />Note: you cannot form multiple digit numbers from the supplied digits,<br />so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />'</span><span class="br0">&#41;</span><br />&#160;<br />num <span class="sy0">=</span> genRandomNumbers<span class="br0">&#40;</span> <span class="nu0">4</span> <span class="br0">&#41;</span><br />&#160;<br /><span class="kw1">while</span><span class="br0">&#40;</span> <span class="kw2">true</span> <span class="br0">&#41;</span><br />&#160;<br />  <span class="sy0">&gt;&gt;</span>  <span class="st0">&quot;Here are the numbers to choose from: &quot;</span><br />  <a href="http://falconpl.org/project_docs/core/functions.html#map"><span class="kw6">map</span></a><span class="br0">&#40;</span><span class="br0">&#123;</span> a <span class="sy0">=&gt;</span> <a href="http://falconpl.org/project_docs/core/functions.html#print"><span class="kw6">print</span></a><span class="br0">&#40;</span>a<span class="sy0">,</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="sy0">,</span> num<span class="br0">&#41;</span><br />  <span class="sy0">&gt;</span><br />&#160;<br />  <a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a> <span class="sy0">=</span> <a href="http://falconpl.org/project_docs/core/functions.html#input"><span class="kw6">input</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><br />&#160;<br />  <span class="kw1">switch</span> <a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a><br />    <span class="kw1">case</span> <span class="st0">&quot;q&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Q&quot;</span><br />      <a href="http://falconpl.org/project_docs/core/functions.html#exit"><span class="kw6">exit</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><br />&#160;<br />    <span class="kw1">case</span> <span class="st0">&quot;!&quot;</span><br />      <span class="sy0">&gt;</span> <span class="st0">'Generating new numbers list'</span><br />      num <span class="sy0">=</span> genRandomNumbers<span class="br0">&#40;</span> <span class="nu0">4</span> <span class="br0">&#41;</span><br />&#160;<br />    <span class="kw1">default</span><br />      <span class="kw1">if</span> <span class="kw3">not</span> validInput<span class="br0">&#40;</span> <a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a> <span class="br0">&#41;</span><span class="sy0">:</span> <span class="kw1">continue</span><br />&#160;<br />      answer <span class="sy0">=</span> getAnswer<span class="br0">&#40;</span> <a href="http://falconpl.org/project_docs/core/functions.html#exp"><span class="kw6">exp</span></a> <span class="br0">&#41;</span><br />&#160;<br />      <span class="kw1">if</span> answer <span class="sy0">==</span> <span class="nu0">24</span><br />        <span class="sy0">&gt;</span> <span class="st0">&quot;By George you GOT IT! Your expression equals 24&quot;</span><br />      <span class="kw1">else</span><br />        <span class="sy0">&gt;</span> <span class="st0">&quot;Ahh Sorry, So Sorry your answer of &quot;</span><span class="sy0">,</span> answer<span class="sy0">,</span> <span class="st0">&quot; does not equal 24.&quot;</span><br />      <span class="kw1">end</span><br />  <span class="kw1">end</span><br /><span class="kw1">end</span></pre>
<h2><span class="mw-headline" id="Fortran"><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=25" title="Edit section: Fortran">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Clever_implementation">Clever implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=26" title="Edit section: Clever implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Indicate operator precedence by parentheses; e.g. (3+(5*6))-9. No whitespace is admissible.
The program uses <a href="/wiki/Insertion_sort#Fortran" title="Insertion sort" class="mw-redirect">Insertion_sort in Fortran</a>.
</p>
<pre class="fortran highlighted_source"><span class="kw1">program</span> game_24<br />  <span class="kw3">implicit</span> <span class="kw3">none</span><br />  <span class="kw3">real</span>               <span class="sy0">::</span> <span class="me2">vector</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, reals<span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>, <span class="kw3">result</span>, a, b, c, d<br />  <span class="kw3">integer</span>            <span class="sy0">::</span> <span class="me2">numbers</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, ascii<span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>, i<br />  <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">11</span><span class="br0">&#41;</span>  <span class="sy0">::</span> <span class="me2">expression</span><br />  <span class="kw3">character</span>          <span class="sy0">::</span> <span class="me2">syntax</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span><br />  <span class="co1">! patterns:</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">one</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>   <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="st0">'('</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">two</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>   <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">')'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">three</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'('</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">four</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>  <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">')'</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">five</span><span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span>  <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span>,<span class="st0">'x'</span>,<span class="st0">'('</span>,<span class="st0">'1'</span>,<span class="st0">'x'</span>,<span class="st0">'1'</span>,<span class="st0">')'</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />&#160;<br />  <span class="kw1">do</span><br />    <span class="kw1">call</span> <span class="kw4">random_number</span><span class="br0">&#40;</span>vector<span class="br0">&#41;</span><br />    numbers <span class="sy0">=</span> <span class="nu0">9</span> <span class="sy0">*</span> vector <span class="sy0">+</span> <span class="nu0">1</span><br />    write <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">&#41;</span> <span class="st0">'Digits: '</span>,numbers<br />    write <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="st0">'(a)'</span>,<span class="kw1">advance</span><span class="sy0">=</span><span class="st0">'no'</span><span class="br0">&#41;</span> <span class="st0">'Your expression: '</span><br />    read <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="st0">'(a11)'</span><span class="br0">&#41;</span> expression<br />&#160;<br />    forall <span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">:</span><span class="nu0">11</span><span class="br0">&#41;</span> syntax<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> expression<span class="br0">&#40;</span>i<span class="sy0">:</span>i<span class="br0">&#41;</span><br />    ascii <span class="sy0">=</span> <span class="kw4">iachar</span><span class="br0">&#40;</span>syntax<span class="br0">&#41;</span><br />    <span class="kw1">where</span> <span class="br0">&#40;</span>syntax &gt;<span class="sy0">=</span> <span class="st0">'0'</span> <span class="kw2">.<span class="me1">and</span>.</span> syntax &lt;<span class="sy0">=</span> <span class="st0">'9'</span><span class="br0">&#41;</span><br />      syntax <span class="sy0">=</span> <span class="st0">'1'</span>  <span class="co1">! number</span><br />    <span class="kw1">elsewhere</span> <span class="br0">&#40;</span>syntax <span class="sy0">==</span> <span class="st0">'+'</span> <span class="kw2">.<span class="me1">or</span>.</span> syntax <span class="sy0">==</span> <span class="st0">'-'</span> <span class="kw2">.<span class="me1">or</span>.</span> syntax <span class="sy0">==</span> <span class="st0">'*'</span> <span class="kw2">.<span class="me1">or</span>.</span> syntax <span class="sy0">==</span> <span class="st0">'/'</span><span class="br0">&#41;</span><br />      syntax <span class="sy0">=</span> <span class="st0">'x'</span>  <span class="co1">! op</span><br />    <span class="kw1">elsewhere</span> <span class="br0">&#40;</span>syntax <span class="sy0">/=</span> <span class="st0">'('</span> <span class="kw2">.<span class="me1">and</span>.</span> syntax <span class="sy0">/=</span> <span class="st0">')'</span><span class="br0">&#41;</span><br />      syntax <span class="sy0">=</span> <span class="st0">'-'</span>  <span class="co1">! error</span><br />    <span class="kw1">end</span> <span class="kw1">where</span><br />&#160;<br />    reals <span class="sy0">=</span> <span class="kw3">real</span><span class="br0">&#40;</span>ascii<span class="sy0">-</span><span class="nu0">48</span><span class="br0">&#41;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">all</span><span class="br0">&#40;</span>syntax <span class="sy0">==</span> one<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      a <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>; b <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>; c <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">8</span><span class="br0">&#41;</span>; d <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span><br />      <span class="kw1">call</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />      <span class="kw3">result</span> <span class="sy0">=</span> op<span class="br0">&#40;</span>op<span class="br0">&#40;</span>op<span class="br0">&#40;</span>a,<span class="nu0">4</span>,b<span class="br0">&#41;</span>,<span class="nu0">7</span>,c<span class="br0">&#41;</span>,<span class="nu0">10</span>,d<span class="br0">&#41;</span><br />    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">all</span><span class="br0">&#40;</span>syntax <span class="sy0">==</span> two<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      a <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>; b <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>; c <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span>; d <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">11</span><span class="br0">&#41;</span><br />      <span class="kw1">call</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />      <span class="kw3">result</span> <span class="sy0">=</span> op<span class="br0">&#40;</span>op<span class="br0">&#40;</span>a,<span class="nu0">3</span>,op<span class="br0">&#40;</span>b,<span class="nu0">6</span>,c<span class="br0">&#41;</span><span class="br0">&#41;</span>,<span class="nu0">10</span>,d<span class="br0">&#41;</span><br />    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">all</span><span class="br0">&#40;</span>syntax <span class="sy0">==</span> three<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      a <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>; b <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">5</span><span class="br0">&#41;</span>; c <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span>; d <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><br />      <span class="kw1">call</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />      <span class="kw3">result</span> <span class="sy0">=</span> op<span class="br0">&#40;</span>a,<span class="nu0">2</span>,op<span class="br0">&#40;</span>op<span class="br0">&#40;</span>b,<span class="nu0">6</span>,c<span class="br0">&#41;</span>,<span class="nu0">9</span>,d<span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">all</span><span class="br0">&#40;</span>syntax <span class="sy0">==</span> four<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      a <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>; b <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>; c <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span>; d <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><br />      <span class="kw1">call</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />      <span class="kw3">result</span> <span class="sy0">=</span> op<span class="br0">&#40;</span>a,<span class="nu0">2</span>,op<span class="br0">&#40;</span>b,<span class="nu0">5</span>,op<span class="br0">&#40;</span>c,<span class="nu0">8</span>,d<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">all</span><span class="br0">&#40;</span>syntax <span class="sy0">==</span> five<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      a <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>; b <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>; c <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">8</span><span class="br0">&#41;</span>; d <span class="sy0">=</span> reals<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><br />      <span class="kw1">call</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />      <span class="kw3">result</span> <span class="sy0">=</span> op<span class="br0">&#40;</span>op<span class="br0">&#40;</span>a,<span class="nu0">3</span>,b<span class="br0">&#41;</span>,<span class="nu0">6</span>,op<span class="br0">&#40;</span>c,<span class="nu0">9</span>,d<span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span><br />      <span class="kw1">stop</span> <span class="st0">'Input string: incorrect syntax.'</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br />    <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">abs</span><span class="br0">&#40;</span>result<span class="sy0">-</span><span class="nu0">24.0</span><span class="br0">&#41;</span> &lt; <span class="kw4">epsilon</span><span class="br0">&#40;</span><span class="nu0">1.0</span><span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      write <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">&#41;</span> <span class="st0">'You won!'</span><br />    <span class="kw1">else</span><br />      write <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">&#41;</span> <span class="st0">'Your result ('</span>,<span class="kw3">result</span>,<span class="st0">') is incorrect!'</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br />    write <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="st0">'(a)'</span>,<span class="kw1">advance</span><span class="sy0">=</span><span class="st0">'no'</span><span class="br0">&#41;</span> <span class="st0">'Another one? [y/n] '</span><br />    read <span class="br0">&#40;</span><span class="sy0">*</span>,<span class="st0">'(a1)'</span><span class="br0">&#41;</span> expression<br />    <span class="kw1">if</span> <span class="br0">&#40;</span> expression<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">:</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'n'</span> <span class="kw2">.<span class="me1">or</span>.</span> expression<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">:</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'N'</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      <span class="kw1">stop</span><br />    <span class="kw1">end</span> <span class="kw1">if</span>  <br />  <span class="kw1">end</span> <span class="kw1">do</span><br />&#160;<br /><span class="co1">contains</span><br />&#160;<br />  pure <span class="kw3">real</span> <span class="kw1">function</span> op<span class="br0">&#40;</span>x,c,y<span class="br0">&#41;</span><br />    <span class="kw3">integer</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">in</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">c</span><br />    <span class="kw3">real</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">in</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">x</span>,y<br />    <span class="kw1">select</span> <span class="kw1">case</span> <span class="br0">&#40;</span> <span class="kw4">char</span><span class="br0">&#40;</span>ascii<span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br />      <span class="kw1">case</span> <span class="br0">&#40;</span><span class="st0">'+'</span><span class="br0">&#41;</span><br />        op <span class="sy0">=</span> x<span class="sy0">+</span>y<br />      <span class="kw1">case</span> <span class="br0">&#40;</span><span class="st0">'-'</span><span class="br0">&#41;</span><br />        op <span class="sy0">=</span> x<span class="sy0">-</span>y<br />      <span class="kw1">case</span> <span class="br0">&#40;</span><span class="st0">'*'</span><span class="br0">&#41;</span><br />        op <span class="sy0">=</span> x<span class="sy0">*</span>y<br />      <span class="kw1">case</span> <span class="br0">&#40;</span><span class="st0">'/'</span><span class="br0">&#41;</span><br />        op <span class="sy0">=</span> x<span class="sy0">/</span>y<br />    <span class="kw1">end</span> <span class="kw1">select</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> op<br />&#160;<br />  <span class="kw1">subroutine</span> check_numbers<span class="br0">&#40;</span>a,b,c,d<span class="br0">&#41;</span><br />    <span class="kw3">real</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">in</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">a</span>,b,c,d<br />    <span class="kw3">integer</span>          <span class="sy0">::</span> <span class="me2">test</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br />    test <span class="sy0">=</span> <span class="br0">&#40;</span><span class="sy0">/</span> <span class="kw4">nint</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>,<span class="kw4">nint</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span>,<span class="kw4">nint</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span>,<span class="kw4">nint</span><span class="br0">&#40;</span>d<span class="br0">&#41;</span> <span class="sy0">/</span><span class="br0">&#41;</span><br />    <span class="kw1">call</span> Insertion_Sort<span class="br0">&#40;</span>numbers<span class="br0">&#41;</span><br />    <span class="kw1">call</span> Insertion_Sort<span class="br0">&#40;</span>test<span class="br0">&#41;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span> <span class="kw4">any</span><span class="br0">&#40;</span>test <span class="sy0">/=</span> numbers<span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="kw1">then</span><br />      <span class="kw1">stop</span> <span class="st0">'You cheat&#160;;-) (Incorrect numbers)'</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />  <span class="kw1">end</span> <span class="kw1">subroutine</span> check_numbers<br />&#160;<br />  pure <span class="kw1">subroutine</span> Insertion_Sort<span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />    <span class="kw3">integer</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">inout</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">a</span><span class="br0">&#40;</span><span class="sy0">:</span><span class="br0">&#41;</span><br />    <span class="kw3">integer</span>                <span class="sy0">::</span> <span class="me2">temp</span>, i, j<br />    <span class="kw1">do</span> i<span class="sy0">=</span><span class="nu0">2</span>,<span class="kw4">size</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />      j <span class="sy0">=</span> i<span class="sy0">-</span><span class="nu0">1</span><br />      temp <span class="sy0">=</span> a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br />      <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span> j&gt;<span class="sy0">=</span><span class="nu0">1</span> <span class="kw2">.<span class="me1">and</span>.</span> a<span class="br0">&#40;</span>j<span class="br0">&#41;</span>&gt;temp <span class="br0">&#41;</span><br />        a<span class="br0">&#40;</span>j<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> a<span class="br0">&#40;</span>j<span class="br0">&#41;</span><br />        j <span class="sy0">=</span> j <span class="sy0">-</span> <span class="nu0">1</span><br />      <span class="kw1">end</span> <span class="kw1">do</span><br />      a<span class="br0">&#40;</span>j<span class="sy0">+</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> temp<br />    <span class="kw1">end</span> <span class="kw1">do</span><br />  <span class="kw1">end</span> <span class="kw1">subroutine</span> Insertion_Sort<br />&#160;<br /><span class="kw1">end</span> <span class="kw1">program</span> game_24<br />&#160;</pre>
<h3><span class="mw-headline" id="As_a_more_general_recursive_descent_parser:">As a more general recursive descent parser:</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=27" title="Edit section: As a more general recursive descent parser:">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Permits spaces and arbitrary parentheses.
</p>
<pre class="fortran highlighted_source">&#160;<br /><span class="co1">! implement a recursive descent parser</span><br /><span class="kw1">module</span> evaluate_algebraic_expression<br />&#160;<br />  <span class="kw3">integer</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="kw4">size</span> <span class="sy0">=</span> <span class="nu0">124</span><br />  <span class="kw3">character</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">statement_end</span> <span class="sy0">=</span> <span class="kw4">achar</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><br />  <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="kw4">size</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">text_to_parse</span><br />  <span class="kw3">integer</span> <span class="sy0">::</span> <span class="kw1">position</span><br />  <span class="kw3">data</span> <span class="kw1">position</span><span class="sy0">/</span><span class="nu0">0</span><span class="sy0">/</span>,text_to_parse<span class="sy0">/</span><span class="st0">' '</span><span class="sy0">/</span><br />&#160;<br /><span class="co1">contains</span><br />&#160;<br />  <span class="kw3">character</span> <span class="kw1">function</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="co1">! return the current token</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">position</span> &lt;<span class="sy0">=</span> <span class="kw4">size</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />       get_token <span class="sy0">=</span> text_to_parse<span class="br0">&#40;</span><span class="kw1">position</span><span class="sy0">:</span><span class="kw1">position</span><span class="br0">&#41;</span><br />       <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span>get_token &lt;<span class="sy0">=</span> <span class="st0">' '</span><span class="br0">&#41;</span><br />          <span class="kw1">call</span> <span class="kw1">advance</span><br />          <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">size</span> &lt; <span class="kw1">position</span><span class="br0">&#41;</span> <span class="kw1">exit</span><br />          get_token <span class="sy0">=</span> text_to_parse<span class="br0">&#40;</span><span class="kw1">position</span><span class="sy0">:</span><span class="kw1">position</span><span class="br0">&#41;</span><br />       <span class="kw1">end</span> <span class="kw1">do</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">size</span> &lt; <span class="kw1">position</span><span class="br0">&#41;</span> get_token <span class="sy0">=</span> statement_end<br />  <span class="kw1">end</span> <span class="kw1">function</span> get_token<br />&#160;<br />  <span class="kw1">subroutine</span> <span class="kw1">advance</span> <span class="co1">! consume a token.  Move to the next token.  consume_token would have been a better name.</span><br />    <span class="kw1">position</span> <span class="sy0">=</span> <span class="kw1">position</span> <span class="sy0">+</span> <span class="nu0">1</span>    <br />  <span class="kw1">end</span> <span class="kw1">subroutine</span> <span class="kw1">advance</span><br />&#160;<br />  <span class="kw3">logical</span> <span class="kw1">function</span> unfinished<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    unfinished <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">/=</span> statement_end<br />  <span class="kw1">end</span> <span class="kw1">function</span> unfinished<br />&#160;<br />  <span class="kw1">subroutine</span> parse_error<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="sy0">*</span><span class="br0">&#41;</span><span class="st0">'&quot;'</span><span class="sy0">//</span>get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">//</span><span class="st0">'&quot; unexpected in expression at'</span>,<span class="kw1">position</span><br />    <span class="kw1">stop</span> <span class="nu0">1</span><br />  <span class="kw1">end</span> <span class="kw1">subroutine</span> parse_error<br />&#160;<br />  <span class="kw1">function</span> precedence3<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw3">result</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">real</span> <span class="sy0">::</span> <span class="me2">a</span><br />    <span class="kw3">character</span> <span class="sy0">::</span> <span class="me2">token</span><br />    <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">10</span><span class="br0">&#41;</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="kw4">digits</span> <span class="sy0">=</span> <span class="st0">'0123456789'</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">verify</span><span class="br0">&#40;</span>token,<span class="kw4">digits</span><span class="br0">&#41;</span> <span class="sy0">/=</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">call</span> parse_error<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    a <span class="sy0">=</span> <span class="kw4">index</span><span class="br0">&#40;</span><span class="kw4">digits</span>, token<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span><br />    <span class="kw1">call</span> <span class="kw1">advance</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> precedence3<br />&#160;<br />  <span class="kw1">recursive</span> <span class="kw1">function</span> precedence2<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw3">result</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />    <span class="kw3">real</span> <span class="sy0">::</span> <span class="me2">a</span><br />    <span class="kw3">character</span> <span class="sy0">::</span> <span class="me2">token</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span>token <span class="sy0">/=</span> <span class="st0">'('</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />       a <span class="sy0">=</span> precedence3<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span><br />       <span class="kw1">call</span> <span class="kw1">advance</span><br />       a <span class="sy0">=</span> precedence0<span class="br0">&#40;</span><span class="br0">&#41;</span><br />       token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />       <span class="kw1">if</span> <span class="br0">&#40;</span>token <span class="sy0">/=</span> <span class="st0">')'</span><span class="br0">&#41;</span> <span class="kw1">call</span> parse_error<span class="br0">&#40;</span><span class="br0">&#41;</span><br />       <span class="kw1">call</span> <span class="kw1">advance</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> precedence2<br />&#160;<br />  <span class="kw1">recursive</span> <span class="kw1">function</span> precedence1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw3">result</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">real</span> <span class="sy0">::</span> <span class="me2">a</span><br />    <span class="kw3">real</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">argument</span><br />    <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">2</span><span class="br0">&#41;</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">tokens</span> <span class="sy0">=</span> <span class="st0">'*/'</span><br />    <span class="kw3">character</span> <span class="sy0">::</span> <span class="me2">token</span><br />    a <span class="sy0">=</span> <span class="nu0">0</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> precedence2<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span><span class="kw4">verify</span><span class="br0">&#40;</span>token,tokens<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span><br />       <span class="kw1">call</span> <span class="kw1">advance</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />       argument<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">=</span> precedence2<span class="br0">&#40;</span><span class="br0">&#41;</span><br />       <span class="kw1">if</span> <span class="br0">&#40;</span>token <span class="sy0">==</span> <span class="st0">'/'</span><span class="br0">&#41;</span> argument<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="sy0">/</span> argument<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><br />       argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw4">product</span><span class="br0">&#40;</span>argument<span class="br0">&#41;</span>       <br />       token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">end</span> <span class="kw1">do</span><br />    a <span class="sy0">=</span> argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> precedence1<br />&#160;<br />  <span class="kw1">recursive</span> <span class="kw1">function</span> precedence0<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw3">result</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">real</span> <span class="sy0">::</span> <span class="me2">a</span><br />    <span class="kw3">real</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">argument</span><br />    <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">2</span><span class="br0">&#41;</span>, <span class="kw3">parameter</span> <span class="sy0">::</span> <span class="me2">tokens</span> <span class="sy0">=</span> <span class="st0">'+-'</span><br />    <span class="kw3">character</span> <span class="sy0">::</span> <span class="me2">token</span><br />    a <span class="sy0">=</span> <span class="nu0">0</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> precedence1<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span><span class="kw4">verify</span><span class="br0">&#40;</span>token,tokens<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span><br />       <span class="kw1">call</span> <span class="kw1">advance</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />       argument<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">=</span> precedence1<span class="br0">&#40;</span><span class="br0">&#41;</span><br />       <span class="kw1">if</span> <span class="br0">&#40;</span>token <span class="sy0">==</span> <span class="st0">'-'</span><span class="br0">&#41;</span> argument <span class="sy0">=</span> argument <span class="sy0">*</span> <span class="br0">&#40;</span><span class="sy0">/</span><span class="nu0">1</span>, <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">/</span><span class="br0">&#41;</span><br />       argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> sum<span class="br0">&#40;</span>argument<span class="br0">&#41;</span><br />       token <span class="sy0">=</span> get_token<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">end</span> <span class="kw1">do</span><br />    a <span class="sy0">=</span> argument<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> precedence0<br />&#160;<br />  <span class="kw3">real</span> <span class="kw1">function</span> statement<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span>unfinished<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />       statement <span class="sy0">=</span> precedence0<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span>                        <span class="co1">!empty okay</span><br />       statement <span class="sy0">=</span> <span class="nu0">0</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span>unfinished<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">call</span> parse_error<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> statement<br />&#160;<br />  <span class="kw3">real</span> <span class="kw1">function</span> evaluate<span class="br0">&#40;</span>expression<span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=*</span><span class="br0">&#41;</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">in</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">expression</span><br />    text_to_parse <span class="sy0">=</span> expression<br />    evaluate <span class="sy0">=</span> statement<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> evaluate<br />&#160;<br /><span class="kw1">end</span> <span class="kw1">module</span> evaluate_algebraic_expression<br />&#160;<br />&#160;<br /><span class="kw1">program</span> g24<br />  <span class="kw3">use</span> evaluate_algebraic_expression<br />  <span class="kw3">implicit</span> <span class="kw3">none</span><br />  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="kw4">digits</span><br />  <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">78</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">expression</span><br />  <span class="kw3">real</span> <span class="sy0">::</span> <span class="kw3">result</span><br />  <span class="co1">! integer&#160;:: i</span><br />  <span class="kw1">call</span> <span class="kw4">random_seed</span><span class="co1">!easily found internet examples exist to seed by /dev/urandom or time</span><br />  <span class="kw1">call</span> deal<span class="br0">&#40;</span><span class="kw4">digits</span><span class="br0">&#41;</span><br />  <span class="co1">! do i=1, 9999&#160;! produce the data to test digit distribution</span><br />  <span class="co1">!   call deal(digits)</span><br />  <span class="co1">!   write(6,*) digits</span><br />  <span class="co1">! end do</span><br />  write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="st0">'(a13,4i2,a26)'</span><span class="br0">&#41;</span><span class="st0">'Using digits'</span>,<span class="kw4">digits</span>,<span class="st0">', and the algebraic dyadic'</span><br />  write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="sy0">*</span><span class="br0">&#41;</span><span class="st0">'operators +-*/() enter an expression computing 24.'</span><br />  expression <span class="sy0">=</span> <span class="st0">' '</span><br />  read<span class="br0">&#40;</span><span class="nu0">5</span>,<span class="st0">'(a78)'</span><span class="br0">&#41;</span> expression<br />  <span class="kw1">if</span> <span class="br0">&#40;</span>invalid_digits<span class="br0">&#40;</span>expression, <span class="kw4">digits</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />     write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="sy0">*</span><span class="br0">&#41;</span><span class="st0">'invalid digits'</span><br />  <span class="kw1">else</span><br />     <span class="kw3">result</span> <span class="sy0">=</span> evaluate<span class="br0">&#40;</span>expression<span class="br0">&#41;</span><br />     <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">nint</span><span class="br0">&#40;</span><span class="kw3">result</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">24</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />        write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw3">result</span>, <span class="st0">' close enough'</span><br />     <span class="kw1">else</span><br />        write<span class="br0">&#40;</span><span class="nu0">6</span>,<span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw3">result</span>, <span class="st0">' no good'</span><br />     <span class="kw1">end</span> <span class="kw1">if</span><br />  <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br /><span class="co1">contains</span><br />&#160;<br />  <span class="kw3">logical</span> <span class="kw1">function</span> invalid_digits<span class="br0">&#40;</span>e,d<span class="br0">&#41;</span> <span class="co1">!verify the digits</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">character</span><span class="br0">&#40;</span><span class="kw4">len</span><span class="sy0">=*</span><span class="br0">&#41;</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">in</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">e</span><br />    <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">inout</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">d</span><br />    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">i</span>, j, k, <span class="kw4">count</span><br />    <span class="kw3">logical</span> <span class="sy0">::</span> <span class="me2">unfound</span><br />    <span class="kw4">count</span> <span class="sy0">=</span> <span class="nu0">0</span><br />    invalid_digits <span class="sy0">=</span> <span class="kw2">.<span class="me1">false</span>.</span> <span class="co1">!validity assumed</span><br />    <span class="co1">!write(6,*)'expression:',e(1:len_trim(e))</span><br />    <span class="kw1">do</span> i<span class="sy0">=</span><span class="nu0">1</span>, <span class="kw4">len_trim</span><span class="br0">&#40;</span>e<span class="br0">&#41;</span><br />       <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw4">verify</span><span class="br0">&#40;</span>e<span class="br0">&#40;</span>i<span class="sy0">:</span>i<span class="br0">&#41;</span>,<span class="st0">'0123456789'</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />          j <span class="sy0">=</span> <span class="kw4">index</span><span class="br0">&#40;</span><span class="st0">'0123456789'</span>,e<span class="br0">&#40;</span>i<span class="sy0">:</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">1</span><br />          unfound <span class="sy0">=</span> <span class="kw2">.<span class="me1">true</span>.</span><br />          <span class="kw1">do</span> k<span class="sy0">=</span><span class="nu0">1</span>, <span class="nu0">4</span><br />             <span class="kw1">if</span> <span class="br0">&#40;</span>j <span class="sy0">==</span> d<span class="br0">&#40;</span>k<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">then</span><br />                unfound <span class="sy0">=</span> <span class="kw2">.<span class="me1">false</span>.</span><br />                <span class="kw1">exit</span><br />             <span class="kw1">end</span> <span class="kw1">if</span><br />          <span class="kw1">end</span> <span class="kw1">do</span><br />          <span class="kw1">if</span> <span class="br0">&#40;</span>unfound<span class="br0">&#41;</span> <span class="kw1">then</span><br />             invalid_digits <span class="sy0">=</span> <span class="kw2">.<span class="me1">true</span>.</span><br />             <span class="co1">!return or exit is okay here</span><br />          <span class="kw1">else</span><br />             d<span class="br0">&#40;</span>k<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">99</span><br />             <span class="kw4">count</span> <span class="sy0">=</span> <span class="kw4">count</span> <span class="sy0">+</span> <span class="nu0">1</span><br />          <span class="kw1">end</span> <span class="kw1">if</span><br />       <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="kw1">end</span> <span class="kw1">do</span><br />    invalid_digits <span class="sy0">=</span> invalid_digits <span class="kw2">.<span class="me1">or</span>.</span> <span class="br0">&#40;</span><span class="kw4">count</span> <span class="sy0">/=</span> <span class="nu0">4</span><span class="br0">&#41;</span><br />  <span class="kw1">end</span> <span class="kw1">function</span> invalid_digits<br />&#160;<br />  <span class="kw1">subroutine</span> deal<span class="br0">&#40;</span><span class="kw4">digits</span><span class="br0">&#41;</span><br />    <span class="kw3">implicit</span> <span class="kw3">none</span><br />    <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>, <span class="kw3">intent</span><span class="br0">&#40;</span><span class="kw3">out</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="kw4">digits</span><br />    <span class="kw3">integer</span> <span class="sy0">::</span> <span class="me2">i</span><br />    <span class="kw3">real</span> <span class="sy0">::</span> <span class="me2">harvest</span><br />    <span class="kw1">call</span> <span class="kw4">random_number</span><span class="br0">&#40;</span>harvest<span class="br0">&#41;</span><br />    <span class="kw1">do</span> i<span class="sy0">=</span><span class="nu0">1</span>, <span class="nu0">4</span><br />       <span class="kw4">digits</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw4">int</span><span class="br0">&#40;</span><span class="kw4">mod</span><span class="br0">&#40;</span>harvest<span class="sy0">*</span><span class="nu0">9</span><span class="sy0">**</span>i, <span class="nu0">9.0</span><span class="br0">&#41;</span><span class="br0">&#41;</span>   <span class="sy0">+</span> <span class="nu0">1</span><br />    <span class="kw1">end</span> <span class="kw1">do</span><br />    <span class="co1">!    NB. computed with executable Iverson notation, www.jsoftware.oom</span><br />    <span class="co1">!    #B NB. B are the digits from 9999 deals</span><br />    <span class="co1">! 39996</span><br />    <span class="co1">!    ({.,#)/.~/:~B  # show the distribution of digits</span><br />    <span class="co1">! 0 4380</span><br />    <span class="co1">! 1 4542</span><br />    <span class="co1">! 2 4348</span><br />    <span class="co1">! 3 4395</span><br />    <span class="co1">! 4 4451</span><br />    <span class="co1">! 5 4474</span><br />    <span class="co1">! 6 4467</span><br />    <span class="co1">! 7 4413</span><br />    <span class="co1">! 8 4526</span><br />    <span class="co1">!    NB. this also shows that I forgot to add 1.  Inserting now...</span><br />  <span class="kw1">end</span> <span class="kw1">subroutine</span> deal<br /><span class="kw1">end</span> <span class="kw1">program</span> g24<br />&#160;</pre>
<p>Compilation and too many examples.  Which would you cut?
</p>
<pre>
$ gfortran -g -O0 -std=f2008 -Wall f.f08 -o f.exe &amp;&amp; echo '8*(9/9+2)' | ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
   24.000000      close enough
$ 
$ 
$ 
$ ./f.exe 
$  Using digits 9 9 8 2, and the algebraic dyadic
$  operators +-*/() enter an expression computing 24.
$     8 *   ( 9 / 9  +    2   )
$    24.000000      close enough
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
(((2+8+9+9)))
   28.000000      no good
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
(((8+9-2+9)))
   24.000000      close enough
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
8929
 &quot;9&quot; unexpected in expression at           2
STOP 1
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
12348
 invalid digits
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
892
 invalid digits
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
8921
 invalid digits
$ 
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
89291
 invalid digits
$ 
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
9+x-2+8+9
 &quot;x&quot; unexpected in expression at           3
STOP 1
$ 
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
(9-2)+8+(9
 &quot;^@&quot; unexpected in expression at         125
STOP 1
$ 
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
(9-2)+8+(9)
   24.000000      close enough
$ 
$ 
$ 
$ ./f.exe
 Using digits 9 9 8 2, and the algebraic dyadic
 operators +-*/() enter an expression computing 24.
(9-2)+8/(9)
   7.8888888      no good
$ 
</pre>
<h2><span class="mw-headline" id="GAP"><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=28" title="Edit section: GAP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Solution in <b>RPN</b>:
</p>
<pre class="text highlighted_source">Play24&#160;:= function()<br />	local input, digits, line, c, chars, stack, stackptr, cur, p, q, ok, a, b, run;<br />	input&#160;:= InputTextUser();<br />	run&#160;:= true;<br />	while run do<br />		digits&#160;:= List([1 .. 4], n -&gt; Random(1, 9));<br />		while true do<br />			Display(digits);<br />			line&#160;:= ReadLine(input);<br />			line&#160;:= Chomp(line);<br />			if line = &quot;end&quot; then<br />				run&#160;:= false;<br />				break;<br />			elif line = &quot;next&quot; then<br />				break;<br />			else<br />				ok&#160;:= true;<br />				stack&#160;:= [ ];<br />				stackptr&#160;:= 0;<br />				chars&#160;:= &quot;123456789+-*/ &quot;;<br />				cur&#160;:= ShallowCopy(digits);<br />				for c in line do<br />					if c = ' ' then<br />						continue;<br />					fi;<br />					p&#160;:= Position(chars, c);<br />					if p = fail then<br />						ok&#160;:= false;<br />						break;<br />					fi;<br />					if p &lt; 10 then<br />						q&#160;:= Position(cur, p);<br />						if q = fail then<br />							ok&#160;:= false;<br />							break;<br />						fi;<br />						Unbind(cur[q]);<br />						stackptr&#160;:= stackptr + 1;<br />						stack[stackptr]&#160;:= p;<br />					else<br />						if stackptr &lt; 2 then<br />							ok&#160;:= false;<br />							break;<br />						fi;<br />						b&#160;:= stack[stackptr];<br />						a&#160;:= stack[stackptr - 1];<br />						stackptr&#160;:= stackptr - 1;<br />						if c = '+' then<br />							a&#160;:= a + b;<br />						elif c = '-' then<br />							a&#160;:= a - b;<br />						elif c = '*' then<br />							a&#160;:= a * b;<br />						elif c = '/' then<br />							if b = 0 then<br />								ok&#160;:= false;<br />								break;<br />							fi;<br />							a&#160;:= a / b;<br />						else<br />							ok&#160;:= false;<br />							break;<br />						fi;<br />						stack[stackptr]&#160;:= a;<br />					fi;<br />				od;<br />				if ok and stackptr = 1 and Size(cur) = 0 then<br />					if stack[1] = 24 then<br />						Print(&quot;Good&#160;!\n&quot;);<br />						break;<br />					else<br />						Print(&quot;Bad value: &quot;, stack[1], &quot;\n&quot;);<br />						continue;<br />					fi;<br />				fi;<br />				Print(&quot;Invalid expression\n&quot;);<br />			fi;<br />		od;<br />	od;<br />	CloseStream(input);<br />end;<br />&#160;<br /># example session<br /># type &quot;end&quot; to quit the game, &quot;next&quot; to try another list of digits<br />gap&gt; Play24();<br />[ 7, 6, 8, 5 ]<br />86*75-/<br />Good&#160;!<br />[ 5, 9, 2, 7 ]<br />end<br />gap&gt;</pre>
<h2><span class="mw-headline" id="Go"><a href="/wiki/Category:Go" title="Category:Go">Go</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=29" title="Edit section: Go">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>RPN solution.
</p>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br />&#160;<br /><span class="kw1">import</span> <span class="sy1">(</span><br />    <span class="st0">&quot;fmt&quot;</span><br />    <span class="st0">&quot;math&quot;</span><br />    <span class="st0">&quot;math/rand&quot;</span><br />    <span class="st0">&quot;time&quot;</span><br /><span class="sy1">)</span><br />&#160;<br /><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br />    rand<span class="sy3">.</span>Seed<span class="sy1">(</span>time<span class="sy3">.</span>Now<span class="sy1">()</span><span class="sy3">.</span>Unix<span class="sy1">())</span><br />    n <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">([]</span>rune<span class="sy1">,</span> <span class="nu0">4</span><span class="sy1">)</span><br />    <span class="kw1">for</span> <span class="nu2">i</span> <span class="sy2">:=</span> <span class="kw1">range</span> n <span class="sy1">{</span><br />        n<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span> <span class="sy2">=</span> rune<span class="sy1">(</span>rand<span class="sy3">.</span>Intn<span class="sy1">(</span><span class="nu0">9</span><span class="sy1">)</span> <span class="sy3">+</span> <span class="st0">'1'</span><span class="sy1">)</span><br />    <span class="sy1">}</span><br />    fmt<span class="sy3">.</span><span class="me1">Printf</span><span class="sy1">(</span><span class="st0">&quot;Your numbers:&#160;%c<span class="es1">\n</span>&quot;</span><span class="sy1">,</span> n<span class="sy1">)</span><br />    fmt<span class="sy3">.</span><span class="me1">Print</span><span class="sy1">(</span><span class="st0">&quot;Enter RPN: &quot;</span><span class="sy1">)</span><br />    <span class="kw1">var</span> expr <span class="kw4">string</span><br />    fmt<span class="sy3">.</span>Scan<span class="sy1">(</span>&amp;expr<span class="sy1">)</span><br />    <span class="kw1">if</span> <span class="kw3">len</span><span class="sy1">(</span>expr<span class="sy1">)</span> <span class="sy2">!=</span> <span class="nu0">7</span> <span class="sy1">{</span><br />        fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;invalid. expression length must be 7.&quot;</span> <span class="sy3">+</span><br />            <span class="st0">&quot; (4 numbers, 3 operators, no spaces)&quot;</span><span class="sy1">)</span><br />        <span class="kw1">return</span><br />    <span class="sy1">}</span><br />    stack <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">([]</span><span class="kw4">float64</span><span class="sy1">,</span> <span class="nu0">0</span><span class="sy1">,</span> <span class="nu0">4</span><span class="sy1">)</span><br />    <span class="kw1">for</span> _<span class="sy1">,</span> r <span class="sy2">:=</span> <span class="kw1">range</span> expr <span class="sy1">{</span><br />        <span class="kw1">if</span> r &gt;<span class="sy2">=</span> <span class="st0">'0'</span> <span class="sy3">&amp;&amp;</span> r <span class="sy3">&lt;=</span> <span class="st0">'9'</span> <span class="sy1">{</span><br />            <span class="kw1">if</span> <span class="kw3">len</span><span class="sy1">(</span>n<span class="sy1">)</span> <span class="sy3">==</span> <span class="nu0">0</span> <span class="sy1">{</span><br />                fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;too many numbers.&quot;</span><span class="sy1">)</span><br />                <span class="kw1">return</span><br />            <span class="sy1">}</span><br />            <span class="nu2">i</span> <span class="sy2">:=</span> <span class="nu0">0</span><br />            <span class="kw1">for</span> n<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span> <span class="sy2">!=</span> r <span class="sy1">{</span><br />                <span class="nu2">i</span><span class="sy2">++</span><br />                <span class="kw1">if</span> <span class="nu2">i</span> <span class="sy3">==</span> <span class="kw3">len</span><span class="sy1">(</span>n<span class="sy1">)</span> <span class="sy1">{</span><br />                    fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;wrong numbers.&quot;</span><span class="sy1">)</span><br />                    <span class="kw1">return</span><br />                <span class="sy1">}</span><br />            <span class="sy1">}</span><br />            n <span class="sy2">=</span> append<span class="sy1">(</span>n<span class="sy1">[:</span><span class="nu2">i</span><span class="sy1">],</span> n<span class="sy1">[</span><span class="nu2">i</span><span class="sy3">+</span><span class="nu0">1</span><span class="sy1">:]</span><span class="sy4">...</span><span class="sy1">)</span><br />            stack <span class="sy2">=</span> append<span class="sy1">(</span>stack<span class="sy1">,</span> <span class="kw4">float64</span><span class="sy1">(</span>r<span class="sy3">-</span><span class="st0">'0'</span><span class="sy1">))</span><br />            <span class="kw1">continue</span><br />        <span class="sy1">}</span><br />        <span class="kw1">if</span> <span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span> &lt; <span class="nu0">2</span> <span class="sy1">{</span><br />            fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;invalid expression syntax.&quot;</span><span class="sy1">)</span><br />            <span class="kw1">return</span><br />        <span class="sy1">}</span><br />        <span class="kw1">switch</span> r <span class="sy1">{</span><br />        <span class="kw1">case</span> <span class="st0">'+'</span><span class="sy1">:</span><br />            stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">2</span><span class="sy1">]</span> <span class="sy2">+=</span> stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span><br />        <span class="kw1">case</span> <span class="st0">'-'</span><span class="sy1">:</span><br />            stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">2</span><span class="sy1">]</span> <span class="sy2">-=</span> stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span><br />        <span class="kw1">case</span> <span class="st0">'*'</span><span class="sy1">:</span><br />            stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">2</span><span class="sy1">]</span> <span class="sy2">*=</span> stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span><br />        <span class="kw1">case</span> <span class="st0">'/'</span><span class="sy1">:</span><br />            stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">2</span><span class="sy1">]</span> <span class="sy2">/=</span> stack<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span><br />        <span class="kw1">default</span><span class="sy1">:</span><br />            fmt<span class="sy3">.</span>Printf<span class="sy1">(</span><span class="st0">&quot;%c invalid.<span class="es1">\n</span>&quot;</span><span class="sy1">,</span> r<span class="sy1">)</span><br />            <span class="kw1">return</span><br />        <span class="sy1">}</span><br />        stack <span class="sy2">=</span> stack<span class="sy1">[:</span><span class="kw3">len</span><span class="sy1">(</span>stack<span class="sy1">)</span><span class="sy3">-</span><span class="nu0">1</span><span class="sy1">]</span><br />    <span class="sy1">}</span><br />    <span class="kw1">if</span> math<span class="sy3">.</span>Abs<span class="sy1">(</span>stack<span class="sy1">[</span><span class="nu0">0</span><span class="sy1">]</span><span class="sy3">-</span><span class="nu0">24</span><span class="sy1">)</span> &gt; 1e<span class="sy3">-</span><span class="nu0">6</span> <span class="sy1">{</span><br />        fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;incorrect.&quot;</span><span class="sy1">,</span> stack<span class="sy1">[</span><span class="nu0">0</span><span class="sy1">],</span> <span class="st0">&quot;!= 24&quot;</span><span class="sy1">)</span><br />    <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br />        fmt<span class="sy3">.</span>Println<span class="sy1">(</span><span class="st0">&quot;correct.&quot;</span><span class="sy1">)</span><br />    <span class="sy1">}</span><br /><span class="sy1">}</span></pre>
<p>Example game:
</p>
<pre>
Your numbers: [5 8 1 3]
Enter RPN: 83-5*1-
correct.
</pre>
<h2><span class="mw-headline" id="Gosu"><a href="/wiki/Category:Gosu" title="Category:Gosu">Gosu</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=30" title="Edit section: Gosu">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br />uses java.lang.Double<br />uses java.lang.Integer<br />uses java.util.ArrayList<br />uses java.util.List<br />uses java.util.Scanner<br />uses java.util.Stack<br />&#160;<br />function doEval( scanner&#160;: Scanner, allowed&#160;: List&lt;Integer&gt; )&#160;: double {<br />    var stk = new Stack&lt;Double&gt;()<br />&#160;<br />    while( scanner.hasNext() ) {<br />        if( scanner.hasNextInt() ) {<br />            var n = scanner.nextInt()<br />&#160;<br />            // Make sure they're allowed to use n<br />            if( n &lt;= 0 || n &gt;= 10 ) {<br />                print( n + &quot; isn't allowed&quot; )<br />                return 0<br />            }<br />            var idx = allowed.indexOf( n )<br />            if( idx == -1 ) {<br />                print( &quot;You aren't allowed to use so many &quot; + n + &quot;s!&quot; )<br />                return 0<br />            }<br />&#160;<br />            // Add the input number to the stack<br />            stk.push( new Double( n ) )<br />&#160;<br />            // Mark n as used<br />            allowed.remove( idx )<br />        } else {<br />            // It has to be an operator...<br />            if( stk.size() &lt; 2 ) {<br />                print( &quot;Invalid Expression: Stack underflow!&quot; )<br />                return 0<br />            }<br />&#160;<br />            // Gets the next operator as a single character token<br />            var s = scanner.next(&quot;[\\+-/\\*]&quot;)<br />&#160;<br />            // Get the operands<br />            var r = stk.pop().doubleValue()<br />            var l = stk.pop().doubleValue()<br />&#160;<br />            // Determine which operator and invoke it<br />            if( s.equals( &quot;+&quot; ) ) {<br />                stk.push( new Double( l + r ) )<br />            } else if( s.equals( &quot;-&quot; ) ) {<br />                stk.push( new Double( l - r ) )<br />            } else if( s.equals( &quot;*&quot; ) ) {<br />                stk.push( new Double( l * r ) )<br />            } else if( s.equals( &quot;/&quot; ) ) {<br />                if( r == 0.0 ) {<br />                    print( &quot;Invalid Expression: Division by zero!&quot; )<br />                    return 0<br />                }<br />                stk.push( new Double( l / r ) )<br />            } else {<br />                print( &quot;Internal Error: looking for operator yielded '&quot; + s + &quot;'&quot; )<br />                return 0<br />            }<br />        }<br />    }<br />&#160;<br />    // Did they skip any numbers?<br />    if( allowed.size()&#160;!= 0 ) {<br />        print( &quot;You didn't use ${allowed}&quot; )<br />        return 0<br />    }<br />&#160;<br />    // Did they use enough operators?<br />    if( stk.size()&#160;!= 1 ) {<br />        print( &quot;Invalid Expression: Not enough operators!&quot; )<br />        return 0<br />    }<br />&#160;<br />    return stk.pop().doubleValue()<br />}<br />&#160;<br />// Pick 4 random numbers from [1..9]<br />var nums = new ArrayList&lt;Integer&gt;()<br />var gen = new java.util.Random( new java.util.Date().getTime() )<br />for( i in 0..3 ) {<br />    nums.add( gen.nextInt(9) + 1 )<br />}<br />&#160;<br />// Prompt the user<br />print( &quot;Using addition, subtraction, multiplication and division, write an&quot; )<br />print( &quot;expression that evaluates to 24 using&quot; )<br />print( &quot;${nums.get(0)}, ${nums.get(1)}, ${nums.get(2)} and ${nums.get(3)}&quot; )<br />print( &quot;&quot; )<br />print( &quot;Please enter your expression in RPN&quot; )<br />&#160;<br />// Build a tokenizer over a line of input<br />var sc = new Scanner( new java.io.BufferedReader( new java.io.InputStreamReader( java.lang.System.in ) ).readLine() )<br />&#160;<br />// eval the expression<br />var val = doEval( sc, nums )<br />&#160;<br />// winner?<br />if( java.lang.Math.abs( val - 24.0 ) &lt; 0.001 ) {<br />    print( &quot;You win!&quot; )<br />} else {<br />    print( &quot;You lose!&quot; )<br />}<br />&#160;</pre>
<h2><span class="mw-headline" id="Groovy"><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=31" title="Edit section: Groovy">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Ruby">Ruby</a></div>
<p>This solution breaks strict adherence to the rules in only one way: any line that starts with the letter "q" causes the game to quit.
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final"><span class="kw2">final</span></a> random <span class="sy0">=</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new"><span class="kw2">new</span></a> <a href="http://www.google.de/search?as_q=Random&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">Random</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><br /><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20final"><span class="kw2">final</span></a> input <span class="sy0">=</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20new"><span class="kw2">new</span></a> Scanner<span class="br0">&#40;</span><a href="http://www.google.de/search?as_q=System&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">System</span></a>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20in"><span class="kw1">in</span></a><span class="br0">&#41;</span><br />&#160;<br />&#160;<br /><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> evaluate <span class="sy0">=</span> <span class="br0">&#123;</span> expr <span class="sy0">-&gt;</span><br />    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20if"><span class="kw1">if</span></a> <span class="br0">&#40;</span>expr <span class="sy0">==</span> <span class="st0">'QUIT'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><span class="kw2">return</span></a> <span class="st0">'QUIT'</span><br />    <span class="br0">&#125;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20else"><span class="kw1">else</span></a> <span class="br0">&#123;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20try"><span class="kw2">try</span></a> <span class="br0">&#123;</span> Eval.<span class="me1">me</span><span class="br0">&#40;</span>expr.<span class="me1">replaceAll</span><span class="br0">&#40;</span>/<span class="br0">&#40;</span>\d<span class="br0">&#41;</span>/, <span class="st0">'$1.0'</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20catch"><span class="kw2">catch</span></a> <span class="br0">&#40;</span>e<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="st0">'syntax error'</span> <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;<br />&#160;<br /><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> readGuess <span class="sy0">=</span> <span class="br0">&#123;</span> digits <span class="sy0">-&gt;</span><br />    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while"><span class="kw1">while</span></a> <span class="br0">&#40;</span><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true"><span class="kw2">true</span></a><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20print"><span class="kw8">print</span></a> <span class="st0">&quot;Enter your guess using ${digits} (q to quit): &quot;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> expr <span class="sy0">=</span> input.<span class="me1">nextLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />&#160;<br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch"><span class="kw1">switch</span></a> <span class="br0">&#40;</span>expr<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> ~/^<span class="br0">&#91;</span>qQ<span class="br0">&#93;</span>.<span class="sy0">*</span>/:<br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><span class="kw2">return</span></a> <span class="st0">'QUIT'</span><br />&#160;<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> ~/.<span class="sy0">*</span><span class="br0">&#91;</span>^\d\s\<span class="sy0">+</span>\<span class="sy0">*</span>\/\<span class="br0">&#40;</span>\<span class="br0">&#41;</span><span class="sy0">-</span><span class="br0">&#93;</span>.<span class="sy0">*</span>/:<br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> badChars <span class="sy0">=</span> expr.<span class="me1">replaceAll</span><span class="br0">&#40;</span>~/<span class="br0">&#91;</span>\d\s\<span class="sy0">+</span>\<span class="sy0">*</span>\/\<span class="br0">&#40;</span>\<span class="br0">&#41;</span><span class="sy0">-</span><span class="br0">&#93;</span>/, <span class="st0">''</span><span class="br0">&#41;</span><br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">&quot;invalid characters in input: ${(badChars as List) as Set}&quot;</span><br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break"><span class="kw2">break</span></a><br />&#160;<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> <span class="br0">&#123;</span> <span class="br0">&#40;</span>it.<span class="me1">replaceAll</span><span class="br0">&#40;</span>~/\D/, <span class="st0">''</span><span class="br0">&#41;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as"><span class="kw2">as</span></a> <a href="http://www.google.de/search?as_q=List&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">List</span></a><span class="br0">&#41;</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort"><span class="kw5">sort</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">+</span>digits<span class="br0">&#41;</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20sort"><span class="kw5">sort</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span>:<br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">'''you didn't use the right digits'''</span><br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break"><span class="kw2">break</span></a><br />&#160;<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> ~/.<span class="sy0">*</span>\d\d.<span class="sy0">*</span>/:<br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">'no multi-digit numbers allowed'</span><br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break"><span class="kw2">break</span></a><br />&#160;<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default"><span class="kw2">default</span></a>:<br />                <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><span class="kw2">return</span></a> expr<br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;<br />&#160;<br /><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> digits <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">4</span><span class="br0">&#41;</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20collect"><span class="kw5">collect</span></a> <span class="br0">&#123;</span> <span class="br0">&#40;</span>random.<span class="me1">nextInt</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as"><span class="kw2">as</span></a> <a href="http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">String</span></a> <span class="br0">&#125;</span><br />&#160;<br /><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20while"><span class="kw1">while</span></a> <span class="br0">&#40;</span><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true"><span class="kw2">true</span></a><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> guess <span class="sy0">=</span> readGuess<span class="br0">&#40;</span>digits<span class="br0">&#41;</span><br />    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> result <span class="sy0">=</span> evaluate<span class="br0">&#40;</span>guess<span class="br0">&#41;</span><br />&#160;<br />    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20switch"><span class="kw1">switch</span></a> <span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> <span class="st0">'QUIT'</span>:<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">'Awwww. Maybe next time?'</span><br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><span class="kw2">return</span></a><br />&#160;<br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> <span class="nu0">24</span>:<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">'Yes! You got it.'</span><br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20return"><span class="kw2">return</span></a><br />&#160;<br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20case"><span class="kw1">case</span></a> <span class="st0">'syntax error'</span>:<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">&quot;A ${result} was found in ${guess}&quot;</span> <br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20break"><span class="kw2">break</span></a><br />&#160;<br />        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20default"><span class="kw2">default</span></a>:<br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">&quot;Nope: ${guess} == ${result}, not 24&quot;</span><br />            <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">'One more try, then?'</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre>
<p>Sample Run:
</p>
<pre>$ groovy TwentyFour.gsh
Enter your guess using [4, 8, 3, 6] (q to quit): 4836
no multi-digit numbers allowed
Enter your guess using [4, 8, 3, 6] (q to quit): 4  ++ ++ 8/ 3-6
A syntax error was found in 4  ++ ++ 8/ 3-6
Enter your guess using [4, 8, 3, 6] (q to quit): btsjsb
invalid characters in input: [t, s, b, j]
Enter your guess using [4, 8, 3, 6] (q to quit): 1+3+2+2
you didn't use the right digits
Enter your guess using [4, 8, 3, 6] (q to quit): q
Awwww. Maybe next time?

$ groovy TwentyFour.gsh
Enter your guess using [6, 3, 2, 6] (q to quit): 6+6+3+2
Nope: 6+6+3+2 == 17.0, not 24
One more try, then?
Enter your guess using [6, 3, 2, 6] (q to quit): (6*3 - 6) * 2
Yes! You got it.</pre>
<h2><span class="mw-headline" id="Haskell"><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=32" title="Edit section: Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="haskell highlighted_source"><span class="kw1">import</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span class="kw4">Char</span></a><br /><span class="kw1">import</span> Control<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Monad"><span class="kw4">Monad</span></a><span class="sy0">.</span>Error<br /><span class="kw1">import</span> Data<span class="sy0">.</span>List<br /><span class="kw1">import</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span class="kw4">IO</span></a><br /><span class="kw1">import</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Maybe"><span class="kw4">Maybe</span></a><br /><span class="kw1">import</span> Random<br />&#160;<br />main <span class="sy0">=</span> <span class="kw1">do</span><br />    hSetBuffering stdout NoBuffering<br />    <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_"><span class="kw3">mapM_</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span class="kw3">putStrLn</span></a> <br />        <span class="br0">&#91;</span> <span class="st0">&quot;THE 24 GAME<span class="es0">\n</span>&quot;</span><br />        <span class="sy0">,</span> <span class="st0">&quot;Given four digits in the range 1 to 9&quot;</span><br />        <span class="sy0">,</span> <span class="st0">&quot;Use the +, -, *, and / operators in reverse polish notation&quot;</span><br />        <span class="sy0">,</span> <span class="st0">&quot;To show how to make an answer of 24.<span class="es0">\n</span>&quot;</span><br />        <span class="br0">&#93;</span><br />    digits <span class="sy0">&lt;-</span> liftM <span class="br0">&#40;</span>sort <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:take"><span class="kw3">take</span></a> <span class="nu0">4</span> <span class="sy0">.</span> randomRs <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span> getStdGen <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span class="kw4">IO</span></a> <span class="br0">&#91;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Int"><span class="kw4">Int</span></a><span class="br0">&#93;</span><br />    <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span class="kw3">putStrLn</span></a> <span class="br0">&#40;</span><span class="st0">&quot;Your digits: &quot;</span> <span class="sy0">++</span> intercalate <span class="st0">&quot; &quot;</span> <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><span class="kw3">show</span></a> digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br />    guessLoop digits<br />    <span class="kw1">where</span> guessLoop digits <span class="sy0">=</span><br />              <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStr"><span class="kw3">putStr</span></a> <span class="st0">&quot;Your expression: &quot;</span> <span class="sy0">&gt;&gt;</span><br />              liftM <span class="br0">&#40;</span>processGuess digits <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:words"><span class="kw3">words</span></a><span class="br0">&#41;</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:getLine"><span class="kw3">getLine</span></a> <span class="sy0">&gt;&gt;=</span><br />              <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:either"><span class="kw3">either</span></a> <span class="br0">&#40;</span>\m <span class="sy0">-&gt;</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span class="kw3">putStrLn</span></a> m <span class="sy0">&gt;&gt;</span> guessLoop digits<span class="br0">&#41;</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:putStrLn"><span class="kw3">putStrLn</span></a><br />&#160;<br />processGuess <span class="sy0">_</span>      <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> Right <span class="st0">&quot;&quot;</span><br />processGuess digits xs <span class="sy0">|</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:not"><span class="kw3">not</span></a> <span class="sy0">$</span> matches <span class="sy0">=</span> Left <span class="st0">&quot;Wrong digits used&quot;</span><br />    <span class="kw1">where</span> matches <span class="sy0">=</span> digits <span class="sy0">==</span> <span class="br0">&#40;</span>sort <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><span class="kw3">read</span></a> <span class="sy0">$</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:filter"><span class="kw3">filter</span></a> <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all"><span class="kw3">all</span></a> isDigit<span class="br0">&#41;</span> xs<span class="br0">&#41;</span><br />processGuess digits xs <span class="sy0">=</span> calc xs <span class="sy0">&gt;&gt;=</span> check<br />    <span class="kw1">where</span> check <span class="nu0">24</span> <span class="sy0">=</span> Right <span class="st0">&quot;Correct&quot;</span><br />          check x  <span class="sy0">=</span> Left <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><span class="kw3">show</span></a> <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromRational"><span class="kw3">fromRational</span></a> <span class="br0">&#40;</span>x <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Rational"><span class="kw4">Rational</span></a><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">++</span> <span class="st0">&quot; is wrong&quot;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="co1">-- A Reverse Polish Notation calculator with full error handling</span><br />calc xs <span class="sy0">=</span> foldM simplify <span class="br0">&#91;</span><span class="br0">&#93;</span> xs <span class="sy0">&gt;&gt;=</span> \ns <span class="sy0">-&gt;</span> <span class="br0">&#40;</span><span class="kw1">case</span> ns <span class="kw1">of</span><br />                                             <span class="br0">&#91;</span>n<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> Right n<br />                                             <span class="sy0">_</span>   <span class="sy0">-&gt;</span> Left <span class="st0">&quot;Too few operators&quot;</span><span class="br0">&#41;</span><br />&#160;<br />simplify <span class="br0">&#40;</span>a:b:ns<span class="br0">&#41;</span> s <span class="sy0">|</span> isOp s <span class="sy0">=</span> Right <span class="br0">&#40;</span><span class="br0">&#40;</span>fromJust <span class="sy0">$</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:lookup"><span class="kw3">lookup</span></a> s ops<span class="br0">&#41;</span> b a&#160;: ns<span class="br0">&#41;</span><br />simplify <span class="sy0">_</span>        s <span class="sy0">|</span> isOp s <span class="sy0">=</span> Left <span class="br0">&#40;</span><span class="st0">&quot;Too few values before &quot;</span> <span class="sy0">++</span> s<span class="br0">&#41;</span><br />simplify ns       s <span class="sy0">|</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:all"><span class="kw3">all</span></a> isDigit s <span class="sy0">=</span> Right <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fromIntegral"><span class="kw3">fromIntegral</span></a> <span class="br0">&#40;</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:read"><span class="kw3">read</span></a> s<span class="br0">&#41;</span>&#160;: ns<span class="br0">&#41;</span><br />simplify <span class="sy0">_</span>        s <span class="sy0">=</span> Left <span class="br0">&#40;</span><span class="st0">&quot;Unrecognized symbol: &quot;</span> <span class="sy0">++</span> s<span class="br0">&#41;</span><br />&#160;<br />isOp v <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:elem"><span class="kw3">elem</span></a> v <span class="sy0">$</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fst"><span class="kw3">fst</span></a> ops<br />&#160;<br />ops <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="st0">&quot;+&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="sy0">+</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="st0">&quot;-&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="sy0">-</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="st0">&quot;*&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span><span class="st0">&quot;/&quot;</span><span class="sy0">,</span><span class="br0">&#40;</span><span class="sy0">/</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span></pre>
<h2><span class="mw-headline" id="HicEst"><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=33" title="Edit section: HicEst">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="hicest highlighted_source"><span class="kw1">DIMENSION</span> digits<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy1">,</span> input_digits<span class="br0">&#40;</span><span class="nu0">100</span><span class="br0">&#41;</span><span class="sy1">,</span> difference<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br /><span class="kw1">CHARACTER</span> expression<span class="sy1">*</span><span class="nu0">100</span><span class="sy1">,</span> prompt<span class="sy1">*</span><span class="nu0">100</span><span class="sy1">,</span> answers<span class="sy1">=</span><span class="st0">'Wrong,Correct,'</span><span class="sy1">,</span> protocol<span class="sy1">=</span><span class="st0">'24 game.txt'</span><br />&#160;<br /><span class="nu0">1</span>  digits <span class="sy1">=</span> <span class="kw1">CEILING</span><span class="br0">&#40;</span> <span class="kw1">RAN</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br /><span class="nu0">2</span>  <span class="kw1">DLG</span><span class="br0">&#40;</span><span class="kw1">Edit</span><span class="sy1">=</span>expression<span class="sy1">,</span> Text<span class="sy1">=</span>digits<span class="sy1">,</span> TItle<span class="sy1">=</span>prompt<span class="br0">&#41;</span><br />&#160;<br />   <span class="kw1">READ</span><span class="br0">&#40;</span>Text<span class="sy1">=</span>expression<span class="sy1">,</span> ItemS<span class="sy1">=</span>n<span class="br0">&#41;</span> input_digits<br />   <span class="kw1">IF</span><span class="br0">&#40;</span>n <span class="sy1">==</span> <span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw1">THEN</span><br />     <span class="kw1">ALIAS</span><span class="br0">&#40;</span>input_digits<span class="sy1">,</span><span class="nu0">1</span><span class="sy1">,</span>  input<span class="sy1">,</span><span class="nu0">4</span><span class="br0">&#41;</span><br />     <span class="kw1">SORT</span><span class="br0">&#40;</span>Vector<span class="sy1">=</span>digits<span class="sy1">,</span> Sorted<span class="sy1">=</span>digits<span class="br0">&#41;</span><br />     <span class="kw1">SORT</span><span class="br0">&#40;</span>Vector<span class="sy1">=</span>input<span class="sy1">,</span> Sorted<span class="sy1">=</span>input<span class="br0">&#41;</span><br />     difference <span class="sy1">=</span> <span class="kw1">ABS</span><span class="br0">&#40;</span>digits <span class="sy1">-</span> input<span class="br0">&#41;</span><br />     <span class="kw1">IF</span><span class="br0">&#40;</span> <span class="kw1">SUM</span><span class="br0">&#40;</span>difference<span class="br0">&#41;</span> <span class="sy1">==</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="kw1">THEN</span><br />       <span class="kw1">EDIT</span><span class="br0">&#40;</span>Text<span class="sy1">=</span>expression<span class="sy1">,</span> ScaNnot<span class="sy1">=</span><span class="st0">'123456789+-*/ ()'</span><span class="sy1">,</span> GetPos<span class="sy1">=</span>i<span class="sy1">,</span> CoPyto<span class="sy1">=</span>prompt<span class="br0">&#41;</span><br />       <span class="kw1">IF</span><span class="br0">&#40;</span> i <span class="sy1">&gt;</span> <span class="nu0">0</span> <span class="br0">&#41;</span> <span class="kw1">THEN</span><br />         prompt <span class="sy1">=</span> TRIM<span class="br0">&#40;</span>expression<span class="br0">&#41;</span> <span class="sy1">//</span> <span class="st0">': '</span> <span class="sy1">//</span>TRIM<span class="br0">&#40;</span>prompt<span class="br0">&#41;</span> <span class="sy1">//</span> <span class="st0">' is an illegal character'</span><br />       <span class="kw1">ELSE</span><br />         prompt <span class="sy1">=</span> TRIM<span class="br0">&#40;</span>expression<span class="br0">&#41;</span> <span class="sy1">//</span> <span class="st0">': Syntax error'</span><br />         result <span class="sy1">=</span> <span class="kw1">XEQ</span><span class="br0">&#40;</span>expression<span class="sy1">,</span> <span class="sy1">*</span><span class="nu0">2</span><span class="br0">&#41;</span> <span class="co1">! on error branch to label 2</span><br />         <span class="kw1">EDIT</span><span class="br0">&#40;</span>Text<span class="sy1">=</span>answers<span class="sy1">,</span> ITeM<span class="sy1">=</span><span class="br0">&#40;</span>result<span class="sy1">==</span><span class="nu0">24</span><span class="br0">&#41;</span><span class="sy1">+</span><span class="nu0">1</span><span class="sy1">,</span> Parse<span class="sy1">=</span>answer<span class="br0">&#41;</span><br />         <span class="kw1">WRITE</span><span class="br0">&#40;</span>Text<span class="sy1">=</span>prompt<span class="sy1">,</span> Name<span class="br0">&#41;</span> TRIM<span class="br0">&#40;</span>expression<span class="br0">&#41;</span><span class="sy1">//</span><span class="st0">': '</span><span class="sy1">,</span> answer<span class="sy1">,</span> result<br />       <span class="kw1">ENDIF</span><br />     <span class="kw1">ELSE</span><br />       <span class="kw1">WRITE</span><span class="br0">&#40;</span>Text<span class="sy1">=</span>prompt<span class="br0">&#41;</span> TRIM<span class="br0">&#40;</span>expression<span class="br0">&#41;</span><span class="sy1">,</span> <span class="st0">': You used '</span><span class="sy1">,</span> input<span class="sy1">,</span> <span class="st0">' instead '</span><span class="sy1">,</span> digits<br />     <span class="kw1">ENDIF</span><br />   <span class="kw1">ELSE</span><br />     prompt <span class="sy1">=</span> TRIM<span class="br0">&#40;</span>expression<span class="br0">&#41;</span> <span class="sy1">//</span> <span class="st0">': Instead 4 digits you used '</span> <span class="sy1">//</span> n<br />   <span class="kw1">ENDIF</span><br />&#160;<br />   <span class="kw1">OPEN</span><span class="br0">&#40;</span>FIle<span class="sy1">=</span>protocol<span class="sy1">,</span> APPend<span class="br0">&#41;</span><br />   <span class="kw1">WRITE</span><span class="br0">&#40;</span>FIle<span class="sy1">=</span>protocol<span class="sy1">,</span> CLoSe<span class="sy1">=</span><span class="nu0">1</span><span class="br0">&#41;</span> prompt<br />&#160;<br />   <span class="kw1">DLG</span><span class="br0">&#40;</span>TItle<span class="sy1">=</span>prompt<span class="sy1">,</span> Button<span class="sy1">=</span><span class="st0">'&gt;2:Try again'</span><span class="sy1">,</span> B<span class="sy1">=</span><span class="st0">'&gt;1:New game'</span><span class="sy1">,</span> B<span class="sy1">=</span><span class="st0">'Quit'</span><span class="br0">&#41;</span><br />&#160;<br /><span class="kw1">END</span></pre>
<pre class="hicest highlighted_source"><span class="nu0">4</span> <span class="sy1">+</span> <span class="nu0">8</span> <span class="sy1">+</span> <span class="nu0">7</span> <span class="sy1">+</span> <span class="nu0">5</span><span class="sy1">:</span> You used <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">7</span> <span class="nu0">8</span>  instead <span class="nu0">4</span> <span class="nu0">4</span> <span class="nu0">7</span> <span class="nu0">8</span><br /><span class="nu0">4</span> <span class="sy1">+</span> <span class="nu0">8</span> <span class="sy1">+</span> <span class="nu0">7</span> <span class="sy1">+</span> a<span class="sy1">:</span> Instead <span class="nu0">4</span> digits you used <span class="nu0">3</span><br /><span class="nu0">4</span> <span class="sy1">+</span> <span class="nu0">8</span> <span class="sy1">+</span> <span class="nu0">7</span> <span class="sy1">+</span> a <span class="sy1">+</span> <span class="nu0">4</span><span class="sy1">:</span> a is an illegal <span class="kw1">character</span><br /><span class="nu0">4</span> <span class="sy1">+</span> <span class="nu0">8</span> <span class="sy1">+</span> 7a <span class="sy1">+</span> <span class="nu0">4</span><span class="sy1">:</span> a is an illegal <span class="kw1">character</span><br /><span class="nu0">4</span> <span class="sy1">+</span> <span class="nu0">8</span> <span class="sy1">+</span> <span class="nu0">7</span> <span class="sy1">+</span> <span class="nu0">4</span><span class="sy1">:</span>; answer<span class="sy1">=</span>Wrong; result<span class="sy1">=</span><span class="nu0">23</span>;<br /><span class="nu0">4</span> <span class="sy1">*</span> <span class="nu0">7</span> <span class="sy1">-</span> <span class="nu0">8</span> <span class="sy1">+</span> <span class="nu0">4</span><span class="sy1">:</span>; answer<span class="sy1">=</span>Correct; result<span class="sy1">=</span><span class="nu0">24</span>;</pre>
<h2><span class="mw-headline" id="Icon_and_Unicon"><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a> and <a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=34" title="Edit section: Icon and Unicon">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This plays the game of 24 using a simplified version of the code from the <a href="/wiki/Arithmetic_evaluation#Icon_and_Unicon" title="Arithmetic evaluation">Arithmetic evaluation</a> task.
</p>
<pre class="icon highlighted_source"><span class="kw1">invocable</span> all <br /><span class="kw1">link</span> strings   <span class="co1"># for csort, deletec</span><br />&#160;<br /><span class="kw1">procedure</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <br />help<span class="br0">&#40;</span><span class="br0">&#41;</span>  <br /><span class="kw1">repeat</span> <span class="br0">&#123;</span> <br />   <span class="kw1">every</span> <span class="br0">&#40;</span>n <span class="sy1">:=</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="sy1">||:=</span> <span class="br0">&#40;</span><span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><span class="sy1">,</span> <span class="kw4">string</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy1">+?</span><span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />   <span class="kw4">writes</span><span class="br0">&#40;</span><span class="st0">&quot;Your four digits are&#160;: &quot;</span><span class="br0">&#41;</span><br />   <span class="kw1">every</span> <span class="kw4">writes</span><span class="br0">&#40;</span><span class="sy1">!</span>n<span class="sy1">,</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span> <br />   <span class="kw4">write</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />&#160;<br />   e <span class="sy1">:=</span> <span class="kw4">trim</span><span class="br0">&#40;</span><span class="kw4">read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy1">|</span> <span class="kw1">fail</span><br />   <span class="kw1">case</span> e <span class="kw1">of</span> <span class="br0">&#123;</span><br />      <span class="st0">&quot;q&quot;</span><span class="sy1">|</span><span class="st0">&quot;quit&quot;</span><span class="sy1">:</span> <span class="kw1">return</span><br />      <span class="st0">&quot;?&quot;</span><span class="sy1">|</span><span class="st0">&quot;help&quot;</span><span class="sy1">:</span> help<span class="br0">&#40;</span><span class="br0">&#41;</span><br />      <span class="kw1">default</span><span class="sy1">:</span> <span class="br0">&#123;</span><br />         e <span class="sy1">:=</span> deletec<span class="br0">&#40;</span>e<span class="sy1">,</span><span class="st0">' <span class="es0">\t</span>'</span><span class="br0">&#41;</span>         <span class="co1"># no whitespace</span><br />         d <span class="sy1">:=</span> deletec<span class="br0">&#40;</span>e<span class="sy1">,~&amp;</span><span class="kw3">digits</span><span class="br0">&#41;</span>      <span class="co1"># just digits</span><br />         <span class="kw1">if</span> csort<span class="br0">&#40;</span>n<span class="br0">&#41;</span> <span class="sy1">~==</span> csort<span class="br0">&#40;</span>d<span class="br0">&#41;</span> <span class="kw1">then</span> <span class="co1"># and only the 4 given digits</span><br />            <span class="kw4">write</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid repsonse.&quot;</span><span class="br0">&#41;</span> <span class="sy1">&amp;</span> <span class="kw1">next</span> <br />&#160;<br />         <span class="kw1">if</span> e <span class="sy1">?</span> <span class="br0">&#40;</span>ans <span class="sy1">:=</span> eval<span class="br0">&#40;</span>E<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">,</span> <span class="kw4">pos</span><span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">then</span> <span class="co1"># parse and evaluate</span><br />            <span class="kw1">if</span> ans <span class="sy1">=</span> <span class="nu0">24</span> <span class="kw1">then</span> <span class="kw4">write</span><span class="br0">&#40;</span><span class="st0">&quot;Congratulations you win!&quot;</span><span class="br0">&#41;</span> <br />            <span class="kw1">else</span> <span class="kw4">write</span><span class="br0">&#40;</span><span class="st0">&quot;Your answer was &quot;</span><span class="sy1">,</span>ans<span class="sy1">,</span><span class="st0">&quot;. Try again.&quot;</span><span class="br0">&#41;</span><br />         <span class="kw1">else</span> <span class="kw4">write</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid expression.&quot;</span><span class="br0">&#41;</span><br />         <span class="br0">&#125;</span><br />      <span class="br0">&#125;</span><br />   <span class="br0">&#125;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">procedure</span> eval<span class="br0">&#40;</span>X<span class="br0">&#41;</span>    <span class="co1">#: return the evaluated AST</span><br />   <span class="kw1">if</span> <span class="kw4">type</span><span class="br0">&#40;</span>X<span class="br0">&#41;</span> <span class="sy1">==</span> <span class="st0">&quot;list&quot;</span> <span class="kw1">then</span> <span class="br0">&#123;</span><br />      x <span class="sy1">:=</span> eval<span class="br0">&#40;</span><span class="kw4">get</span><span class="br0">&#40;</span>X<span class="br0">&#41;</span><span class="br0">&#41;</span><br />      <span class="kw1">while</span> x <span class="sy1">:=</span> <span class="kw4">get</span><span class="br0">&#40;</span>X<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="kw4">real</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="sy1">,</span> <span class="kw4">real</span><span class="br0">&#40;</span>eval<span class="br0">&#40;</span><span class="kw4">get</span><span class="br0">&#40;</span>X<span class="br0">&#41;</span> <span class="sy1">|</span> <span class="kw4">stop</span><span class="br0">&#40;</span><span class="st0">&quot;Malformed expression.&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />   <span class="br0">&#125;</span><br />   <span class="kw1">return</span> <span class="sy1">\</span>x <span class="sy1">|</span> X<br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">procedure</span> E<span class="br0">&#40;</span><span class="br0">&#41;</span>    <span class="co1">#: expression</span><br />   <span class="kw4">put</span><span class="br0">&#40;</span>lex <span class="sy1">:=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy1">,</span><span class="kw7">T</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />   <span class="kw1">while</span> <span class="kw4">put</span><span class="br0">&#40;</span>lex<span class="sy1">,</span><span class="kw4">tab</span><span class="br0">&#40;</span><span class="kw4">any</span><span class="br0">&#40;</span><span class="st0">'+-*/'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">do</span><br />      <span class="kw4">put</span><span class="br0">&#40;</span>lex<span class="sy1">,</span><span class="kw7">T</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>  <br />   <span class="kw1">suspend</span> <span class="kw1">if</span> <span class="sy1">*</span>lex <span class="sy1">=</span> <span class="nu0">1</span> <span class="kw1">then</span> lex<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="kw1">else</span> lex     <span class="co1"># strip useless []  </span><br /><span class="kw1">end</span>   <br />&#160;<br /><span class="kw1">procedure</span> <span class="kw7">T</span><span class="br0">&#40;</span><span class="br0">&#41;</span>                   <span class="co1">#: Term</span><br />   <span class="kw1">suspend</span> <span class="nu0">2</span><span class="br0">&#40;</span><span class="sy1">=</span><span class="st0">&quot;(&quot;</span><span class="sy1">,</span> E<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy1">,</span> <span class="sy1">=</span><span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span> <span class="sy1">|</span> <span class="co1"># parenthesized subexpression, or ...</span><br />       <span class="kw4">tab</span><span class="br0">&#40;</span><span class="kw4">any</span><span class="br0">&#40;</span><span class="sy1">&amp;</span><span class="kw3">digits</span><span class="br0">&#41;</span><span class="br0">&#41;</span>        <span class="co1"># just a value</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">procedure</span> help<span class="br0">&#40;</span><span class="br0">&#41;</span><br /><span class="kw1">return</span> <span class="kw4">write</span><span class="br0">&#40;</span><br />   <span class="st0">&quot;Welcome to 24<span class="es0">\n</span><span class="es0">\n</span>&quot;</span><span class="sy1">,</span><br />   <span class="st0">&quot;Combine the 4 given digits to make 24 using only + - * / and ( ).<span class="es0">\n</span> &quot;</span><span class="sy1">,</span><br />   <span class="st0">&quot;All operations have equal precedence and are evaluated left to right.<span class="es0">\n</span>&quot;</span><span class="sy1">,</span><br />   <span class="st0">&quot;Combining (concatenating) digits is not allowed.<span class="es0">\n</span>&quot;</span><span class="sy1">,</span><br />   <span class="st0">&quot;Enter 'help', 'quit', or an expression.<span class="es0">\n</span>&quot;</span><span class="br0">&#41;</span>  <br /><span class="kw1">end</span></pre>
<div class="examplemeta libheader"><b>Library:</b> <a href="/wiki/Category:Icon_Programming_Library" title="Category:Icon Programming Library">Icon Programming Library</a></div>
<p><a rel="nofollow" class="external text" href="http://www.cs.arizona.edu/icon/library/src/procs/strings.icn">strings.icn provides deletec and sortc</a> 
</p>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Welcome to 24

The object of the game is to combine the 4 given digits using only + - * / and ( ).
All operations have equal precedence and are evaluated left to right.
Combining (concatenating) digits is not allowed.
Enter 'help', 'quit', or an expression.

Your four digits are&#160;: 8 1 7 2
8*2+(7+1)
Congratulations you win!
Your four digits are&#160;: 4 2 7 6
7*6+(4*2)
Your answer was 50. Try again.
Your four digits are&#160;: 7 7 8 8
77-88
Invalid expression.
Your four digits are&#160;: 9 3 2 3
9+3+2+3+
Malformed expression.</pre>
<h2><span class="mw-headline" id="J"><a href="/wiki/Category:J" title="Category:J">J</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=35" title="Edit section: J">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="j highlighted_source">require<span class="st_h">'misc'</span><br />deal=: <span class="nu0">1</span> +&#160;? bind <span class="nu0">9</span> <span class="nu0">9</span> <span class="nu0">9</span> <span class="nu0">9</span><br />rules=: smoutput bind <span class="st_h">'see http://en.wikipedia.org/wiki/24_Game'</span><br />input=: prompt @ <span class="sy0">(</span><span class="st_h">'enter 24 expression using '</span>, &quot;:, <span class="st_h">': '</span>&quot;<span class="nu0">_</span><span class="sy0">)</span><br />&#160;<br />wellformed=: <span class="sy0">(</span><span class="st_h">' '</span>&lt;;.<span class="nu0">_1</span>@, &quot;:@[<span class="sy0">)</span> -:&amp;<span class="sy0">(</span>/:~<span class="sy0">)</span>  <span class="st_h">'(+-*%)'</span> -.&amp;;:~ ]<br />is24=: <span class="nu0">24</span> -: &quot;.&#160;::0:@]<br />&#160;<br />respond=: <span class="sy0">(</span>;:<span class="st_h">'no yes'</span><span class="sy0">)</span> {::~ wellformed * is24<br />&#160;<br />game24=: <span class="sy0">(</span>respond input<span class="sy0">)</span>@<a class="__cf_email__" href="/cdn-cgi/l/email-protection" data-cfemail="7e1a1b1f123e0c0b121b0d">[email&#160;protected]</a><script data-cfhash='f9e31' type="text/javascript">/* <![CDATA[ */!function(t,e,r,n,c,a,p){try{t=document.currentScript||function(){for(t=document.getElementsByTagName('script'),e=t.length;e--;)if(t[e].getAttribute('data-cfhash'))return t[e]}();if(t&&(c=t.previousSibling)){p=t.parentNode;if(a=c.getAttribute('data-cfemail')){for(e='',r='0x'+a.substr(0,2)|0,n=2;a.length-n;n+=2)e+='%'+('0'+('0x'+a.substr(n,2)^r).toString(16)).slice(-2);p.replaceChild(document.createTextNode(decodeURIComponent(e)),c)}p.removeChild(t)}}catch(u){}}()/* ]]> */</script></pre>
<p>Example use:
</p>
<pre>   <b>game24 ''</b>
see http://en.wikipedia.org/wiki/24_Game
enter 24 expression using 6 5 9 4: <b>6+5+9+4</b>
yes
   <b>game24 ''</b>
see http://en.wikipedia.org/wiki/24_Game
enter 24 expression using 3 3 3 3: <b>3+3+3+3+3+3+3+3</b>
no
</pre>
<h2><span class="mw-headline" id="Java"><a href="/wiki/Category:Java" title="Category:Java">Java</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=36" title="Edit section: Java">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Java" title="Java" class="mw-redirect">Java</a> version 7</div>
<pre class="java highlighted_source"><span class="kw1">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span><br />&#160;<br /><span class="kw1">public</span> <span class="kw1">class</span> Game24 <span class="br0">&#123;</span><br />    <span class="kw1">static</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Random</span></a> r <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Arandom+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Random</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />&#160;<br />        <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> digits <span class="sy0">=</span> randomDigits<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        Scanner in <span class="sy0">=</span> <span class="kw1">new</span> Scanner<span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">in</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Make 24 using these digits: &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Aarrays+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Arrays</span></a>.<span class="me1">toString</span><span class="br0">&#40;</span>digits<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">&#40;</span><span class="st0">&quot;&gt; &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />        Stack<span class="sy0">&lt;</span>Float<span class="sy0">&gt;</span> s <span class="sy0">=</span> <span class="kw1">new</span> Stack<span class="sy0">&lt;&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="kw4">long</span> total <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br />        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">char</span> c <span class="sy0">:</span> in.<span class="me1">nextLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span>.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">if</span> <span class="br0">&#40;</span><span class="st0">'0'</span> <span class="sy0">&lt;=</span> c <span class="sy0">&amp;&amp;</span> c <span class="sy0">&lt;=</span> <span class="st0">'9'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />                <span class="kw4">int</span> d <span class="sy0">=</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br />                total <span class="sy0">+=</span> <span class="br0">&#40;</span><span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> <span class="br0">&#40;</span>d <span class="sy0">*</span> <span class="nu0">5</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />                s.<span class="me1">push</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="kw4">float</span><span class="br0">&#41;</span> d<span class="br0">&#41;</span><span class="sy0">;</span><br />            <span class="br0">&#125;</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><span class="st0">&quot;+/-*&quot;</span>.<span class="me1">indexOf</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="sy0">!=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />                s.<span class="me1">push</span><span class="br0">&#40;</span>applyOperator<span class="br0">&#40;</span>s.<span class="me1">pop</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, s.<span class="me1">pop</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, c<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />            <span class="br0">&#125;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw1">if</span> <span class="br0">&#40;</span>tallyDigits<span class="br0">&#40;</span>digits<span class="br0">&#41;</span> <span class="sy0">!=</span> total<span class="br0">&#41;</span><br />            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Not the same digits. &quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Amath+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Math</span></a>.<span class="me1">abs</span><span class="br0">&#40;</span><span class="nu0">24</span> <span class="sy0">-</span> s.<span class="me1">peek</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&lt;</span> 0.001F<span class="br0">&#41;</span><br />            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span><span class="st0">&quot;Correct!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="kw1">else</span><br />            <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Not correct.&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">static</span> <span class="kw4">float</span> applyOperator<span class="br0">&#40;</span><span class="kw4">float</span> a, <span class="kw4">float</span> b, <span class="kw4">char</span> c<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">switch</span> <span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">case</span> <span class="st0">'+'</span><span class="sy0">:</span><br />                <span class="kw1">return</span> a <span class="sy0">+</span> b<span class="sy0">;</span><br />            <span class="kw1">case</span> <span class="st0">'-'</span><span class="sy0">:</span><br />                <span class="kw1">return</span> b <span class="sy0">-</span> a<span class="sy0">;</span><br />            <span class="kw1">case</span> <span class="st0">'*'</span><span class="sy0">:</span><br />                <span class="kw1">return</span> a <span class="sy0">*</span> b<span class="sy0">;</span><br />            <span class="kw1">case</span> <span class="st0">'/'</span><span class="sy0">:</span><br />                <span class="kw1">return</span> b <span class="sy0">/</span> a<span class="sy0">;</span><br />            <span class="kw1">default</span><span class="sy0">:</span><br />                <span class="kw1">return</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Afloat+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Float</span></a>.<span class="me1">NaN</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">static</span> <span class="kw4">long</span> tallyDigits<span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw4">long</span> total <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br />        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">4</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br />            total <span class="sy0">+=</span> <span class="br0">&#40;</span><span class="nu0">1</span> <span class="sy0">&lt;&lt;</span> <span class="br0">&#40;</span>a<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">*</span> <span class="nu0">5</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="kw1">return</span> total<span class="sy0">;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">static</span> <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> randomDigits<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>        <br />        <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> result <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">int</span><span class="br0">&#91;</span><span class="nu0">4</span><span class="br0">&#93;</span><span class="sy0">;</span><br />        <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">4</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br />            result<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> r.<span class="me1">nextInt</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span><br />        <span class="kw1">return</span> result<span class="sy0">;</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Make 24 using these digits: [1, 2, 4, 8]
&gt; 12*48+*
Correct!</pre>
<h2><span class="mw-headline" id="JavaScript"><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=37" title="Edit section: JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="javascript highlighted_source">&#160;<br /><span class="kw1">function</span> twentyfour<span class="br0">&#40;</span>numbers<span class="sy0">,</span> input<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="kw1">var</span> invalidChars <span class="sy0">=</span> <span class="co2">/[^\d\+\*\/\s-\(\)]/</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">var</span> validNums <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="co1">// Create a duplicate of our input numbers, so that</span><br />        <span class="co1">// both lists will be sorted.</span><br />        <span class="kw1">var</span> mnums <span class="sy0">=</span> numbers.<span class="me1">slice</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        mnums.<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />        <span class="co1">// Sort after mapping to numbers, to make comparisons valid.</span><br />        <span class="kw1">return</span> str.<span class="me1">replace</span><span class="br0">&#40;</span><span class="co2">/[^\d\s]/g</span><span class="sy0">,</span> <span class="st0">&quot; &quot;</span><span class="br0">&#41;</span><br />            .<span class="me1">trim</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />            .<span class="me1">split</span><span class="br0">&#40;</span><span class="co2">/\s+/</span><span class="br0">&#41;</span><br />            .<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>n<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> parseInt<span class="br0">&#40;</span>n<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><br />            .<span class="me1">sort</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />            .<span class="me1">every</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span>v<span class="sy0">,</span> i<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="kw1">return</span> v <span class="sy0">===</span> mnums<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span> <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">var</span> validEval <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">&#40;</span>input<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">try</span> <span class="br0">&#123;</span><br />            <span class="kw1">return</span> eval<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span>e<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">return</span> <span class="br0">&#123;</span>error<span class="sy0">:</span> e.<span class="me1">toString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#125;</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">if</span> <span class="br0">&#40;</span>input.<span class="me1">trim</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">===</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="st0">&quot;You must enter a value.&quot;</span><span class="sy0">;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span>input.<span class="me1">match</span><span class="br0">&#40;</span>invalidChars<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="st0">&quot;Invalid chars used, try again. Use only:<span class="es0">\n</span> + - * / ( )&quot;</span><span class="sy0">;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>validNums<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="st0">&quot;Wrong numbers used, try again.&quot;</span><span class="sy0">;</span><br />    <span class="kw1">var</span> calc <span class="sy0">=</span> validEval<span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="kw1">typeof</span> calc <span class="sy0">!==</span> <span class="st0">'number'</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="st0">&quot;That is not a valid input; please try again.&quot;</span><span class="sy0">;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span>calc <span class="sy0">!==</span> <span class="nu0">24</span><span class="br0">&#41;</span> <span class="kw1">return</span> <span class="st0">&quot;Wrong answer: &quot;</span> <span class="sy0">+</span> <span class="kw4">String</span><span class="br0">&#40;</span>calc<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;; please try again.&quot;</span><span class="sy0">;</span><br />    <span class="kw1">return</span> input <span class="sy0">+</span> <span class="st0">&quot; == 24.  Congratulations!&quot;</span><span class="sy0">;</span><br /><span class="br0">&#125;</span><span class="sy0">;</span><br />&#160;<br /><span class="co1">// I/O below.</span><br />&#160;<br />while <span class="br0">&#40;</span><span class="kw2">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="kw1">var</span> numbers <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">&#93;</span>.<span class="me1">map</span><span class="br0">&#40;</span><span class="kw1">function</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">return</span> <span class="kw4">Math</span>.<span class="me1">floor</span><span class="br0">&#40;</span><span class="kw4">Math</span>.<span class="me1">random</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">8</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">var</span> input <span class="sy0">=</span> prompt<span class="br0">&#40;</span><br />        <span class="st0">&quot;Your numbers are:<span class="es0">\n</span>&quot;</span> <span class="sy0">+</span> numbers.<span class="me1">join</span><span class="br0">&#40;</span><span class="st0">&quot; &quot;</span><span class="br0">&#41;</span> <span class="sy0">+</span><br />        <span class="st0">&quot;<span class="es0">\n</span>Enter expression. (use only + - * / and parens).<span class="es0">\n</span>&quot;</span><span class="sy0">,</span> <span class="sy0">+</span><span class="st0">&quot;'x' to exit.&quot;</span><span class="sy0">,</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">if</span> <span class="br0">&#40;</span>input <span class="sy0">===</span> <span class="st0">'x'</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">break</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span><br />    alert<span class="br0">&#40;</span>twentyfour<span class="br0">&#40;</span>numbers<span class="sy0">,</span> input<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /><span class="br0">&#125;</span><br />&#160;</pre>
<h2><span class="mw-headline" id="Julia"><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=38" title="Edit section: Julia">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This implementation, because it is based on the Julia parser and evaluator, allows the user to enter arbitrary infix expressions, including parentheses.  (These expressions are checked to ensure that they only include the allowed operations on integer literals.)
</p>
<pre class="text highlighted_source">validexpr(ex::Expr) = ex.head ==&#160;:call &amp;&amp; ex.args[1] in [:*,:/,:+,:-] &amp;&amp; all(validexpr, ex.args[2:end])<br />validexpr(ex::Int) = true<br />validexpr(ex::Any) = false<br />findnumbers(ex::Number) = Int[ex]<br />findnumbers(ex::Expr) = vcat(map(findnumbers, ex.args)...)<br />findnumbers(ex::Any) = Int[]<br />function twentyfour()<br />    digits = sort!(rand(1:9, 4))<br />    while true<br />        print(&quot;enter expression using $digits =&gt; &quot;)<br />        ex = parse(readline())<br />        try<br />            validexpr(ex) || error(&quot;only *, /, +, - of integers is allowed&quot;)<br />            nums = sort!(findnumbers(ex))<br />            nums == digits || error(&quot;expression $ex used numbers $nums&#160;!= $digits&quot;)<br />            val = eval(ex)<br />            val == 24 || error(&quot;expression $ex evaluated to $val, not 24&quot;)<br />            println(&quot;you won!&quot;)<br />            return<br />        catch e<br />            if isa(e, ErrorException)<br />                println(&quot;incorrect: &quot;, e.msg)<br />            else<br />                rethrow()<br />            end<br />        end<br />    end<br />end</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
julia&gt; twentyfour()
enter expression using [2,5,8,9] =&gt; 5 * 2 - 8 + 9
incorrect: expression (5 * 2 - 8) + 9 evaluated to 11, not 24
enter expression using [2,5,8,9] =&gt; 5 * 5 + 2 + 8 - 9
incorrect: expression (5 * 5 + 2 + 8) - 9 used numbers [2,5,5,8,9]&#160;!= [2,5,8,9]
enter expression using [2,5,8,9] =&gt; 8*2*2
incorrect: expression 8 * 2 * 2 used numbers [2,2,8]&#160;!= [2,5,8,9]
enter expression using [2,5,8,9] =&gt; (8 + 9) + (5 + 2)
you won!</pre>
<h2><span class="mw-headline" id="Kotlin"><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=39" title="Edit section: Kotlin">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">package game24<br />&#160;<br />import java.util.*<br />&#160;<br />internal object Game24 {<br />    fun run() {<br />        val r = Random()<br />        val digits = IntArray(4).map { r.nextInt(9) + 1 }<br />        println(&quot;Make 24 using these digits: $digits&quot;)<br />        print(&quot;&gt; &quot;)<br />&#160;<br />        val s = Stack&lt;Float&gt;()<br />        var total: Long = 0<br />        val cin = Scanner(System.`in`)<br />        for (c in cin.nextLine())<br />            when (c) {<br />                in '0'..'9' -&gt; {<br />                    val d = c - '0'<br />                    total += (1 shl (d * 5)).toLong()<br />                    s += d.toFloat()<br />                }<br />                else -&gt;<br />                    if (&quot;+/-*&quot;.indexOf(c)&#160;!= -1)<br />                        s += c.applyOperator(s.pop(), s.pop())<br />            }<br />&#160;<br />        when {<br />            tally(digits)&#160;!= total -&gt;<br />                print(&quot;Not the same digits. &quot;)<br />            s.peek().compareTo(target) == 0 -&gt;<br />                println(&quot;Correct!&quot;)<br />            else -&gt;<br />                print(&quot;Not correct.&quot;)<br />        }<br />    }<br />&#160;<br />    fun Char.applyOperator(a: Float, b: Float) = when (this) {<br />        '+' -&gt; a + b<br />        '-' -&gt; b - a<br />        '*' -&gt; a * b<br />        '/' -&gt; b / a<br />        else -&gt; Float.NaN<br />    }<br />&#160;<br />    fun tally(a: List&lt;Int&gt;): Long = a.reduce({ t, i -&gt; t + (1 shl (i * 5)) }).toLong()<br />&#160;<br />    private val target = 24<br />}<br />&#160;<br />fun main(args: Array&lt;String&gt;) = Game24.run()<br />&#160;</pre>
<h2><span class="mw-headline" id="Lasso"><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=40" title="Edit section: Lasso">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This solution requires web input from the user via a form of the expression. 
</p><p>On submit the expression is checked for valid chars, that the integers are valid and in the original array (which also takes care of non-duplicate integers), and that the integers are not in consecutive positions.
</p><p>If a valid expression it is evaluated, and the result and success state shown to the user.
</p>
<pre class="text highlighted_source">[<br />if(sys_listunboundmethods&#160;!&gt;&gt; 'randoms') =&gt; {<br />	define randoms()::array =&gt; {<br />		local(out = array)<br />		loop(4) =&gt; { #out-&gt;insert(math_random(9,1)) }<br />		return #out<br />	}<br />}<br />if(sys_listunboundmethods&#160;!&gt;&gt; 'checkvalid') =&gt; {<br />	define checkvalid(str::string, nums::array)::boolean =&gt; {<br />		local(chk = array('*','/','+','-','(',')',' '), chknums = array, lastintpos = -1, poscounter = 0)<br />		loop(9) =&gt; { #chk-&gt;insert(loop_count) }<br />		with s in #str-&gt;values do =&gt; {<br />			#poscounter++<br />			#chk&#160;!&gt;&gt; #s &amp;&amp; #chk&#160;!&gt;&gt; integer(#s)&#160;? return false<br />			integer(#s) &gt; 0 &amp;&amp; #lastintpos + 1 &gt;= #poscounter&#160;? return false<br />			integer(#s) &gt; 0&#160;? #chknums-&gt;insert(integer(#s))<br />			integer(#s) &gt; 0&#160;? #lastintpos = #poscounter<br />		}<br />		#chknums-&gt;size&#160;!= 4&#160;? return false<br />		#nums-&gt;sort<br />		#chknums-&gt;sort<br />		loop(4) =&gt; { #nums-&gt;get(loop_count)&#160;!= #chknums(loop_count)&#160;? return false }<br />		return true<br />	}<br />}<br />if(sys_listunboundmethods&#160;!&gt;&gt; 'executeexpr') =&gt; {<br />	define executeexpr(expr::string)::integer =&gt; {<br />		local(keep = string)<br />		with i in #expr-&gt;values do =&gt; {<br />			if(array('*','/','+','-','(',')') &gt;&gt; #i) =&gt; {<br />				#keep-&gt;append(#i)<br />			else<br />				integer(#i) &gt; 0&#160;? #keep-&gt;append(decimal(#i))<br />			}<br />		}<br />		return integer(sourcefile('['+#keep+']','24game',true,true)-&gt;invoke)<br />	}<br />}<br />&#160;<br />local(numbers = array, exprsafe = true, exprcorrect = false, exprresult = 0)<br />if(web_request-&gt;param('nums')-&gt;asString-&gt;size) =&gt; {<br />	with n in web_request-&gt;param('nums')-&gt;asString-&gt;split(',') do =&gt; { #numbers-&gt;insert(integer(#n-&gt;trim&amp;)) }<br />}<br />#numbers-&gt;size&#160;!= 4&#160;? #numbers = randoms()<br />if(web_request-&gt;param('nums')-&gt;asString-&gt;size) =&gt; {<br />	#exprsafe = checkvalid(web_request-&gt;param('expr')-&gt;asString,#numbers)<br />	if(#exprsafe) =&gt; {<br />		#exprresult = executeexpr(web_request-&gt;param('expr')-&gt;asString)<br />		#exprresult == 24&#160;? #exprcorrect = true<br />	}<br />}<br />&#160;<br />]&lt;h1&gt;24 Game&lt;/h1&gt;<br />&lt;p&gt;&lt;b&gt;Rules:&lt;/b&gt;&lt;br&gt;<br />Enter an expression that evaluates to 24&lt;/p&gt;<br />&lt;ul&gt;<br />&lt;li&gt;Only multiplication, division, addition, and subtraction operators/functions are allowed.&lt;/li&gt;<br />&lt;li&gt;Brackets are allowed.&lt;/li&gt;<br />&lt;li&gt;Forming multiple digit numbers from the supplied digits is disallowed. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).&lt;/li&gt;<br />&lt;li&gt;The order of the digits when given does not have to be preserved.&lt;/li&gt;<br />&lt;/ul&gt;<br />&#160;<br />&lt;h2&gt;Numbers&lt;/h2&gt;<br />&lt;p&gt;[#numbers-&gt;join(', ')] (&lt;a href=&quot;?&quot;&gt;Reload&lt;/a&gt;)&lt;/p&gt;<br />[!#exprsafe&#160;? '&lt;p&gt;Please provide a valid expression&lt;/p&gt;']<br />&lt;form&gt;&lt;input type=&quot;hidden&quot; value=&quot;[#numbers-&gt;join(',')]&quot; name=&quot;nums&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;expr&quot; value=&quot;[web_request-&gt;param('expr')-&gt;asString]&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot;&gt;&lt;/form&gt;<br />[if(#exprsafe)]<br />&lt;p&gt;Result: &lt;b&gt;[#exprresult]&lt;/b&gt; [#exprcorrect&#160;? 'is CORRECT!' | 'is incorrect']&lt;/p&gt;<br />[/if]</pre>
<h2><span class="mw-headline" id="Liberty_BASIC"><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=41" title="Edit section: Liberty BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lb highlighted_source"><span class="kw1">dim</span> d<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br /><span class="kw1">dim</span> chk<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br /><span class="kw1">print</span> <span class="st0">&quot;The 24 Game&quot;</span><br /><span class="kw1">print</span><br /><span class="kw1">print</span> <span class="st0">&quot;Given four digits and using just the +, -, *, and / operators; and the&quot;</span><br /><span class="kw1">print</span> <span class="st0">&quot;possible use of brackets, (), enter an expression that equates to 24.&quot;</span><br />&#160;<br /><span class="kw1">do</span><br />    d$<span class="sy0">=</span><span class="st0">&quot;&quot;</span><br />    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><br />        d<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">=</span><span class="kw2">int</span><span class="br0">&#40;</span><span class="kw2">rnd</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">*</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">1</span>    <span class="co1">'1..9</span><br />        chk<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="sy0">=</span>d<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br />        d$<span class="sy0">=</span>d$;d<span class="br0">&#40;</span>i<span class="br0">&#41;</span>  <span class="co1">'valid digits, to check with Instr</span><br />    <span class="kw1">next</span><br />&#160;<br />    <span class="kw1">print</span><br />    <span class="kw1">print</span> <span class="st0">&quot;These are your four digits: &quot;</span>;<br />    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><br />        <span class="kw1">print</span> d<span class="br0">&#40;</span>i<span class="br0">&#41;</span>;<span class="kw2">left$</span><span class="br0">&#40;</span><span class="st0">&quot;,&quot;</span><span class="sy0">,</span>i<span class="sy0">&lt;&gt;</span><span class="nu0">4</span><span class="br0">&#41;</span>;<br />    <span class="kw1">next</span><br />    <span class="kw1">print</span><br />&#160;<br />    <span class="kw1">Print</span> <span class="st0">&quot;Enter expression:&quot;</span><br />    <span class="kw1">Input</span> <span class="st0">&quot;24 = &quot;</span>;expr$<br />    <span class="co1">'check expr$ for validity</span><br />&#160;<br />    <span class="co1">'check right digits used</span><br />    failed <span class="sy0">=</span> <span class="nu0">0</span><br />    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw2">len</span><span class="br0">&#40;</span>expr$<span class="br0">&#41;</span><br />        c$<span class="sy0">=</span><span class="kw2">mid$</span><span class="br0">&#40;</span>expr$<span class="sy0">,</span>i<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><br />        <span class="kw1">if</span> <span class="kw2">instr</span><span class="br0">&#40;</span><span class="st0">&quot;123456789&quot;</span><span class="sy0">,</span> c$<span class="br0">&#41;</span><span class="sy0">&lt;&gt;</span><span class="nu0">0</span> <span class="kw1">then</span> <span class="co1">'digit</span><br />            <span class="kw1">if</span> <span class="kw2">instr</span><span class="br0">&#40;</span>d$<span class="sy0">,</span> c$<span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span> <span class="kw1">then</span> failed <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">:</span> <span class="kw1">exit</span> <span class="kw1">for</span><br />            <span class="kw1">if</span> i<span class="sy0">&gt;</span><span class="nu0">1</span> <span class="kw1">and</span> <span class="kw2">instr</span><span class="br0">&#40;</span><span class="st0">&quot;123456789&quot;</span><span class="sy0">,</span> <span class="kw2">mid$</span><span class="br0">&#40;</span>expr$<span class="sy0">,</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">&lt;&gt;</span><span class="nu0">0</span> <span class="kw1">then</span> failed <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">:</span> <span class="kw1">exit</span> <span class="kw1">for</span><br />            <span class="kw1">for</span> j <span class="sy0">=</span><span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><br />                <span class="kw1">if</span> chk<span class="br0">&#40;</span>j<span class="br0">&#41;</span><span class="sy0">=</span><span class="kw2">val</span><span class="br0">&#40;</span>c$<span class="br0">&#41;</span> <span class="kw1">then</span> chk<span class="br0">&#40;</span>j<span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">:</span> <span class="kw1">exit</span> <span class="kw1">for</span><br />            <span class="kw1">next</span><br />        <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="kw1">next</span><br />    <span class="kw1">if</span> failed<span class="sy0">=</span><span class="nu0">1</span> <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Wrong digit (&quot;</span>;c$;<span class="st0">&quot;)&quot;</span><br />        <span class="kw1">goto</span> <span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br />    <span class="kw1">if</span> failed<span class="sy0">=</span><span class="nu0">2</span> <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Multiple digit numbers is disallowed.&quot;</span><br />        <span class="kw1">goto</span> <span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br />    <span class="co1">'check all digits used</span><br />    <span class="kw1">if</span> chk<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">+</span> chk<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy0">+</span> chk<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">+</span> chk<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">&lt;&gt;</span><span class="nu0">0</span> <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Not all digits used&quot;</span><br />        <span class="kw1">goto</span> <span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />&#160;<br />    <span class="co1">'check valid operations</span><br />    failed <span class="sy0">=</span> <span class="nu0">0</span><br />    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw2">len</span><span class="br0">&#40;</span>expr$<span class="br0">&#41;</span><br />        c$<span class="sy0">=</span><span class="kw2">mid$</span><span class="br0">&#40;</span>expr$<span class="sy0">,</span>i<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span><br />        <span class="kw1">if</span> <span class="kw2">instr</span><span class="br0">&#40;</span><span class="st0">&quot;+-*/()&quot;</span><span class="sy0">+</span>d$<span class="sy0">,</span> c$<span class="br0">&#41;</span><span class="sy0">=</span><span class="nu0">0</span> <span class="kw1">then</span> failed <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">:</span> <span class="kw1">exit</span> <span class="kw1">for</span><br />    <span class="kw1">next</span><br />    <span class="kw1">if</span> failed <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Wrong operation (&quot;</span>;c$;<span class="st0">&quot;)&quot;</span><br />        <span class="kw1">goto</span> <span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="co1">'some errors (like brackets) trapped by error handler</span><br />    <span class="kw3">Err$</span><span class="sy0">=</span><span class="st0">&quot;&quot;</span><br />    res<span class="sy0">=</span>evalWithErrCheck<span class="br0">&#40;</span>expr$<span class="br0">&#41;</span><br />    <span class="kw1">if</span> <span class="kw3">Err</span>$<span class="sy0">&lt;&gt;</span><span class="st0">&quot;&quot;</span> <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Error in expression&quot;</span><br />        <span class="kw1">goto</span> <span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br />    <span class="kw1">if</span> res <span class="sy0">=</span> <span class="nu0">24</span> <span class="kw1">then</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Correct!&quot;</span><br />    <span class="kw1">else</span><br />        <span class="kw1">print</span> <span class="st0">&quot;Wrong! (you got &quot;</span>;res&#160;;<span class="st0">&quot;)&quot;</span><br />    <span class="kw1">end</span> <span class="kw1">if</span><br /><span class="br0">&#91;</span>fail<span class="br0">&#93;</span><br />    <span class="kw1">Input</span> <span class="st0">&quot;Play again (y/n)? &quot;</span>; ans$<br /><span class="kw1">loop</span> <span class="kw1">while</span> ans$<span class="sy0">=</span><span class="st0">&quot;y&quot;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">function</span> evalWithErrCheck<span class="br0">&#40;</span>expr$<span class="br0">&#41;</span><br />    <span class="kw1">on</span> <span class="kw1">error</span> <span class="kw1">goto</span> <span class="br0">&#91;</span>handler<span class="br0">&#93;</span><br />    evalWithErrCheck<span class="sy0">=</span><span class="kw2">eval</span><span class="br0">&#40;</span>expr$<span class="br0">&#41;</span><br />    <span class="kw1">exit</span> <span class="kw1">function</span><br /><span class="br0">&#91;</span>handler<span class="br0">&#93;</span><br /><span class="kw1">end</span> <span class="kw1">function</span></pre>
<h2><span class="mw-headline" id="LiveCode"><a href="/wiki/Category:LiveCode" title="Category:LiveCode">LiveCode</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=42" title="Edit section: LiveCode">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>GUI version
</p><p>1. Open livecode and create a new mainstack
</p><p>2. Create 3 fields and 1 button
</p><p>3. label fields "YourNumbersField", "EvalField" and "AnswerField"
</p><p>4. label button "StartButton"
</p>
5. Add the following to the code of "StartButton"<pre class="text highlighted_source">on mouseUp<br />    put empty into fld &quot;EvalField&quot;<br />    put empty into fld &quot;AnswerField&quot;<br />    put random(9) &amp; comma &amp; random(9) &amp; comma &amp; random(9) &amp; comma &amp; random(9) into fld &quot;YourNumbersField&quot;<br />end mouseUp</pre>
6. Add the following to the code of field "EvalField"<pre class="text highlighted_source">&#160;<br />on keyDown k<br />    local ops, nums, allowedKeys, numsCopy, expr<br />    put &quot;+,-,/,*,(,)&quot; into ops<br />    put the text of fld &quot;YourNumbersField&quot; into nums<br />    put the text of fld &quot;EvalField&quot; into expr<br />    if matchText(expr &amp; k,&quot;\d\d&quot;) then <br />        answer &quot;You can't enter 2 digits together&quot;<br />        exit keyDown<br />    end if<br />    repeat with n = 1 to the number of chars of expr<br />        if offset(char n of expr, nums) &gt; 0 then<br />            delete char offset(char n of expr, nums) of nums<br />        end if<br />    end repeat<br />    put ops &amp; comma &amp; nums into allowedKeys<br />    if k is among the items of allowedKeys then<br />        put k after expr<br />        delete char offset(k, nums) of nums<br />        replace comma with empty in nums<br />        try<br />            put the value of merge(&quot;[[expr]]&quot;) into fld &quot;AnswerField&quot;<br />            if the value of fld &quot;AnswerField&quot; is 24 and nums is empty then<br />                answer &quot;You win!&quot;<br />            end if<br />        end try<br />        pass keyDown<br />    else<br />        exit keyDown<br />    end if<br />end keyDown</pre>
<h2><span class="mw-headline" id="Locomotive_Basic"><a href="/wiki/Category:Locomotive_Basic" title="Category:Locomotive Basic">Locomotive Basic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=43" title="Edit section: Locomotive Basic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="locobasic highlighted_source"><span class="nu0">10</span> <span class="kw1">CLS</span>:<span class="kw1">RANDOMIZE</span> <span class="kw1">TIME</span><br /><span class="nu0">20</span> <span class="kw1">PRINT</span> <span class="st0">&quot;The 24 Game&quot;</span><br /><span class="nu0">30</span> <span class="kw1">PRINT</span> <span class="st0">&quot;===========&quot;</span>:<span class="kw1">PRINT</span><br /><span class="nu0">40</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Enter an arithmetic expression&quot;</span><br /><span class="nu0">50</span> <span class="kw1">PRINT</span> <span class="st0">&quot;that evaluates to 24,&quot;</span><br /><span class="nu0">60</span> <span class="kw1">PRINT</span> <span class="st0">&quot;using only the provided digits&quot;</span><br /><span class="nu0">70</span> <span class="kw1">PRINT</span> <span class="st0">&quot;and +, -, *, /, (, ).&quot;</span><br /><span class="nu0">80</span> <span class="kw1">PRINT</span> <span class="st0">&quot;(Just hit Return for new digits.)&quot;</span><br /><span class="nu0">90</span> <span class="co1">' create new digits</span><br /><span class="nu0">100</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">4</span>:a<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=<span class="kw2">INT</span><span class="br0">&#40;</span><span class="kw2">RND</span>*<span class="nu0">9</span><span class="br0">&#41;</span>+<span class="nu0">1</span>:<span class="kw1">NEXT</span><br /><span class="nu0">110</span> <span class="kw1">PRINT</span><br /><span class="nu0">120</span> <span class="kw1">PRINT</span> <span class="st0">&quot;The digits are&quot;</span>;a<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>;a<span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span>;a<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>;a<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br /><span class="nu0">130</span> <span class="kw1">PRINT</span><br /><span class="nu0">140</span> <span class="co1">' user enters solution</span><br /><span class="nu0">150</span> <span class="kw1">INPUT</span> <span class="st0">&quot;Your solution&quot;</span>;s$<br /><span class="nu0">160</span> <span class="kw1">IF</span> s$=<span class="st0">&quot;&quot;</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Creating new digits...&quot;</span>:<span class="kw1">GOTO</span> <span class="nu0">100</span><br /><span class="nu0">170</span> <span class="kw1">GOTO</span> <span class="nu0">300</span><br /><span class="nu0">180</span> <span class="co1">' a little hack to create something like an EVAL function</span><br /><span class="nu0">190</span> <span class="kw1">OPENOUT</span> <span class="st0">&quot;exp.bas&quot;</span><br /><span class="nu0">200</span> <span class="kw1">PRINT</span> #<span class="nu0">9</span>,<span class="st0">&quot;1000 x=&quot;</span>s$<span class="st0">&quot;:return&quot;</span><br /><span class="nu0">210</span> <span class="kw1">CLOSEOUT</span><br /><span class="nu0">220</span> <span class="kw1">CHAIN</span> <span class="kw1">MERGE</span> <span class="st0">&quot;exp&quot;</span>,<span class="nu0">240</span><br /><span class="nu0">230</span> <span class="co1">' now evaluate the expression</span><br /><span class="nu0">240</span> <span class="kw1">ON</span> <span class="kw1">ERROR</span> <span class="kw1">GOTO</span> <span class="nu0">530</span><br /><span class="nu0">250</span> <span class="kw1">GOSUB</span> <span class="nu0">1000</span><br /><span class="nu0">260</span> <span class="kw1">IF</span> x=<span class="nu0">24</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Well done!&quot;</span>:<span class="kw1">END</span><br /><span class="nu0">270</span> <span class="kw1">PRINT</span> <span class="st0">&quot;No, this evaluates to&quot;</span>x:<span class="kw1">PRINT</span> <span class="st0">&quot;Please try again.&quot;</span><br /><span class="nu0">280</span> <span class="kw1">GOTO</span> <span class="nu0">150</span><br /><span class="nu0">290</span> <span class="co1">' check input for correctness</span><br /><span class="nu0">300</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>s$<span class="br0">&#41;</span><br /><span class="nu0">310</span> q=<span class="kw2">ASC</span><span class="br0">&#40;</span><span class="kw2">MID</span>$<span class="br0">&#40;</span>s$,i,<span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br /><span class="nu0">320</span> <span class="kw1">IF</span> q=<span class="nu0">32</span> <span class="kw1">OR</span> <span class="br0">&#40;</span>q&gt;<span class="nu0">39</span> <span class="kw1">AND</span> q&lt;<span class="nu0">44</span><span class="br0">&#41;</span> <span class="kw1">OR</span> q=<span class="nu0">45</span> <span class="kw1">OR</span> <span class="br0">&#40;</span>q&gt;<span class="nu0">46</span> <span class="kw1">AND</span> q&lt;<span class="nu0">58</span><span class="br0">&#41;</span> <span class="kw1">THEN</span> <span class="kw1">NEXT</span><br /><span class="nu0">330</span> <span class="kw1">IF</span> i-<span class="nu0">1</span>=<span class="kw2">LEN</span><span class="br0">&#40;</span>s$<span class="br0">&#41;</span> <span class="kw1">THEN</span> <span class="nu0">370</span><br /><span class="nu0">340</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Bad character in expression:&quot;</span><span class="kw2">CHR</span>$<span class="br0">&#40;</span>q<span class="br0">&#41;</span><br /><span class="nu0">350</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Try again&quot;</span>:<span class="kw1">GOTO</span> <span class="nu0">150</span><br /><span class="nu0">360</span> <span class="co1">' new numbers in solution?</span><br /><span class="nu0">370</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>s$<span class="br0">&#41;</span>-<span class="nu0">1</span><br /><span class="nu0">380</span> q=<span class="kw2">ASC</span><span class="br0">&#40;</span><span class="kw2">MID</span>$<span class="br0">&#40;</span>s$,i,<span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span>:p=<span class="kw2">ASC</span><span class="br0">&#40;</span><span class="kw2">MID</span>$<span class="br0">&#40;</span>s$,i+<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br /><span class="nu0">390</span> <span class="kw1">IF</span> q&gt;<span class="nu0">47</span> <span class="kw1">AND</span> q&lt;<span class="nu0">58</span> <span class="kw1">AND</span> p&gt;<span class="nu0">47</span> <span class="kw1">AND</span> p&lt;<span class="nu0">58</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="st0">&quot;No forming of new numbers, please!&quot;</span>:<span class="kw1">GOTO</span> <span class="nu0">150</span><br /><span class="nu0">400</span> <span class="kw1">NEXT</span><br /><span class="nu0">410</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">9</span>:orig<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=<span class="nu0">0</span>:guess<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=<span class="nu0">0</span>:<span class="kw1">NEXT</span><br /><span class="nu0">420</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">4</span>:orig<span class="br0">&#40;</span>a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span>=orig<span class="br0">&#40;</span>a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span>+<span class="nu0">1</span>:<span class="kw1">NEXT</span><br /><span class="nu0">430</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw2">LEN</span><span class="br0">&#40;</span>s$<span class="br0">&#41;</span><br /><span class="nu0">440</span> v$=<span class="kw2">MID</span>$<span class="br0">&#40;</span>s$,i,<span class="nu0">1</span><span class="br0">&#41;</span><br /><span class="nu0">450</span> va=<span class="kw2">ASC</span><span class="br0">&#40;</span>v$<span class="br0">&#41;</span>-<span class="nu0">48</span><br /><span class="nu0">460</span> <span class="kw1">IF</span> va&gt;<span class="nu0">0</span> <span class="kw1">AND</span> va&lt;<span class="nu0">10</span> <span class="kw1">THEN</span> guess<span class="br0">&#40;</span>va<span class="br0">&#41;</span>=guess<span class="br0">&#40;</span>va<span class="br0">&#41;</span>+<span class="nu0">1</span><br /><span class="nu0">470</span> <span class="kw1">NEXT</span><br /><span class="nu0">480</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">9</span><br /><span class="nu0">490</span> <span class="kw1">IF</span> guess<span class="br0">&#40;</span>i<span class="br0">&#41;</span>&lt;&gt;orig<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Only use all the provided digits!&quot;</span>:<span class="kw1">GOTO</span> <span class="nu0">150</span><br /><span class="nu0">500</span> <span class="kw1">NEXT</span><br /><span class="nu0">510</span> <span class="kw1">GOTO</span> <span class="nu0">190</span><br /><span class="nu0">520</span> <span class="co1">' syntax error, e.g. non-matching parentheses</span><br /><span class="nu0">530</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Error in expression, please try again.&quot;</span><br /><span class="nu0">540</span> <span class="kw1">RESUME</span> <span class="nu0">150</span></pre>
<p>Note: The program needs a writable disk in the active disk drive.
</p>
<h2><span class="mw-headline" id="Logo"><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=44" title="Edit section: Logo">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/UCB_Logo" title="UCB Logo">UCB_Logo</a> version 5.5</div>
<pre class="text highlighted_source">; useful constants<br />make &quot;false 1=0<br />make &quot;true  1=1<br />make &quot;lf char 10<br />make &quot;sp char 32<br />&#160;<br />; non-digits legal in expression<br />make &quot;operators (lput sp [+ - * / \( \)])<br />&#160;<br />; display help message<br />to show_help&#160;:digits<br />  type lf<br />  print sentence quoted [Using only these digits:]&#160;:digits <br />  print sentence quoted [and these operators:] [* / + -]<br />  print quoted [\(and parentheses as needed\),]<br />  print quoted [enter an arithmetic expression <br />     which evaluates to exactly 24.]<br />  type lf<br />  print quoted [Enter \&quot;!\&quot; to get fresh numbers.]<br />  print quoted [Enter \&quot;q\&quot; to quit.]<br />  type lf<br />end<br />&#160;<br />make &quot;digits []<br />make &quot;done false<br />until [done] [<br />&#160;<br />  if empty? digits [<br />    make &quot;digits (map [(random 9) + 1] [1 2 3 4])<br />  ]<br />&#160;<br />  (type &quot;Solution sp &quot;for sp digits &quot;? sp )<br />  make &quot;expression readrawline<br />&#160;<br />  ifelse [expression = &quot;?] [<br />&#160;<br />    show_help digits<br />&#160;<br />  ] [ifelse [expression = &quot;q] [<br />&#160;<br />    print &quot;Bye!<br />    make &quot;done true<br />&#160;<br />  ] [ifelse [expression = &quot;!] [<br />&#160;<br />    make &quot;digits []<br />&#160;<br />  ] [<br />    make &quot;exprchars ` expression<br />    make &quot;allowed (sentence digits operators)<br />&#160;<br />    ifelse (member? false (map [[c] member? c allowed] exprchars)) [<br />      (print quoted [Illegal character in input.])<br />    ] [<br />      catch &quot;error [<br />        make &quot;syntax_error true<br />        make &quot;testval (run expression)<br />        make &quot;syntax_error false<br />      ]<br />      ifelse syntax_error [<br />        (print quoted [Invalid expression.])<br />      ] [<br />        ifelse (testval = 24) [<br />          print quoted [You win!]<br />          make &quot;done true<br />        ] [<br />          (print (sentence <br />            quoted [Incorrect \(got ] testval quoted [instead of 24\).]))<br />        ]<br />      ]<br />    ]<br />  ]]]<br />] <br />bye</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
Solution for 3 8 9 5?&#160;?

Using only these digits: 3 8 9 5
and these operators: * / + -
(and parentheses as needed),
enter an arithmetic expression which evaluates to exactly 24.

Enter &quot;!&quot; to get fresh numbers.
Enter &quot;q&quot; to quit.

Solution for 3 8 9 5?&#160;!
Solution for 9 2 8 5? 9+2+8+5
You win!
</pre>
<h2><span class="mw-headline" id="Lua"><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=45" title="Edit section: Lua">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lua highlighted_source">&#160;<br /><span class="kw1">local</span> <span class="kw1">function</span> help<span class="br0">&#40;</span><span class="br0">&#41;</span><br />	<span class="kw3">print</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><br /> The <span class="nu0">24</span> Game<br />&#160;<br /> Given any four digits <span class="kw2">in</span> the range <span class="nu0">1</span> to <span class="nu0">9</span><span class="sy0">,</span> which may have repetitions<span class="sy0">,</span><br /> Using just the <span class="sy0">+,</span> <span class="sy0">-,</span> <span class="sy0">*,</span> <span class="kw2">and</span> <span class="sy0">/</span> operators<span class="sy0">;</span> <span class="kw2">and</span> the possible use of<br /> brackets<span class="sy0">,</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> show how to make an answer of <span class="nu0">24</span><span class="sy0">.</span><br />&#160;<br /> An answer of <span class="st0">&quot;q&quot;</span> will quit the game<span class="sy0">.</span><br /> An answer of <span class="st0">&quot;!&quot;</span> will generate a new set of four digits<span class="sy0">.</span><br />&#160;<br /> Note<span class="sy0">:</span> you cannot form multiple digit numbers from the supplied digits<span class="sy0">,</span><br /> so an answer of <span class="nu0">12</span><span class="sy0">+</span><span class="nu0">12</span> when given <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="kw2">and</span> <span class="nu0">1</span> would <span class="kw2">not</span> be allowed<span class="sy0">.</span><br />&#160;<br /> <span class="br0">&#93;</span><span class="br0">&#93;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">local</span> <span class="kw1">function</span> generate<span class="br0">&#40;</span>n<span class="br0">&#41;</span><br />	result <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><br />	<span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>n <span class="kw1">do</span><br />		result<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="kw3">math.random</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">&#41;</span><br />	<span class="kw1">end</span><br />	<span class="kw1">return</span> result<br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">local</span> <span class="kw1">function</span> check<span class="br0">&#40;</span>answer<span class="sy0">,</span> digits<span class="br0">&#41;</span><br />	<span class="kw1">local</span> adig <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><br />	<span class="kw1">local</span> ddig <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><br />	<span class="kw1">local</span> index<br />	<span class="kw1">local</span> lastWasDigit <span class="sy0">=</span> <span class="kw4">false</span><br />	<span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span> <span class="kw1">do</span> adig<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span> ddig<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">end</span><br />	allowed <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#91;</span><span class="st0">'('</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">')'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">' '</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'+'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'-'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'*'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'/'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'<span class="es1">\t</span>'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'1'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'2'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'3'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'4'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'5'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'6'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'7'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'8'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="st0">'9'</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="kw4">true</span><span class="br0">&#125;</span><br />	<span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span><span class="kw3">string.len</span><span class="br0">&#40;</span>answer<span class="br0">&#41;</span> <span class="kw1">do</span><br />		<span class="kw1">if</span> <span class="kw2">not</span> allowed<span class="br0">&#91;</span><span class="kw3">string.sub</span><span class="br0">&#40;</span>answer<span class="sy0">,</span>i<span class="sy0">,</span>i<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="kw1">then</span><br />			<span class="kw1">return</span> <span class="kw4">false</span><br />		<span class="kw1">end</span><br />		index <span class="sy0">=</span> <span class="kw3">string.byte</span><span class="br0">&#40;</span>answer<span class="sy0">,</span>i<span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">48</span><br />		<span class="kw1">if</span> index <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw2">and</span> index <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="kw1">then</span><br />			<span class="kw1">if</span> lastWasDigit <span class="kw1">then</span><br />				<span class="kw1">return</span> <span class="kw4">false</span><br />			<span class="kw1">end</span><br />			lastWasDigit <span class="sy0">=</span> <span class="kw4">true</span><br />			adig<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">=</span> adig<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">+</span> <span class="nu0">1</span><br />		<span class="kw1">else</span><br />			lastWasDigit <span class="sy0">=</span> <span class="kw4">false</span><br />		<span class="kw1">end</span><br />	<span class="kw1">end</span><br />	<span class="kw1">for</span> i<span class="sy0">,</span>digit <span class="kw2">in</span> <span class="kw3">next</span><span class="sy0">,</span>digits <span class="kw1">do</span><br />		ddig<span class="br0">&#91;</span>digit<span class="br0">&#93;</span> <span class="sy0">=</span> ddig<span class="br0">&#91;</span>digit<span class="br0">&#93;</span><span class="sy0">+</span><span class="nu0">1</span><br />	<span class="kw1">end</span><br />	<span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span> <span class="kw1">do</span><br />		<span class="kw1">if</span> adig<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">~=</span> ddig<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">then</span><br />			<span class="kw1">return</span> <span class="kw4">false</span><br />		<span class="kw1">end</span><br />	<span class="kw1">end</span><br />	<span class="kw1">return</span> <span class="kw3">loadstring</span><span class="br0">&#40;</span><span class="st0">'return '</span><span class="sy0">..</span>answer<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br /><span class="kw1">end</span><br />&#160;<br /><span class="kw1">local</span> <span class="kw1">function</span> game24<span class="br0">&#40;</span><span class="br0">&#41;</span><br />	help<span class="br0">&#40;</span><span class="br0">&#41;</span><br />	<span class="kw3">math.randomseed</span><span class="br0">&#40;</span><span class="kw3">os.time</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />	<span class="kw3">math.random</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />	<span class="kw1">local</span> digits <span class="sy0">=</span> generate<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br />	<span class="kw1">local</span> trial <span class="sy0">=</span> <span class="nu0">0</span><br />	<span class="kw1">local</span> answer <span class="sy0">=</span> <span class="nu0">0</span><br />	<span class="kw1">local</span> ans <span class="sy0">=</span> <span class="kw4">false</span><br />	<span class="kw3">io.write</span> <span class="st0">'Your four digits:'</span><br />	<span class="kw1">for</span> i<span class="sy0">,</span>digit <span class="kw2">in</span> <span class="kw3">next</span><span class="sy0">,</span>digits <span class="kw1">do</span><br />		<span class="kw3">io.write</span> <span class="br0">&#40;</span><span class="st0">' '</span> <span class="sy0">..</span> digit<span class="br0">&#41;</span><br />	<span class="kw1">end</span><br />	<span class="kw3">print</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />	<span class="kw1">while</span> ans <span class="sy0">~=</span> <span class="nu0">24</span> <span class="kw1">do</span><br />		trial <span class="sy0">=</span> trial <span class="sy0">+</span> <span class="nu0">1</span><br />		<span class="kw3">io.write</span><span class="br0">&#40;</span><span class="st0">&quot;Expression &quot;</span><span class="sy0">..</span>trial<span class="sy0">..</span><span class="st0">&quot;: &quot;</span><span class="br0">&#41;</span><br />		answer <span class="sy0">=</span> <span class="kw3">io.read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />		<span class="kw1">if</span> <span class="kw3">string.lower</span><span class="br0">&#40;</span>answer<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'q'</span> <span class="kw1">then</span><br />			<span class="kw1">break</span><br />		<span class="kw1">end</span><br />		<span class="kw1">if</span> answer <span class="sy0">==</span> <span class="st0">'!'</span> <span class="kw1">then</span><br />			digits <span class="sy0">=</span> generate<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><br />			<span class="kw3">io.write</span> <span class="br0">&#40;</span><span class="st0">&quot;New digits:&quot;</span><span class="br0">&#41;</span><br />			<span class="kw1">for</span> i<span class="sy0">,</span>digit <span class="kw2">in</span> <span class="kw3">next</span><span class="sy0">,</span>digits <span class="kw1">do</span><br />				<span class="kw3">io.write</span> <span class="br0">&#40;</span><span class="st0">' '</span> <span class="sy0">..</span> digit<span class="br0">&#41;</span><br />			<span class="kw1">end</span><br />			<span class="kw3">print</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />		<span class="kw1">else</span><br />			ans <span class="sy0">=</span> check<span class="br0">&#40;</span>answer<span class="sy0">,</span>digits<span class="br0">&#41;</span><br />			<span class="kw1">if</span> ans <span class="sy0">==</span> <span class="kw4">false</span> <span class="kw1">then</span><br />				<span class="kw3">print</span> <span class="br0">&#40;</span><span class="st0">'The input '</span><span class="sy0">..</span> answer <span class="sy0">..</span><span class="st0">' was wonky!'</span><span class="br0">&#41;</span><br />			<span class="kw1">else</span><br />				<span class="kw3">print</span> <span class="br0">&#40;</span><span class="st0">' = '</span><span class="sy0">..</span> ans<span class="br0">&#41;</span><br />				<span class="kw1">if</span> ans <span class="sy0">==</span> <span class="nu0">24</span> <span class="kw1">then</span><br />					<span class="kw3">print</span> <span class="br0">&#40;</span><span class="st0">&quot;Thats right!&quot;</span><span class="br0">&#41;</span><br />				<span class="kw1">end</span><br />			<span class="kw1">end</span><br />		<span class="kw1">end</span><br />	<span class="kw1">end</span><br /><span class="kw1">end</span><br />game24<span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
<p>Alternately, using the <code>lpeg.re</code> module:
</p>
<pre class="lua highlighted_source"><span class="kw1">function</span> twentyfour<span class="br0">&#40;</span><span class="br0">&#41;</span><br />   <span class="kw3">print</span> <span class="br0">&#91;</span><span class="br0">&#91;</span><br /> The <span class="nu0">24</span> Game<br />&#160;<br /> Given any four digits <span class="kw2">in</span> the range <span class="nu0">1</span> to <span class="nu0">9</span><span class="sy0">,</span> which may have repetitions<span class="sy0">,</span><br /> Using just the <span class="sy0">+,</span> <span class="sy0">-,</span> <span class="sy0">*,</span> <span class="kw2">and</span> <span class="sy0">/</span> operators<span class="sy0">;</span> <span class="kw2">and</span> the possible use of<br /> brackets<span class="sy0">,</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> show how to make an answer of <span class="nu0">24</span><span class="sy0">.</span><br />&#160;<br /> An answer of <span class="st0">&quot;q&quot;</span> will quit the game<span class="sy0">.</span><br /> An answer of <span class="st0">&quot;!&quot;</span> will generate a new set of four digits<span class="sy0">.</span><br />&#160;<br /> Note<span class="sy0">:</span> you cannot form multiple digit numbers from the supplied digits<span class="sy0">,</span><br /> so an answer of <span class="nu0">12</span><span class="sy0">+</span><span class="nu0">12</span> when given <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="kw2">and</span> <span class="nu0">1</span> would <span class="kw2">not</span> be allowed<span class="sy0">.</span><br />&#160;<br /> <span class="br0">&#93;</span><span class="br0">&#93;</span><br />   expr <span class="sy0">=</span> re<span class="sy0">.</span>compile<span class="br0">&#91;</span><span class="br0">&#91;</span>   <span class="co1">--matches properly formatted infix expressions and returns all numerals as captures</span><br />         expr <span class="sy0">&lt;-</span> <span class="br0">&#40;</span>!<span class="sy0">.</span><span class="br0">&#41;</span> <span class="sy0">/</span> <span class="br0">&#40;</span><span class="sy0">&lt;</span>paren<span class="sy0">&gt;</span> <span class="sy0">/</span> <span class="sy0">&lt;</span>number<span class="sy0">&gt;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="sy0">&lt;</span>ws<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>oper<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>ws<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>expr<span class="sy0">&gt;</span><span class="br0">&#41;</span>?<br />         number <span class="sy0">&lt;-</span> <span class="br0">&#123;</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="sy0">-</span><span class="nu0">9</span><span class="br0">&#93;</span><span class="br0">&#125;</span><br />         ws <span class="sy0">&lt;-</span> <span class="st0">&quot; &quot;</span><span class="sy0">*</span><br />         oper <span class="sy0">&lt;-</span> <span class="br0">&#91;</span><span class="sy0">-+/*</span><span class="br0">&#93;</span><br />         paren <span class="sy0">&lt;-</span> <span class="st0">&quot;(&quot;</span> <span class="sy0">&lt;</span>ws<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>expr<span class="sy0">&gt;</span> <span class="sy0">&lt;</span>ws<span class="sy0">&gt;</span> <span class="st0">&quot;)&quot;</span>   <span class="br0">&#93;</span><span class="br0">&#93;</span><br />   <span class="kw1">local</span> val_t <span class="sy0">=</span> <span class="br0">&#123;</span><span class="kw3">math.random</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw3">math.random</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw3">math.random</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw3">math.random</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#125;</span><br />   <span class="kw3">table.sort</span><span class="br0">&#40;</span>val_t<span class="br0">&#41;</span><br />   <span class="kw3">print</span><span class="br0">&#40;</span><span class="st0">&quot;the digits are &quot;</span> <span class="sy0">..</span> <span class="kw3">table.concat</span><span class="br0">&#40;</span>val_t<span class="sy0">,</span> <span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />   <span class="kw1">local</span> ex <span class="sy0">=</span> <span class="kw3">io.read</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />   a<span class="sy0">,</span> b<span class="sy0">,</span> c<span class="sy0">,</span> d<span class="sy0">,</span> e <span class="sy0">=</span> expr<span class="sy0">:</span>match<span class="br0">&#40;</span>ex<span class="br0">&#41;</span><br />   <span class="kw1">if</span> a <span class="kw2">and</span> b <span class="kw2">and</span> c <span class="kw2">and</span> d <span class="kw2">and</span> <span class="kw2">not</span> e <span class="kw1">then</span> <span class="co1">--if there is a fifth numeral the player is cheating</span><br />      <span class="kw1">local</span> digs <span class="sy0">=</span> <span class="br0">&#123;</span>a <span class="sy0">+</span> <span class="nu0">0</span><span class="sy0">,</span> b <span class="sy0">+</span> <span class="nu0">0</span><span class="sy0">,</span> c <span class="sy0">+</span> <span class="nu0">0</span><span class="sy0">,</span> d <span class="sy0">+</span> <span class="nu0">0</span><span class="br0">&#125;</span><br />      <span class="kw1">local</span> flag <span class="sy0">=</span> <span class="kw4">false</span> <span class="co1">-- (terrorism!)</span><br />      <span class="kw3">table.sort</span><span class="br0">&#40;</span>digs<span class="br0">&#41;</span><br />      <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">4</span> <span class="kw1">do</span><br />	   flag <span class="sy0">=</span> digs<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">~=</span> val_t<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw2">and</span> <span class="kw2">not</span> <span class="kw3">print</span><span class="st0">&quot;Wrong digits!&quot;</span> <span class="kw2">or</span> flag<br />      <span class="kw1">end</span><br />      <span class="kw1">if</span> <span class="kw2">not</span> flag <span class="kw2">and</span> <span class="kw3">loadstring</span><span class="br0">&#40;</span><span class="st0">&quot;return &quot;</span> <span class="sy0">..</span> ex<span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">24</span> <span class="kw1">then</span><br />         <span class="kw3">print</span><span class="st0">&quot;You win!&quot;</span><br />      <span class="kw1">else</span><br />         <span class="kw3">print</span><span class="st0">&quot;You lose.&quot;</span><br />      <span class="kw1">end</span><br />   <span class="kw1">else</span> <span class="kw3">print</span><span class="st0">&quot;wat&quot;</span> <span class="co1">--expression could not be interpreted as arithmetic</span><br />   <span class="kw1">end</span><br /><span class="kw1">end</span><br />twentyfour<span class="br0">&#40;</span><span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="Maple"><a href="/wiki/Category:Maple" title="Category:Maple">Maple</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=46" title="Edit section: Maple">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Click <a rel="nofollow" class="external text" href="http://maplecloud.maplesoft.com/application.jsp?appId=5764927761416192">here</a> to try this game online.
</p>
<pre class="text highlighted_source">play24&#160;:= module()<br />	export ModuleApply;<br />	local cheating;<br />	cheating&#160;:= proc(input, digits)<br />		local i, j, stringDigits;<br />		use StringTools in<br />			stringDigits&#160;:= Implode([seq(convert(i, string), i in digits)]);<br />			for i in digits do<br />				for j in digits do<br />					if Search(cat(convert(i, string), j), input) &gt; 0 then<br />						return true, &quot;: Please don't combine digits to form another number.&quot;<br />					end if;<br />				end do;<br />			end do;<br />			for i in digits do<br />				if CountCharacterOccurrences(input, convert(i, string)) &lt; CountCharacterOccurrences(stringDigits, convert(i, string)) then<br />					return true, &quot;: Please use all digits.&quot;;<br />				end if;<br />			end do;<br />			for i in digits do<br />				if CountCharacterOccurrences(input, convert(i, string)) &gt; CountCharacterOccurrences(stringDigits, convert(i, string)) then<br />					return true, &quot;: Please only use a digit once.&quot;;<br />				end if;<br />			end do;<br />			for i in input do<br />				try<br />					if type(parse(i), numeric) and not member(parse(i), digits) then<br />						return true, &quot;: Please only use the digits you were given.&quot;;<br />					end if;<br />				catch:<br />				end try;<br />			end do;<br />			return false, &quot;&quot;;<br />		end use;<br />	end proc:<br />&#160;<br />	ModuleApply&#160;:= proc()<br />		local replay, digits, err, message, answer;<br />		randomize():<br />		replay&#160;:= &quot;&quot;:<br />		while not replay = &quot;END&quot; do<br />			if not replay = &quot;YES&quot; then<br />				digits&#160;:= [seq(rand(1..9)(), i = 1..4)]:<br />			end if;<br />			err&#160;:= true:<br />			while err do<br />				message&#160;:= &quot;&quot;;<br />				printf(&quot;Please make 24 from the digits:&#160;%a. Press enter for a new set of numbers or type END to quit\n&quot;, digits);<br />				answer&#160;:= StringTools[UpperCase](readline());<br />				if not answer = &quot;&quot; and not answer = &quot;END&quot; then<br />					try<br />						if not type(parse(answer), numeric) then<br />							error;<br />						elif cheating(answer, digits)[1] then<br />							message&#160;:= cheating(answer, digits)[2];<br />							error;<br />						end if;<br />						err&#160;:= false;<br />					catch:<br />						printf(&quot;Invalid Input%s\n\n&quot;, message);<br />					end try;<br />				else<br />					err&#160;:= false;<br />				end if;<br />			end do:<br />			if not answer = &quot;&quot; and not answer = &quot;END&quot; then<br />				if parse(answer) = 24 then<br />					printf(&quot;You win! Do you wish to play another game? (Press enter for a new set of numbers or END to quit.)\n&quot;);<br />					replay&#160;:= StringTools[UpperCase](readline());<br />				else <br />					printf(&quot;Your expression evaluated to&#160;%a. Try again!\n&quot;, parse(answer));<br />					replay&#160;:= &quot;YES&quot;;<br />				end if;<br />			else<br />				replay&#160;:= answer;<br />			end if;<br />&#160;<br />			printf(&quot;\n&quot;);<br />		end do:<br />		printf(&quot;GAME OVER\n&quot;);<br />	end proc:<br />end module:<br />&#160;<br />play24();</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
Please make 24 from the digits: [4, 7, 6, 8]. Press enter for a new set of numbers or type END to quit
You win! Do you wish to play another game? (Press enter for a new set of numbers or END to quit.)

Please make 24 from the digits: [3, 7, 4, 7]. Press enter for a new set of numbers or type END to quit
Your expression evaluated to 21. Try again!

Please make 24 from the digits: [3, 7, 4, 7]. Press enter for a new set of numbers or type END to quit

GAME OVER
</pre>
<h2><span class="mw-headline" id="Mathematica"><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=47" title="Edit section: Mathematica">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Mathematica" title="Mathematica" class="mw-redirect">Mathematica</a> version 6</div>
<p>Since Mathematica hasn't historically had good custom I/O support (the command-line allowed <i>all</i> operations, not very good for UI-generation), I had to roll some custom GUI (with a text box), which requires Mathematica 6.
</p><p>Most of the job is already done by Mathematica (the expression conversion); in fact, it is <i>too</i> good&#8212;it automatically converts ex. 3/4 to Times[3, Power[4, -1]], which we have to specifically test for so that real powers don't get through.
</p>
<pre class="text highlighted_source">isLegal[n_List, x_String]&#160;:= <br /> Quiet[Check[<br />   With[{h = ToExpression[x, StandardForm, HoldForm]}, <br />    If[Cases[Level[h, {2, \[Infinity]}, Hold, Heads -&gt; True], <br />        Except[_Integer | Plus | _Plus | Times | _Times | Power | <br />          Power[_, -1]]] === {} &amp;&amp; <br />      Sort[Level[h /. Power[q_, -1] -&gt; q, {-1}] /. <br />         q_Integer -&gt; Abs[q]] === Sort[n], ReleaseHold[h]]], Null]]<br />Grid[{{Button[<br />    &quot;new numbers&quot;, {a, b, c, d} = Table[RandomInteger[{1, 9}], {4}]], <br />   InputField[Dynamic[x], String]}, {Dynamic[{a, b, c, d}], <br />   Dynamic[Switch[isLegal[{a, b, c, d}, x], Null, <br />     &quot;Sorry, that is invalid.&quot;, 24, &quot;Congrats! That's 24!&quot;, _, <br />     &quot;Sorry, that makes &quot; &lt;&gt; ToString[<a class="__cf_email__" href="/cdn-cgi/l/email-protection" data-cfemail="acf8c3e9d4dcdec9dfdfc5c3c2ecd4">[email&#160;protected]</a><script data-cfhash='f9e31' type="text/javascript">/* <![CDATA[ */!function(t,e,r,n,c,a,p){try{t=document.currentScript||function(){for(t=document.getElementsByTagName('script'),e=t.length;e--;)if(t[e].getAttribute('data-cfhash'))return t[e]}();if(t&&(c=t.previousSibling)){p=t.parentNode;if(a=c.getAttribute('data-cfemail')){for(e='',r='0x'+a.substr(0,2)|0,n=2;a.length-n;n+=2)e+='%'+('0'+('0x'+a.substr(n,2)^r).toString(16)).slice(-2);p.replaceChild(document.createTextNode(decodeURIComponent(e)),c)}p.removeChild(t)}}catch(u){}}()/* ]]> */</script>, InputForm] &lt;&gt; <br />      &quot;, not 24.&quot;]]}}]</pre>
<h2><span class="mw-headline" id="MATLAB_.2F_Octave"><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a> / <a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=48" title="Edit section: MATLAB / Octave">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="matlab highlighted_source">  <span class="kw1">function</span> twentyfour<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  N = <span class="nu0">4</span>;<br />  n = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ceil.html"><span class="kw2">ceil</span></a><span class="br0">&#40;</span><a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/rand.html"><span class="kw2">rand</span></a><span class="br0">&#40;</span><span class="nu0">1</span>,N<span class="br0">&#41;</span>*<span class="nu0">9</span><span class="br0">&#41;</span>;<br />  printf<span class="br0">&#40;</span><span class="co2">'Generate a equation with the numbers&#160;%i,&#160;%i,&#160;%i,&#160;%i and +, -, *, /, () operators&#160;! \n'</span>,n<span class="br0">&#41;</span>;<br />  s = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/input.html"><span class="kw2">input</span></a><span class="br0">&#40;</span><span class="co2">': '</span>,<span class="co2">'s'</span><span class="br0">&#41;</span>;<br />  t = s;<br />  <span class="kw1">for</span> k = <span class="nu0">1</span>:N,<br />    <span class="br0">&#91;</span>x,t<span class="br0">&#93;</span> = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/strtok.html"><span class="kw2">strtok</span></a><span class="br0">&#40;</span>t,<span class="co2">'+-*/() \t'</span><span class="br0">&#41;</span>;<br />     <span class="kw1">if</span> <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/length.html"><span class="kw2">length</span></a><span class="br0">&#40;</span>x<span class="br0">&#41;</span>~=<span class="nu0">1</span>,<br />       <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html"><span class="kw2">error</span></a><span class="br0">&#40;</span><span class="co2">'invalid sign&#160;%s\n'</span>,x<span class="br0">&#41;</span>;<br />     <span class="kw1">end</span>; <br />     y = x-<span class="co2">'0'</span>;<br />     <span class="kw1">if</span> ~<span class="br0">&#40;</span><span class="nu0">0</span> &lt; y &amp; y &lt; <span class="nu0">10</span><span class="br0">&#41;</span> <br />       <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html"><span class="kw2">error</span></a><span class="br0">&#40;</span><span class="co2">'invalid sign&#160;%s\n'</span>,x<span class="br0">&#41;</span>;<br />     <span class="kw1">end</span>;<br />     z<span class="br0">&#40;</span><span class="nu0">1</span>,k<span class="br0">&#41;</span> = y;  	<br />  <span class="kw1">end</span>; <br />  <span class="kw1">if</span> <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/any.html"><span class="kw2">any</span></a><span class="br0">&#40;</span><a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html"><span class="kw2">sort</span></a><span class="br0">&#40;</span>z<span class="br0">&#41;</span>-<a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sort.html"><span class="kw2">sort</span></a><span class="br0">&#40;</span>n<span class="br0">&#41;</span><span class="br0">&#41;</span> <br />    <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/error.html"><span class="kw2">error</span></a><span class="br0">&#40;</span><span class="co2">'numbers do not match.\n'</span><span class="br0">&#41;</span>;	<br />  <span class="kw1">end</span>; <br />&#160;<br />  val =  <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/eval.html"><span class="kw2">eval</span></a><span class="br0">&#40;</span>s<span class="br0">&#41;</span>;<br />  <span class="kw1">if</span> val==<span class="nu0">24</span>,<br />    <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html"><span class="kw2">fprintf</span></a><span class="br0">&#40;</span><span class="co2">'expression &quot;%s&quot; results in&#160;%i.\n'</span>,s,val<span class="br0">&#41;</span>;	<br />  <span class="kw1">else</span><br />    <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/fprintf.html"><span class="kw2">fprintf</span></a><span class="br0">&#40;</span><span class="co2">'expression &quot;%s&quot; does not result in 24 but&#160;%i.\n'</span>,s,val<span class="br0">&#41;</span>;<br />  <span class="kw1">end</span>; 	</pre>
<h2><span class="mw-headline" id="mIRC_Scripting_Language"><a href="/wiki/Category:MIRC_Scripting_Language" title="Category:MIRC Scripting Language">mIRC Scripting Language</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=49" title="Edit section: mIRC Scripting Language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="mirc highlighted_source"><span class="kw1">alias</span> 24 <span class="br0">&#123;</span><br />  <span class="kw1">dialog</span> <span class="re4">-m</span> 24-Game 24-Game<br /><span class="br0">&#125;</span><br />&#160;<br /><span class="kw1">dialog</span> 24-Game <span class="br0">&#123;</span><br />  title &quot;24-Game&quot;<br />  size <span class="re4">-1</span> <span class="re4">-1</span> 100 70<br />  option dbu<br />  text &quot;&quot;, 1, 29 7 42 8<br />  text &quot;Equation&quot;, 2, 20 21 21 8<br />  edit &quot;&quot;, 3, 45 20 40 10<br />  text &quot;Status&quot;, 4, 10 34 80 8, center<br />  button &quot;Calculate&quot;, 5, 5 45 40 20<br />  button &quot;New&quot;, 6, 57 47 35 15<br /><span class="br0">&#125;</span><br />&#160;<br />on *:<span class="kw1">DIALOG</span>:24-Game:init:*: <span class="br0">&#123;</span><br />  did <span class="re4">-o</span> 24-Game 1 1 Numbers: <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span><br /><span class="br0">&#125;</span><br />&#160;<br />on *:<span class="kw1">DIALOG</span>:24-Game:sclick:*: <span class="br0">&#123;</span><br />  <span class="kw2">if</span> <span class="br0">&#40;</span><span class="re0">$did</span> == 5<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="kw2">if</span> <span class="br0">&#40;</span><span class="re0">$regex</span><span class="br0">&#40;</span><span class="re0">$did</span><span class="br0">&#40;</span>3<span class="br0">&#41;</span>,<span class="sy0">/</span>^<span class="br0">&#91;</span> <span class="br0">&#40;</span><span class="br0">&#93;</span>*\d *<span class="br0">&#91;</span>-+*<span class="sy0">/</span><span class="br0">&#93;</span><span class="br0">&#91;</span> <span class="br0">&#40;</span><span class="br0">&#93;</span>*\d<span class="br0">&#91;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>*<span class="br0">&#91;</span>-+*<span class="sy0">/</span><span class="br0">&#93;</span><span class="br0">&#91;</span> <span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#93;</span>*\d<span class="br0">&#91;</span> <span class="br0">&#41;</span><span class="br0">&#93;</span>*<span class="br0">&#91;</span>-+*<span class="sy0">/</span><span class="br0">&#93;</span> *\d<span class="br0">&#91;</span> <span class="br0">&#41;</span><span class="br0">&#93;</span>*$<span class="sy0">/</span><span class="br0">&#41;</span><span class="br0">&#41;</span> &amp;&amp; <span class="br0">&#40;</span><span class="re0">$sorttok</span><span class="br0">&#40;</span><span class="re0">$regsubex</span><span class="br0">&#40;</span><span class="re0">$did</span><span class="br0">&#40;</span>3<span class="br0">&#41;</span>,<span class="sy0">/</span><span class="br0">&#91;</span>^\d<span class="br0">&#93;</span>+<span class="re7">/g</span>,<span class="re0">$chr</span><span class="br0">&#40;</span>32<span class="br0">&#41;</span><span class="br0">&#41;</span>,32<span class="br0">&#41;</span> == <span class="re0">$sorttok</span><span class="br0">&#40;</span><span class="re0">$remove</span><span class="br0">&#40;</span><span class="re0">$did</span><span class="br0">&#40;</span>1<span class="br0">&#41;</span>,Numbers:<span class="br0">&#41;</span>,32<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />      did <span class="re4">-o</span> 24-Game 4 1 <span class="re0">$iif</span><span class="br0">&#40;</span><span class="re0">$calc</span><span class="br0">&#40;</span><span class="re0">$did</span><span class="br0">&#40;</span>3<span class="br0">&#41;</span><span class="br0">&#41;</span> == 24,Correct,Wrong<span class="br0">&#41;</span><br />    <span class="br0">&#125;</span><br />    <span class="kw2">else</span> <span class="br0">&#123;</span><br />      did <span class="re4">-o</span> 24-Game 4 1 Wrong Numbers or Syntax<br />    <span class="br0">&#125;</span><br />  <span class="br0">&#125;</span><br />  <span class="kw2">elseif</span> <span class="br0">&#40;</span><span class="re0">$did</span> == 6<span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    did <span class="re4">-o</span> 24-Game 1 1 Numbers: <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span> <span class="re0">$rand</span><span class="br0">&#40;</span>1,9<span class="br0">&#41;</span><br />  <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="Modula-2"><a href="/wiki/Category:Modula-2" title="Category:Modula-2">Modula-2</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=50" title="Edit section: Modula-2">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="/mw/index.php?title=Category:Ulm%27s_Modula-2_Library&amp;action=edit&amp;redlink=1" class="new" title="Category:Ulm's Modula-2 Library (page does not exist)">Ulm's Modula-2 Library</a></div>
<pre class="modula2 highlighted_source"><span class="kw1">MODULE</span> TwentyFour;<br />&#160;<br /><span class="kw1">FROM</span>	InOut			<span class="kw1">IMPORT</span> WriteString<span class="sy0">,</span> WriteLn<span class="sy0">,</span> Write<span class="sy0">,</span> ReadString<span class="sy0">,</span> WriteInt;<br /><span class="kw1">FROM</span>	RandomGenerator <span class="kw1">IMPORT</span> Random;<br />&#160;<br /><span class="kw1">TYPE</span>	operator_t 		<span class="sy0">=</span> <span class="br0">&#40;</span>add<span class="sy0">,</span> sub<span class="sy0">,</span> mul<span class="sy0">,</span> div<span class="br0">&#41;</span>;<br />		expr_t			<span class="sy0">=</span> <span class="kw1">RECORD</span><br />							operand		<span class="sy0">:</span> <span class="kw1">ARRAY</span><span class="br0">&#91;</span><span class="nu0">0</span>..<span class="nu0">3</span><span class="br0">&#93;</span> <span class="kw1">OF</span> <span class="kw4">CARDINAL</span>;<br />					  		operator 	<span class="sy0">:</span> <span class="kw1">ARRAY</span><span class="br0">&#91;</span><span class="nu0">1</span>..<span class="nu0">3</span><span class="br0">&#93;</span> <span class="kw1">OF</span> operator_t;<br />						  <span class="kw1">END</span>;<span class="coMULTI">(*of RECORD*)</span><br />		numbers_t		<span class="sy0">=</span> <span class="kw1">SET</span> <span class="kw1">OF</span> <span class="kw4">CHAR</span>;<br />&#160;<br /><span class="kw1">VAR</span>		expr 	<span class="sy0">:</span> expr_t;<br />		numbers	<span class="sy0">:</span> numbers_t;<br /><span class="coMULTI">(*******************************************************************createExpr*)</span><br /><span class="coMULTI">(*analyse the input string                                                    *)</span><br /><span class="kw1">PROCEDURE</span> createExpr<span class="br0">&#40;</span>s<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">CHAR</span><span class="br0">&#41;</span>;<br />&#160;<br /><span class="kw1">VAR</span> index<span class="sy0">,</span> counter	<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br />	token 			<span class="sy0">:</span> <span class="kw4">CHAR</span>;<br />	temp_expr 		<span class="sy0">:</span> expr_t;<br />	operand   		<span class="sy0">:</span> <span class="kw4">CARDINAL</span>;<br />	operator		<span class="sy0">:</span> operator_t;<br />&#160;<br />	<span class="coMULTI">(************************************nextToken*)</span><br />	<span class="coMULTI">(* returns the next CHAR that isn`t a space    *)</span><br />	<span class="kw1">PROCEDURE</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">:</span> <span class="kw4">CHAR</span>;<br />	<span class="kw1">BEGIN</span><br />		<span class="kw3">INC</span><span class="br0">&#40;</span>index<span class="br0">&#41;</span>;<br />		<span class="kw1">WHILE</span> <span class="br0">&#40;</span>s<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st_h">' '</span><span class="br0">&#41;</span> <span class="kw1">DO</span><br />			<span class="kw3">INC</span><span class="br0">&#40;</span>index<span class="br0">&#41;</span>;<br />		<span class="kw1">END</span>;<span class="coMULTI">(*of WHILE*)</span><br />		<span class="kw1">RETURN</span><span class="br0">&#40;</span>s<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />	<span class="kw1">END</span> nextToken;<br />	<span class="coMULTI">(***********************************set_operand*)</span><br />	<span class="coMULTI">(* checks if the CHAR o inerhits a valid number*)</span><br />	<span class="coMULTI">(* and sets 'operand' to its value             *)</span>	<br />	<span class="kw1">PROCEDURE</span> set_operand<span class="br0">&#40;</span>o<span class="sy0">:</span> <span class="kw4">CHAR</span><span class="br0">&#41;</span>;<br />	<span class="kw1">BEGIN</span><br />		<span class="kw1">CASE</span> o <span class="kw1">OF</span><br />			<span class="st_h">'0'</span>..<span class="st_h">'9'</span><span class="sy0">:</span>	<span class="kw1">IF</span> o <span class="kw1">IN</span> numbers <span class="kw1">THEN</span><br />							operand <span class="sy0">:=</span> <span class="kw3">ORD</span><span class="br0">&#40;</span>o<span class="br0">&#41;</span><span class="sy0">-</span><span class="nu0">48</span>;<br />							numbers <span class="sy0">:=</span> numbers <span class="sy0">-</span> numbers_t<span class="br0">&#123;</span>o<span class="br0">&#125;</span>;<br />						<span class="kw1">ELSE</span><br />							WriteString<span class="br0">&#40;</span><span class="st0">&quot;ERROR: '&quot;</span><span class="br0">&#41;</span>;<br />							Write<span class="br0">&#40;</span>					o<span class="br0">&#41;</span>;<br />							WriteString<span class="br0">&#40;</span>				<span class="st0">&quot;' isn`t a available number &quot;</span><span class="br0">&#41;</span>;<br />							WriteLn;<br />							<span class="kw3">HALT</span>;<br />						<span class="kw1">END</span>;<span class="coMULTI">(*of IF*)</span>|<br />			<span class="nu0">0</span>  <span class="sy0">:</span> WriteString<span class="br0">&#40;</span><span class="st0">&quot;ERROR: error in input &quot;</span><span class="br0">&#41;</span>;<br />					WriteLn;<br />					<span class="kw3">HALT</span>;<br />			<span class="kw1">ELSE</span><br />				WriteString<span class="br0">&#40;</span><span class="st0">&quot;ERROR: '&quot;</span><span class="br0">&#41;</span>;<br />				Write<span class="br0">&#40;</span>					o<span class="br0">&#41;</span>;<br />				WriteString<span class="br0">&#40;</span>				<span class="st0">&quot;' isn`t a number &quot;</span><span class="br0">&#41;</span>;<br />				WriteLn;<br />				<span class="kw3">HALT</span>;<br />		<span class="kw1">END</span>;<span class="coMULTI">(*of CASE*)</span><br />	<span class="kw1">END</span> set_operand;<br />	<span class="coMULTI">(**********************************set_operator*)</span><br />	<span class="coMULTI">(* checks if the CHAR o inerhits a valid       *)</span><br />	<span class="coMULTI">(* operator and sets 'operator' to its value   *)</span><br />	<span class="kw1">PROCEDURE</span> set_operator<span class="br0">&#40;</span>o<span class="sy0">:</span> <span class="kw4">CHAR</span><span class="br0">&#41;</span>;<br />	<span class="kw1">BEGIN</span><br />		<span class="kw1">CASE</span> o <span class="kw1">OF</span><br />			<span class="st_h">'+'</span> <span class="sy0">:</span> operator <span class="sy0">:=</span> add;|<br />			<span class="st_h">'-'</span> <span class="sy0">:</span> operator <span class="sy0">:=</span> sub;|<br />			<span class="st_h">'*'</span> <span class="sy0">:</span> operator <span class="sy0">:=</span> mul;|<br />			<span class="st_h">'/'</span> <span class="sy0">:</span> operator <span class="sy0">:=</span> div;|<br />			<span class="nu0">0</span>  <span class="sy0">:</span> WriteString<span class="br0">&#40;</span><span class="st0">&quot;ERROR: error in input &quot;</span><span class="br0">&#41;</span>;<br />					WriteLn;<br />					<span class="kw3">HALT</span>;<br />		<span class="kw1">ELSE</span><br />			WriteString<span class="br0">&#40;</span><span class="st0">&quot;ERROR: '&quot;</span><span class="br0">&#41;</span>;<br />				Write<span class="br0">&#40;</span>					o<span class="br0">&#41;</span>;<br />				WriteString<span class="br0">&#40;</span>				<span class="st0">&quot;' isn`t a operator &quot;</span><span class="br0">&#41;</span>;<br />				WriteLn;<br />				<span class="kw3">HALT</span>;<br />		<span class="kw1">END</span>;<span class="coMULTI">(*of CASE*)</span><br />	<span class="kw1">END</span> set_operator;<br />	<span class="coMULTI">(************************************************)</span><br /><span class="kw1">BEGIN</span><br />	index <span class="sy0">:=</span> <span class="sy0">-</span><span class="nu0">1</span>;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operand<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operand<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operand;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operator<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operator<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operator;<br />&#160;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operand<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operand<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operand;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operator<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operator<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operator;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operand<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operand<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operand;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operator<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operator<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operator;<br />&#160;<br />	token <span class="sy0">:=</span> nextToken<span class="br0">&#40;</span><span class="br0">&#41;</span>;<br />	set_operand<span class="br0">&#40;</span>token<span class="br0">&#41;</span>;<br />	expr.operand<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">:=</span> operand;<br /><span class="kw1">END</span> createExpr;<br />&#160;<br /><span class="coMULTI">(*****************************************************************evaluateExpr*)</span><br /><span class="coMULTI">(* evaluate the expresion that was createt by 'createExpr'                    *)</span><br />&#160;<br /><span class="kw1">PROCEDURE</span> evaluateExpr<span class="br0">&#40;</span><span class="kw1">VAR</span> num<span class="sy0">:</span> <span class="kw4">REAL</span><span class="br0">&#41;</span>;<br />&#160;<br /><span class="kw1">VAR</span>	index	<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br /><span class="kw1">BEGIN</span><br />	<span class="kw1">WITH</span> expr <span class="kw1">DO</span><br />		num <span class="sy0">:=</span> <span class="kw3">VAL</span><span class="br0">&#40;</span><span class="kw4">REAL</span><span class="sy0">,</span>operand<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />		<span class="kw1">FOR</span> index <span class="sy0">:=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">3</span> <span class="kw1">DO</span><br />			<span class="kw1">CASE</span> operator<span class="br0">&#91;</span>index<span class="br0">&#93;</span> <span class="kw1">OF</span><br />				add <span class="sy0">:</span> num <span class="sy0">:=</span> num <span class="sy0">+</span> <span class="kw3">VAL</span><span class="br0">&#40;</span><span class="kw4">REAL</span><span class="sy0">,</span>operand<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span>;|<br />				sub <span class="sy0">:</span> num <span class="sy0">:=</span> num <span class="sy0">-</span> <span class="kw3">VAL</span><span class="br0">&#40;</span><span class="kw4">REAL</span><span class="sy0">,</span>operand<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span>;|<br />				mul <span class="sy0">:</span> num <span class="sy0">:=</span> num <span class="sy0">*</span> <span class="kw3">VAL</span><span class="br0">&#40;</span><span class="kw4">REAL</span><span class="sy0">,</span>operand<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span>;|<br />				div <span class="sy0">:</span> num <span class="sy0">:=</span> num <span class="sy0">/</span> <span class="kw3">VAL</span><span class="br0">&#40;</span><span class="kw4">REAL</span><span class="sy0">,</span>operand<span class="br0">&#91;</span>index<span class="br0">&#93;</span><span class="br0">&#41;</span>;<br />			<span class="kw1">END</span>;<span class="coMULTI">(*of CASE*)</span><br />		<span class="kw1">END</span>;<span class="coMULTI">(*of FOR*)</span><br />	<span class="kw1">END</span>;<span class="coMULTI">(*of WIHT*)</span><br /><span class="kw1">END</span> evaluateExpr;<br />&#160;<br /><span class="coMULTI">(**************************************************************generateNumbers*)</span><br /><span class="coMULTI">(* generates the 4 random numbers ond write them                              *)</span><br /><span class="kw1">PROCEDURE</span> generateNumbers;<br /><span class="kw1">VAR</span>	index<span class="sy0">,</span>ran <span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br /><span class="kw1">BEGIN</span><br />	numbers <span class="sy0">:=</span> numbers_t<span class="br0">&#123;</span><span class="br0">&#125;</span>;<br />	ran <span class="sy0">:=</span> Random<span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">&#41;</span>;<br />	<span class="kw1">FOR</span> index <span class="sy0">:=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">4</span> <span class="kw1">DO</span><br />		<span class="kw1">WHILE</span> <span class="br0">&#40;</span><span class="kw3">CHR</span><span class="br0">&#40;</span>ran<span class="sy0">+</span><span class="nu0">48</span><span class="br0">&#41;</span> <span class="kw1">IN</span> numbers <span class="br0">&#41;</span><span class="kw1">DO</span><br />			ran <span class="sy0">:=</span> Random<span class="br0">&#40;</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">&#41;</span>;<br />		<span class="kw1">END</span>;<span class="coMULTI">(*of While*)</span><br />		Write<span class="br0">&#40;</span><span class="kw3">CHR</span><span class="br0">&#40;</span>ran<span class="sy0">+</span><span class="nu0">48</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />		WriteLn;<br />		numbers <span class="sy0">:=</span> numbers <span class="sy0">+</span> numbers_t<span class="br0">&#123;</span><span class="kw3">CHR</span><span class="br0">&#40;</span>ran<span class="sy0">+</span><span class="nu0">48</span><span class="br0">&#41;</span><span class="br0">&#125;</span><br />	<span class="kw1">END</span>;<span class="coMULTI">(*of FOR*)</span><br /><span class="kw1">END</span> generateNumbers;<br /><span class="coMULTI">(****************************************************************Main Programm*)</span><br /><span class="kw1">VAR</span>	str <span class="sy0">:</span> <span class="kw1">ARRAY</span><span class="br0">&#91;</span><span class="nu0">0</span>..<span class="nu0">255</span><span class="br0">&#93;</span> <span class="kw1">OF</span> <span class="kw4">CHAR</span>;<br />	sum <span class="sy0">:</span> <span class="kw4">REAL</span>;<br /><span class="kw1">BEGIN</span><br />	WriteString<span class="br0">&#40;</span><span class="st0">&quot;Welcome to the 24 game in MODULA-2&quot;</span><span class="br0">&#41;</span>;<br />	WriteLn;<br />	WriteString<span class="br0">&#40;</span><span class="st0">&quot;Here are your numbers:&quot;</span><span class="br0">&#41;</span>;<br />	WriteLn;<br />	generateNumbers;<br />	WriteString<span class="br0">&#40;</span><span class="st0">&quot;Enter your equation(This implementation dosn`t support brackets yet): &quot;</span><span class="br0">&#41;</span>;<br />	WriteLn;<br />	ReadString<span class="br0">&#40;</span>str<span class="br0">&#41;</span>;<br />	createExpr<span class="br0">&#40;</span>str<span class="br0">&#41;</span>;<br />	evaluateExpr<span class="br0">&#40;</span>sum<span class="br0">&#41;</span>;<br />	WriteLn;<br />	WriteString<span class="br0">&#40;</span><span class="st0">&quot;Result:&quot;</span><span class="br0">&#41;</span>;<br />	WriteLn;<br />	WriteInt<span class="br0">&#40;</span><span class="kw3">TRUNC</span><span class="br0">&#40;</span>sum<span class="br0">&#41;</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">&#41;</span>;<br />	WriteLn;<br />	<span class="kw1">CASE</span> <span class="br0">&#40;</span><span class="kw3">TRUNC</span><span class="br0">&#40;</span>sum<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">24</span><span class="br0">&#41;</span> <span class="kw1">OF</span><br />		<span class="nu0">0</span> <span class="sy0">:</span> WriteString<span class="br0">&#40;</span><span class="st0">&quot;Perfect!&quot;</span><span class="br0">&#41;</span>;|<br />		<span class="nu0">1</span> <span class="sy0">:</span> WriteString<span class="br0">&#40;</span><span class="st0">&quot;Almost perfect.&quot;</span><span class="br0">&#41;</span>;<br />		<span class="kw1">ELSE</span> <br />			WriteString<span class="br0">&#40;</span><span class="st0">&quot;You loose!&quot;</span><span class="br0">&#41;</span>;<br />	<span class="kw1">END</span>;<span class="coMULTI">(*of CASE*)</span><br />	WriteLn;<br /><span class="kw1">END</span> TwentyFour.</pre>
<h2><span class="mw-headline" id="Nim"><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=51" title="Edit section: Nim">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#D">D</a></div>
<pre class="text highlighted_source">import math, strutils, algorithm, sequtils<br />randomize()<br />&#160;<br />template newSeqWith(len: int, init: expr): expr =<br />  var result {.gensym.} = newSeq[type(init)](len)<br />  for i in 0 .. &lt;len:<br />    result[i] = init<br />  result<br />&#160;<br />var<br />  problem = newSeqWith(4, random(1..9))<br />  stack = newSeq[float]()<br />  digits = newSeq[int]()<br />&#160;<br />echo &quot;Make 24 with the digits: &quot;, problem<br />&#160;<br />template op(c): stmt =<br />  let a = stack.pop<br />  stack.add c(stack.pop, a)<br />&#160;<br />for c in stdin.readLine:<br />  case c<br />  of '1'..'9':<br />    digits.add c.ord - '0'.ord<br />    stack.add float(c.ord - '0'.ord)<br />  of '+': op `+`<br />  of '*': op `*`<br />  of '-': op `-`<br />  of '/': op `/`<br />  of Whitespace: discard<br />  else: raise ValueError.newException &quot;Wrong char: &quot; &amp; c<br />&#160;<br />sort digits, cmp[int]<br />sort problem, cmp[int]<br />if digits.deduplicate&#160;!= problem.deduplicate:<br />  raise ValueError.newException &quot;Not using the given digits.&quot;<br />if stack.len&#160;!= 1:<br />  raise ValueError.newException &quot;Wrong expression.&quot;<br />echo &quot;Result: &quot;, stack[0]<br />echo if abs(stack[0] - 24) &lt; 0.001: &quot;Good job!&quot; else: &quot;Try again.&quot;</pre>
<p>Example game:
</p>
<pre>Make 24 with the digits: @[8, 1, 3, 1]
8 3 * 1 + 1 -
Result: 24.0
Good job!</pre>
<h2><span class="mw-headline" id="OCaml"><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=52" title="Edit section: OCaml">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Compile with:
</p>
<pre>ocamlopt -pp camlp4o g24.ml -o g24.opt
</pre>
<pre class="ocaml highlighted_source"><span class="kw1">type</span> expression <span class="sy0">=</span><br />  <span class="sy0">|</span> Const <span class="kw1">of</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat"><span class="kw3">float</span></a><br />  <span class="sy0">|</span> Sum  <span class="kw1">of</span> expression <span class="sy0">*</span> expression   <span class="co1">(* e1 + e2 *)</span><br />  <span class="sy0">|</span> Diff <span class="kw1">of</span> expression <span class="sy0">*</span> expression   <span class="co1">(* e1 - e2 *)</span><br />  <span class="sy0">|</span> Prod <span class="kw1">of</span> expression <span class="sy0">*</span> expression   <span class="co1">(* e1 * e2 *)</span><br />  <span class="sy0">|</span> Quot <span class="kw1">of</span> expression <span class="sy0">*</span> expression   <span class="co1">(* e1 / e2 *)</span><br />&#160;<br /><span class="kw1">let</span> <span class="kw1">rec</span> eval <span class="sy0">=</span> <span class="kw1">function</span><br />  <span class="sy0">|</span> Const c <span class="sy0">-&gt;</span> c<br />  <span class="sy0">|</span> Sum <span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> eval f <span class="sy0">+.</span> eval g<br />  <span class="sy0">|</span> Diff<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> eval f <span class="sy0">-.</span> eval g<br />  <span class="sy0">|</span> Prod<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> eval f <span class="sy0">*.</span> eval g<br />  <span class="sy0">|</span> Quot<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> eval f <span class="sy0">/.</span> eval g<br />&#160;<br /><span class="kw1">let</span> <span class="kw1">rec</span> extract acc <span class="sy0">=</span> <span class="kw1">function</span><br />  <span class="sy0">|</span> Const c <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>c<span class="sy0">::</span>acc<span class="br0">&#41;</span><br />  <span class="sy0">|</span> Sum <span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>extract acc f<span class="br0">&#41;</span> @ <span class="br0">&#40;</span>extract <span class="br0">&#91;</span><span class="br0">&#93;</span> g<span class="br0">&#41;</span><br />  <span class="sy0">|</span> Diff<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>extract acc f<span class="br0">&#41;</span> @ <span class="br0">&#40;</span>extract <span class="br0">&#91;</span><span class="br0">&#93;</span> g<span class="br0">&#41;</span><br />  <span class="sy0">|</span> Prod<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>extract acc f<span class="br0">&#41;</span> @ <span class="br0">&#40;</span>extract <span class="br0">&#91;</span><span class="br0">&#93;</span> g<span class="br0">&#41;</span><br />  <span class="sy0">|</span> Quot<span class="br0">&#40;</span>f, g<span class="br0">&#41;</span> <span class="sy0">-&gt;</span> <span class="br0">&#40;</span>extract acc f<span class="br0">&#41;</span> @ <span class="br0">&#40;</span>extract <span class="br0">&#91;</span><span class="br0">&#93;</span> g<span class="br0">&#41;</span><br />&#160;<br /><span class="kw1">open</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Genlex.html"><span class="kw2">Genlex</span></a><br />&#160;<br /><span class="kw1">let</span> lexer <span class="sy0">=</span> make_lexer <span class="br0">&#91;</span><span class="st0">&quot;(&quot;</span><span class="sy0">;</span> <span class="st0">&quot;)&quot;</span><span class="sy0">;</span> <span class="st0">&quot;+&quot;</span><span class="sy0">;</span> <span class="st0">&quot;-&quot;</span><span class="sy0">;</span> <span class="st0">&quot;*&quot;</span><span class="sy0">;</span> <span class="st0">&quot;/&quot;</span><span class="br0">&#93;</span><br />&#160;<br /><span class="kw1">let</span> <span class="kw1">rec</span> parse_expr <span class="sy0">=</span> <span class="kw1">parser</span><br />     <span class="br0">&#91;</span><span class="sy0">&lt;</span> e1 <span class="sy0">=</span> parse_mult<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_adds e1 <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br /> <span class="kw1">and</span> parse_more_adds e1 <span class="sy0">=</span> <span class="kw1">parser</span><br />     <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;+&quot;</span><span class="sy0">;</span> e2 <span class="sy0">=</span> parse_mult<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_adds <span class="br0">&#40;</span>Sum<span class="br0">&#40;</span>e1, e2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;-&quot;</span><span class="sy0">;</span> e2 <span class="sy0">=</span> parse_mult<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_adds <span class="br0">&#40;</span>Diff<span class="br0">&#40;</span>e1, e2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e1<br /> <span class="kw1">and</span> parse_mult <span class="sy0">=</span> <span class="kw1">parser</span><br />     <span class="br0">&#91;</span><span class="sy0">&lt;</span> e1 <span class="sy0">=</span> parse_simple<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_mults e1 <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br /> <span class="kw1">and</span> parse_more_mults e1 <span class="sy0">=</span> <span class="kw1">parser</span><br />     <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;*&quot;</span><span class="sy0">;</span> e2 <span class="sy0">=</span> parse_simple<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_mults <span class="br0">&#40;</span>Prod<span class="br0">&#40;</span>e1, e2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;/&quot;</span><span class="sy0">;</span> e2 <span class="sy0">=</span> parse_simple<span class="sy0">;</span> e <span class="sy0">=</span> parse_more_mults <span class="br0">&#40;</span>Quot<span class="br0">&#40;</span>e1, e2<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e1<br /> <span class="kw1">and</span> parse_simple <span class="sy0">=</span> <span class="kw1">parser</span><br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Int i <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> Const<span class="br0">&#40;</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat"><span class="kw3">float</span></a> i<span class="br0">&#41;</span><br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Float f <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> Const f<br />   <span class="sy0">|</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;(&quot;</span><span class="sy0">;</span> e <span class="sy0">=</span> parse_expr<span class="sy0">;</span> <span class="sy0">'</span>Kwd <span class="st0">&quot;)&quot;</span> <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />&#160;<br />&#160;<br /><span class="kw1">let</span> parse_expression <span class="sy0">=</span> <span class="kw1">parser</span> <span class="br0">&#91;</span><span class="sy0">&lt;</span> e <span class="sy0">=</span> parse_expr<span class="sy0">;</span> _ <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stream.html"><span class="kw2">Stream</span></a><span class="sy0">.</span>empty <span class="sy0">&gt;</span><span class="br0">&#93;</span> <span class="sy0">-&gt;</span> e<br />&#160;<br /><span class="kw1">let</span> read_expression s <span class="sy0">=</span> parse_expression<span class="br0">&#40;</span>lexer<span class="br0">&#40;</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Stream.html"><span class="kw2">Stream</span></a><span class="sy0">.</span>of_string s<span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br />&#160;<br /><span class="kw1">let</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span><br />  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html"><span class="kw2">Random</span></a><span class="sy0">.</span>self_init<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="st0">&quot;<br />  The 24 Game<br />&#160;<br />  Given any four digits in the range 1 to 9, which may have repetitions,<br />  Using just the +, -, *, and / operators; and the possible use of<br />  brackets, (), show how to make an answer of 24.<br />&#160;<br />  An answer of 'q' will quit the game.<br />  An answer of '!' will generate a new set of four digits.<br />  Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />&#160;<br />  Note: you cannot form multiple digit numbers from the supplied digits,<br />  so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.\n&quot;</span><span class="sy0">;</span><br />&#160;<br />  <span class="kw1">let</span> sort <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>sort <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALcompare"><span class="kw3">compare</span></a> <span class="kw1">in</span><br />  <span class="kw1">let</span> digits <span class="sy0">=</span> <span class="kw1">ref</span> <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="kw1">in</span><br />  <span class="kw1">let</span> digit_set <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span><br />    <span class="kw1">let</span> ar <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>init <span class="nu0">4</span> <span class="br0">&#40;</span><span class="kw1">fun</span> _ <span class="sy0">-&gt;</span> <span class="nu0">1</span> <span class="sy0">+</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Random.html"><span class="kw2">Random</span></a><span class="sy0">.</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <span class="nu0">9</span><span class="br0">&#41;</span> <span class="kw1">in</span><br />    digits <span class="sy0">:=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>to_list<span class="br0">&#40;</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>map <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALfloat_of_int"><span class="kw3">float_of_int</span></a> ar<span class="br0">&#41;</span><span class="sy0">;</span><br />    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string"><span class="kw3">print_string</span></a> <span class="st0">&quot;The four digits: &quot;</span><span class="sy0">;</span><br />    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>iter <span class="br0">&#40;</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><span class="kw2">Printf</span></a><span class="sy0">.</span>printf <span class="st0">&quot;&#160;%g&quot;</span><span class="br0">&#41;</span> <span class="sy0">!</span>digits<span class="sy0">;</span><br />    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_newline"><span class="kw3">print_newline</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">in</span><br />&#160;<br />  digit_set<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">while</span> <span class="kw1">true</span> <span class="kw1">do</span><br />    <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_string"><span class="kw3">print_string</span></a> <span class="st0">&quot;Expression: &quot;</span><span class="sy0">;</span><br />    <span class="kw1">let</span> str <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALread_line"><span class="kw3">read_line</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">in</span><br />    <span class="kw1">if</span> str <span class="sy0">=</span> <span class="st0">&quot;q&quot;</span> <span class="kw1">then</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALexit"><span class="kw3">exit</span></a> <span class="nu0">0</span><span class="sy0">;</span><br />    <span class="kw1">if</span> str <span class="sy0">=</span> <span class="st0">&quot;!&quot;</span> <span class="kw1">then</span> digit_set<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="kw1">else</span> <span class="kw1">begin</span><br />      <span class="kw1">let</span> expr <span class="sy0">=</span> read_expression str <span class="kw1">in</span><br />      <span class="kw1">let</span> res <span class="sy0">=</span> eval expr <span class="kw1">in</span><br />      <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Printf.html"><span class="kw2">Printf</span></a><span class="sy0">.</span>printf <span class="st0">&quot; =&#160;%g\n%!&quot;</span> res<span class="sy0">;</span><br />      <span class="kw1">if</span> res <span class="sy0">=</span> <span class="nu0">24</span><span class="sy0">.</span><br />      <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span>sort <span class="sy0">!</span>digits<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="br0">&#40;</span>sort <span class="br0">&#40;</span>extract <span class="br0">&#91;</span><span class="br0">&#93;</span> expr<span class="br0">&#41;</span><span class="br0">&#41;</span><br />      <span class="kw1">then</span> <span class="br0">&#40;</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="st0">&quot;Congratulations!&quot;</span><span class="sy0">;</span> digit_set<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />      <span class="kw1">else</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALprint_endline"><span class="kw3">print_endline</span></a> <span class="st0">&quot;Try again&quot;</span><br />    <span class="kw1">end</span><br />  <span class="kw1">done</span></pre>
<h2><span class="mw-headline" id="Oforth"><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=53" title="Edit section: Oforth">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">: 24game<br />| l expr w n i |<br />   ListBuffer init(4, #[ 9 rand ]) -&gt;l<br />&#160;<br />   System.Out &quot;Digits&#160;: &quot; &lt;&lt; l &lt;&lt; &quot; --&gt; RPN Expression for 24&#160;: &quot; &lt;&lt; drop <br />   System.Console askln -&gt;expr<br />&#160;<br />   expr words forEach: w [<br />      w &quot;+&quot; == ifTrue: [ + continue ]<br />      w &quot;-&quot; == ifTrue: [ - continue ]<br />      w &quot;*&quot; == ifTrue: [ * continue ]<br />      w &quot;/&quot; == ifTrue: [ asFloat / continue ]<br />&#160;<br />      w asInteger dup -&gt;n ifNull: [ System.Out &quot;Word &quot; &lt;&lt; w &lt;&lt; &quot; not allowed &quot; &lt;&lt; cr break ]<br />      l indexOf(n) dup -&gt;i ifNull: [ System.Out &quot;Integer &quot; &lt;&lt; n &lt;&lt; &quot; is wrong &quot; &lt;&lt; cr break ]<br />      n l put(i, null)<br />      ]<br />   l conform(#isNull) ifFalse: [ &quot;Sorry, all numbers must be used...&quot; println return ]<br />   24 == ifTrue: [ &quot;You won&#160;!&quot; ] else: [ &quot;You loose...&quot; ] println&#160;;</pre>
<h2><span class="mw-headline" id="ooRexx"><a href="/wiki/Category:OoRexx" title="Category:OoRexx">ooRexx</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=54" title="Edit section: ooRexx">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>While the solution shown within this page at <a href="#rexx_version2">Rexx version 2</a> was created for Classic Rexx it also can be used unchanged by the ooRexx interpreter and so can be considered a solution for the ooRexx language too.
</p><p>Incompatibilities(*) that were originally in <a href="#rexx_version1">Rexx version 1</a> were meanwhile "fixed", so it also can be used unchanged by the ooRexx interpreter and so can be considered a solution for the ooRexx language too.
</p><p>(*) Classic Rexx accepts assignment without an expression (x=;), ooRexx does not.
</p>
<h2><span class="mw-headline" id="OpenEdge.2FProgress"><a href="/wiki/Category:OpenEdge/Progress" title="Category:OpenEdge/Progress">OpenEdge/Progress</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=55" title="Edit section: OpenEdge/Progress">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The dynamic query parser is used to evaluate the expression.
</p>
<pre class="progress highlighted_source"><span class="kw1">DEFINE TEMP-TABLE</span> tt <span class="kw1">NO-UNDO</span> <span class="kw4">FIELD</span> ii <span class="kw3">AS</span> <span class="kw3">INTEGER</span><span class="sy0">.</span><br />&#160;<br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> p_deanswer    <span class="kw3">AS</span> <span class="kw3">DECIMAL</span>     <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> idigits       <span class="kw3">AS</span> <span class="kw3">INTEGER</span>     <span class="kw1">NO-UNDO</span> <span class="kw4">EXTENT</span> <span class="nu0">4</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> ii            <span class="kw3">AS</span> <span class="kw3">INTEGER</span>     <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> Digits        <span class="kw3">AS</span> <span class="kw4">CHARACTER</span>   <span class="kw1">NO-UNDO</span> <span class="kw4">FORMAT</span> <span class="st0">&quot;x(7)&quot;</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> Answer        <span class="kw3">AS</span> <span class="kw4">CHARACTER</span>   <span class="kw1">NO-UNDO</span> <span class="kw4">FORMAT</span> <span class="st0">&quot;x(7)&quot;</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> cexpression   <span class="kw3">AS</span> <span class="kw4">CHARACTER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> cmessage      <span class="kw3">AS</span> <span class="kw4">CHARACTER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br /><span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> cchar         <span class="kw3">AS</span> <span class="kw4">CHARACTER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br />&#160;<br /><span class="kw1">FUNCTION</span> calculate <span class="kw1">RETURNS</span> <span class="kw3">LOGICAL</span> <span class="br0">&#40;</span><br />   i_de <span class="kw3">AS</span> <span class="kw3">DECIMAL</span><br /><span class="br0">&#41;</span><span class="sy0">:</span><br />   <span class="me0">p_deanswer</span> <span class="sy0">=</span> i_de<span class="sy0">.</span><br /><span class="kw1">END</span> <span class="kw1">FUNCTION</span><span class="sy0">.</span><br />&#160;<br /><span class="coMULTI">/* generate problem */</span><br /><span class="kw1">DO</span> ii <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">4</span><span class="sy0">:</span><br />   <span class="kw1">ASSIGN</span><br />      idigits <span class="br0">&#91;</span>ii<span class="br0">&#93;</span>   <span class="sy0">=</span>  <span class="kw3">RANDOM</span><span class="br0">&#40;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">9</span> <span class="br0">&#41;</span><span class="sy0">.</span><br />      Digits         <span class="sy0">=</span>  Digits <span class="sy0">+</span> <span class="kw1">STRING</span><span class="br0">&#40;</span> idigits <span class="br0">&#91;</span>ii<span class="br0">&#93;</span> <span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; &quot;</span><br />      <span class="sy0">.</span><br /><span class="kw1">END</span><span class="sy0">.</span><br />&#160;<br /><span class="coMULTI">/* ui */</span><br /><span class="kw1">DISPLAY</span> Digits<span class="sy0">.</span><br /><span class="kw1">UPDATE</span> Answer<span class="sy0">.</span><br />&#160;<br /><span class="coMULTI">/* check valid input */</span><br /><span class="kw1">DO</span> ii <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">7</span><span class="sy0">:</span><br />   <span class="me0">cchar</span> <span class="sy0">=</span> <span class="kw1">SUBSTRING</span><span class="br0">&#40;</span> Answer<span class="sy0">,</span> ii<span class="sy0">,</span> <span class="nu0">1</span> <span class="br0">&#41;</span><span class="sy0">.</span><br />   <span class="kw1">IF</span> cchar <span class="sy0">&gt;</span> <span class="st0">&quot;&quot;</span> <span class="kw1">THEN</span> <span class="kw1">DO</span><span class="sy0">:</span><br />      <span class="kw1">IF</span> ii <span class="kw1">MODULO</span> <span class="nu0">2</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">THEN</span> <span class="kw1">DO</span><span class="sy0">:</span><br />         <span class="kw1">IF</span> <span class="kw2">LOOKUP</span><span class="br0">&#40;</span> cchar<span class="sy0">,</span> Digits<span class="sy0">,</span> <span class="st0">&quot; &quot;</span> <span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">THEN</span><br />            cmessage <span class="sy0">=</span> cmessage <span class="sy0">+</span> <span class="kw3">SUBSTITUTE</span><span class="br0">&#40;</span> <span class="st0">&quot;Invalid digit: &amp;1.~r&quot;</span><span class="sy0">,</span> cchar <span class="br0">&#41;</span><span class="sy0">.</span><br />         <span class="kw1">ELSE</span> <br />            <span class="kw1">ENTRY</span><span class="br0">&#40;</span> <span class="kw2">LOOKUP</span><span class="br0">&#40;</span> cchar<span class="sy0">,</span> Digits<span class="sy0">,</span> <span class="st0">&quot; &quot;</span> <span class="br0">&#41;</span><span class="sy0">,</span> Digits<span class="sy0">,</span> <span class="st0">&quot; &quot;</span> <span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="sy0">.</span><br />      <span class="kw1">END</span><span class="sy0">.</span><br />      <span class="kw1">ELSE</span> <span class="kw1">DO</span><span class="sy0">:</span><br />         <span class="kw1">IF</span> <span class="kw2">LOOKUP</span><span class="br0">&#40;</span> cchar<span class="sy0">,</span> <span class="st0">&quot;+,-,/,*&quot;</span> <span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">THEN</span><br />            cmessage <span class="sy0">=</span> cmessage <span class="sy0">+</span> <span class="kw3">SUBSTITUTE</span><span class="br0">&#40;</span> <span class="st0">&quot;&amp;1 is not a valid operator.~r&quot;</span><span class="sy0">,</span> cchar <span class="br0">&#41;</span><span class="sy0">.</span><br />      <span class="kw1">END</span><span class="sy0">.</span><br />   <span class="kw1">END</span><span class="sy0">.</span><br /><span class="kw1">END</span><span class="sy0">.</span><br /><span class="kw1">IF</span> <span class="kw3">TRIM</span><span class="br0">&#40;</span> Digits <span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="st0">&quot;&quot;</span> <span class="kw1">THEN</span><br />   cmessage <span class="sy0">=</span> cmessage <span class="sy0">+</span> <span class="kw3">SUBSTITUTE</span><span class="br0">&#40;</span> <span class="st0">&quot;You did not use digits: &amp;1&quot;</span><span class="sy0">:</span><span class="me0">U</span><span class="sy0">,</span> <span class="kw3">TRIM</span><span class="br0">&#40;</span> Digits <span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">.</span><br />&#160;<br /><span class="kw1">IF</span> cmessage <span class="sy0">=</span> <span class="st0">&quot;&quot;</span> <span class="kw1">THEN</span> <span class="kw1">DO</span><span class="sy0">:</span><br />   <span class="coMULTI">/* expressions need spacing */</span><br />   <span class="kw1">DO</span> ii <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">7</span><span class="sy0">:</span><br />      <span class="me0">cexpression</span> <span class="sy0">=</span> cexpression <span class="sy0">+</span> <span class="kw1">SUBSTRING</span><span class="br0">&#40;</span> Answer<span class="sy0">,</span> ii<span class="sy0">,</span> <span class="nu0">1</span> <span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; &quot;</span><span class="sy0">.</span><br />   <span class="kw1">END</span><span class="sy0">.</span><br />   <span class="coMULTI">/* use dynamic query to parse expression */</span><br />   <span class="kw1">TEMP-TABLE</span> tt<span class="sy0">:</span><span class="kw4">DEFAULT-BUFFER-HANDLE</span><span class="sy0">:</span><span class="kw2">FIND-FIRST</span><span class="br0">&#40;</span> <br />      <span class="kw3">SUBSTITUTE</span><span class="br0">&#40;</span><br />         <span class="st0">&quot;WHERE NOT DYNAMIC-FUNCTION( 'calculate', DECIMAL( &amp;1 ) )&quot;</span><span class="sy0">,</span><br />         cexpression<br />      <span class="br0">&#41;</span><br />   <span class="br0">&#41;</span> <span class="kw1">NO-ERROR</span><span class="sy0">.</span><br />   <span class="kw1">IF</span> p_deanswer <span class="sy0">&lt;&gt;</span> <span class="nu0">24</span> <span class="kw1">THEN</span><br />      cmessage <span class="sy0">=</span> cmessage <span class="sy0">+</span> <span class="kw3">SUBSTITUTE</span><span class="br0">&#40;</span> <span class="st0">&quot;The expression evaluates to &amp;1.&quot;</span><span class="sy0">,</span> p_deanswer <span class="br0">&#41;</span><span class="sy0">.</span><br />   <span class="kw1">ELSE</span> <br />      cmessage <span class="sy0">=</span> <span class="st0">&quot;Solved!&quot;</span><span class="sy0">.</span><br /><span class="kw1">END</span><span class="sy0">.</span><br />&#160;<br /><span class="kw1">MESSAGE</span> cmessage <span class="kw1">VIEW-AS</span> <span class="kw1">ALERT-BOX</span><span class="sy0">.</span><br />&#160;</pre>
<h2><span class="mw-headline" id="PARI.2FGP"><a href="/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=56" title="Edit section: PARI/GP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="messagebox" style="text-align: center; background-color: #ffffd8; clear: both;">
<tr>
<td> This example is <b>untested</b>. Please check that it's correct, debug it as necessary, and remove this message.
</td></tr></table>
<p><br />
</p>
<pre class="parigp highlighted_source">game<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">=</span><span class="br0">&#123;</span><br />  my<span class="br0">&#40;</span>v<span class="sy0">=</span><span class="kw1">vecsort</span><span class="br0">&#40;</span><span class="kw1">vector</span><span class="br0">&#40;</span><span class="nu1">4</span><span class="sy0">,</span>i<span class="sy0">,</span><span class="kw1">random</span><span class="br0">&#40;</span><span class="nu1">8</span><span class="br0">&#41;</span><span class="sy0">+</span><span class="nu1">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Form 24 using */+-() and: &quot;</span>v<span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">while</span><span class="br0">&#40;</span><span class="nu1">1</span><span class="sy0">,</span><br />    my<span class="br0">&#40;</span>ans<span class="sy0">=</span><span class="kw1">input</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span>valid<span class="br0">&#40;</span>s<span class="sy0">,</span>v<span class="br0">&#41;</span><span class="sy0">,</span> <span class="kw1">next</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="kw1">trap</span><span class="br0">&#40;</span><span class="sy0">,</span><br />      <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Arithmetic error&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">next</span><br />    <span class="sy0">,</span><br />      <span class="kw1">if</span><span class="br0">&#40;</span><span class="kw1">eval</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><span class="sy0">==</span><span class="nu1">24</span><span class="sy0">,</span> <span class="kw1">break</span><span class="sy0">,</span> <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Bad sum&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="br0">&#41;</span><br />  <span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;You win!&quot;</span><span class="br0">&#41;</span><br /><span class="br0">&#125;</span><span class="sy0">;</span><br />valid<span class="br0">&#40;</span>s<span class="sy0">,</span>v<span class="br0">&#41;</span><span class="sy0">=</span><span class="br0">&#123;</span><br />  my<span class="br0">&#40;</span>op<span class="sy0">=</span><span class="kw1">vecsort</span><span class="br0">&#40;</span><span class="kw1">Vec</span><span class="br0">&#40;</span><span class="st0">&quot;+-*/()&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span>u<span class="sy0">=</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  s<span class="sy0">=</span><span class="kw1">Vec</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">for</span><span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu1">1</span><span class="sy0">,</span>#s<span class="sy0">,</span><br />    <span class="kw1">if</span><span class="br0">&#40;</span><span class="kw1">setsearch</span><span class="br0">&#40;</span>op<span class="sy0">,</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">,</span><span class="kw1">next</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="kw1">trap</span><span class="br0">&#40;</span><span class="sy0">,</span><br />      <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid character &quot;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">return</span><span class="br0">&#40;</span><span class="nu1">0</span><span class="br0">&#41;</span><br />    <span class="sy0">,</span><br />      <span class="kw1">if</span><span class="br0">&#40;</span><span class="kw1">setsearch</span><span class="br0">&#40;</span>v<span class="sy0">,</span><span class="kw1">eval</span><span class="br0">&#40;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span><br />        u<span class="sy0">=</span><span class="kw1">concat</span><span class="br0">&#40;</span>u<span class="sy0">,</span><span class="kw1">eval</span><span class="br0">&#40;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />      <span class="sy0">,</span><br />        <span class="kw1">print</span><span class="br0">&#40;</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="st0">&quot; not allowed&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="kw1">return</span><span class="br0">&#40;</span><span class="nu1">0</span><span class="br0">&#41;</span><br />      <span class="br0">&#41;</span><br />    <span class="br0">&#41;</span><br />  <span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">for</span><span class="br0">&#40;</span>i<span class="sy0">=</span><span class="nu1">2</span><span class="sy0">,</span>#s<span class="sy0">,</span><br />    <span class="kw1">if</span><span class="br0">&#40;</span><span class="sy0">!</span><span class="kw1">setsearch</span><span class="br0">&#40;</span>op<span class="sy0">,</span>s<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">&amp;!</span><span class="kw1">setsearch</span><span class="br0">&#40;</span>op<span class="sy0">,</span>s<span class="br0">&#91;</span>i<span class="sy0">-</span><span class="nu1">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">,</span><br />      <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Concatenating digits is not allowed!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">return</span><span class="br0">&#40;</span><span class="nu1">0</span><span class="br0">&#41;</span><br />    <span class="br0">&#41;</span><br />  <span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">if</span><span class="br0">&#40;</span><span class="kw1">vecsort</span><span class="br0">&#40;</span>u<span class="br0">&#41;</span><span class="sy0">!=</span>v<span class="sy0">,</span><br />    <span class="kw1">print</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid digits&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />    <span class="nu1">0</span><br />  <span class="sy0">,</span><br />    <span class="nu1">1</span><br />  <span class="br0">&#41;</span><br /><span class="br0">&#125;</span><span class="sy0">;</span></pre>
<h2><span class="mw-headline" id="Perl"><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=57" title="Edit section: Perl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="perl highlighted_source"><span class="co1">#!/usr/bin/env perl</span><br /><span class="kw2">use</span> warnings<span class="sy0">;</span><br /><span class="kw2">use</span> strict<span class="sy0">;</span><br /><span class="kw2">use</span> feature <span class="st_h">'say'</span><span class="sy0">;</span><br />&#160;<br /><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <span class="co4">&lt;&lt;'EOF';<br />The 24 Game<br />&#160;<br />Given any four digits in the range 1 to 9, which may have repetitions,<br />Using just the +, -, *, and / operators; and the possible use of<br />parentheses, (), show how to make an answer of 24.<br />&#160;<br />An answer of &quot;q&quot; or EOF will quit the game.<br />A blank answer will generate a new set of four digits.<br />Otherwise you are repeatedly asked for an expression until it evaluates to 24.<br />&#160;<br />Note: you cannot form multiple digit numbers from the supplied digits,<br />so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />EOF</span><br />&#160;<br /><span class="kw1">my</span> <span class="re0">$try</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span><br /><span class="kw1">while</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />  <span class="kw1">my</span> <span class="re0">@digits</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy0">+</span><a href="http://perldoc.perl.org/functions/int.html"><span class="kw3">int</span></a><span class="br0">&#40;</span><a href="http://perldoc.perl.org/functions/rand.html"><span class="kw3">rand</span></a><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span> <span class="nu0">1</span><span class="sy0">..</span><span class="nu0">4</span><span class="sy0">;</span><br />  say <span class="st0">&quot;<span class="es0">\n</span>Your four digits: &quot;</span><span class="sy0">,</span> <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a><span class="br0">&#40;</span><span class="st0">&quot; &quot;</span><span class="sy0">,</span> <span class="re0">@digits</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <span class="st0">&quot;Expression (try &quot;</span><span class="sy0">,</span> <span class="re0">$try</span><span class="sy0">++,</span> <span class="st0">&quot;): &quot;</span><span class="sy0">;</span><br />&#160;<br />  <span class="kw1">my</span> <span class="re0">$entry</span> <span class="sy0">=</span> <span class="sy0">&lt;&gt;;</span><br />  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><a href="http://perldoc.perl.org/functions/defined.html"><span class="kw3">defined</span></a> <span class="re0">$entry</span> <span class="sy0">||</span> <span class="re0">$entry</span> <span class="kw1">eq</span> <span class="st_h">'q'</span><span class="br0">&#41;</span> <br />    <span class="br0">&#123;</span> say <span class="st0">&quot;Goodbye.  Sorry you couldn't win.&quot;</span><span class="sy0">;</span> <span class="kw1">last</span><span class="sy0">;</span> <span class="br0">&#125;</span><br />  <span class="re0">$entry</span> <span class="sy0">=~</span> <span class="co2">s/\s+//g</span><span class="sy0">;</span>  <span class="co1"># remove all white space</span><br />  <span class="kw1">next</span> <span class="kw1">if</span> <span class="re0">$entry</span> <span class="kw1">eq</span> <span class="st_h">''</span><span class="sy0">;</span><br />&#160;<br />  <span class="kw1">my</span> <span class="re0">$given_digits</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a> <span class="st0">&quot;&quot;</span><span class="sy0">,</span> <a href="http://perldoc.perl.org/functions/sort.html"><span class="kw3">sort</span></a> <span class="re0">@digits</span><span class="sy0">;</span><br />  <span class="kw1">my</span> <span class="re0">$entry_digits</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/join.html"><span class="kw3">join</span></a> <span class="st0">&quot;&quot;</span><span class="sy0">,</span> <a href="http://perldoc.perl.org/functions/sort.html"><span class="kw3">sort</span></a> <a href="http://perldoc.perl.org/functions/grep.html"><span class="kw3">grep</span></a> <span class="br0">&#123;</span> <span class="co2">/\d/</span> <span class="br0">&#125;</span> <a href="http://perldoc.perl.org/functions/split.html"><span class="kw3">split</span></a><span class="br0">&#40;</span><span class="sy0">//,</span> <span class="re0">$entry</span><span class="br0">&#41;</span><span class="sy0">;</span><br />  <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$given_digits</span> <span class="kw1">ne</span> <span class="re0">$entry_digits</span> <span class="sy0">||</span>  <span class="co1"># not correct digits</span><br />      <span class="re0">$entry</span> <span class="sy0">=~</span> <span class="co2">/\d\d/</span> <span class="sy0">||</span>                <span class="co1"># combined digits</span><br />      <span class="re0">$entry</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/m.html"><span class="kw3">m</span></a><span class="sy0">|</span><span class="br0">&#91;</span><span class="sy0">-+*/</span><span class="br0">&#93;</span><span class="br0">&#123;</span><span class="nu0">2</span><span class="br0">&#125;</span><span class="sy0">|</span> <span class="sy0">||</span>          <span class="co1"># combined operators</span><br />      <span class="re0">$entry</span> <span class="sy0">=~</span> <a href="http://perldoc.perl.org/functions/tr.html"><span class="kw3">tr</span></a><span class="sy0">|-</span><span class="nu0">0</span><span class="sy0">-</span><span class="nu0">9</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">+*/||</span>c<span class="br0">&#41;</span>         <span class="co1"># Invalid characters</span><br />    <span class="br0">&#123;</span> say <span class="st0">&quot;That's not valid&quot;</span><span class="sy0">;</span>  <span class="kw1">next</span><span class="sy0">;</span> <span class="br0">&#125;</span><br />&#160;<br />  <span class="kw1">my</span> <span class="re0">$n</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/eval.html"><span class="kw3">eval</span></a> <span class="re0">$entry</span><span class="sy0">;</span><br />&#160;<br />  <span class="kw1">if</span>    <span class="br0">&#40;</span><span class="sy0">!</span><a href="http://perldoc.perl.org/functions/defined.html"><span class="kw3">defined</span></a> <span class="re0">$n</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> say <span class="st0">&quot;Invalid expression&quot;</span><span class="sy0">;</span> <span class="br0">&#125;</span><br />  <span class="kw1">elsif</span> <span class="br0">&#40;</span><span class="re0">$n</span> <span class="sy0">==</span> <span class="nu0">24</span><span class="br0">&#41;</span>    <span class="br0">&#123;</span> say <span class="st0">&quot;You win!&quot;</span><span class="sy0">;</span> <span class="kw1">last</span><span class="sy0">;</span> <span class="br0">&#125;</span><br />  <span class="kw1">else</span>                <span class="br0">&#123;</span> say <span class="st0">&quot;Sorry, your expression is $n, not 24&quot;</span><span class="sy0">;</span> <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="Perl_6"><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=58" title="Edit section: Perl 6">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Rakudo" title="Rakudo">Rakudo</a> version 2015.12</div>
<pre class="perl6 highlighted_source"><span class="kw2">use</span> MONKEY<span class="sy0">-</span>SEE<span class="sy0">-</span>NO<span class="sy0">-</span>EVAL<span class="sy0">;</span><br />&#160;<br /><span class="kw3">say</span> <span class="st0">&quot;Here are your digits: &quot;</span><span class="sy0">,</span> <br /><span class="kw1">constant</span> <span class="re0">@digits</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">..</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">roll</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>»<span class="sy0">.</span><span class="me1">Str</span><span class="sy0">;</span><br />&#160;<br /><span class="kw2">grammar</span> Exp24 <span class="br0">&#123;</span><br />    <span class="kw2">token</span> TOP <span class="br0">&#123;</span> <span class="sy0">^</span> <span class="sy0">&lt;</span>exp<span class="sy0">&gt;</span> $ <span class="br0">&#123;</span> <span class="kw1">fail</span> <span class="kw1">unless</span> EVAL<span class="br0">&#40;</span>$<span class="sy0">/</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">24</span> <span class="br0">&#125;</span> <span class="br0">&#125;</span><br />    <span class="kw2">rule</span> <span class="kw3">exp</span> <span class="br0">&#123;</span> <span class="sy0">&lt;</span>term<span class="sy0">&gt;+</span> <span class="sy0">%</span> <span class="sy0">&lt;</span>op<span class="sy0">&gt;</span> <span class="br0">&#125;</span><br />    <span class="kw2">rule</span> term <span class="br0">&#123;</span> <span class="st_h">'('</span> <span class="sy0">&lt;</span>exp<span class="sy0">&gt;</span> <span class="st_h">')'</span> <span class="sy0">|</span> <span class="sy0">&lt;</span><span class="re0">@digits</span><span class="sy0">&gt;</span> <span class="br0">&#125;</span><br />    <span class="kw2">token</span> op <span class="br0">&#123;</span> <span class="sy0">&lt;</span> <span class="sy0">+</span> <span class="sy0">-</span> <span class="sy0">*</span> <span class="sy0">/</span> <span class="sy0">&gt;</span> <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="kw1">while</span> <span class="kw1">my</span> <span class="re0">$exp</span> <span class="sy0">=</span> prompt <span class="st0">&quot;<span class="es0">\n</span>24? &quot;</span> <span class="br0">&#123;</span><br />    <span class="kw1">if</span> try Exp24<span class="sy0">.</span><span class="me1">parse</span><span class="sy0">:</span> <span class="re0">$exp</span> <span class="br0">&#123;</span><br />        <span class="kw3">say</span> <span class="st0">&quot;You win&#160;:)&quot;</span><span class="sy0">;</span><br />        <span class="kw1">last</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span> <span class="kw1">else</span> <span class="br0">&#123;</span><br />        <span class="kw3">say</span> <span class="br0">&#40;</span><br />            <span class="st_h">'Sorry.  Try again.'</span> <span class="kw1">xx</span> <span class="nu0">20</span><span class="sy0">,</span><br />            <span class="st_h">'Try harder.'</span> <span class="kw1">xx</span> <span class="nu0">5</span><span class="sy0">,</span><br />            <span class="st_h">'Nope.  Not even close.'</span> <span class="kw1">xx</span> <span class="nu0">2</span><span class="sy0">,</span><br />            <span class="st_h">'Are you five or something?'</span><span class="sy0">,</span><br />            <span class="st_h">'Come on, you can do better than that.'</span><br />        <span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">flat</span><span class="sy0">.</span><span class="kw3">pick</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;</pre>
<p>The <code>MONKEY-SEE-NO-EVAL</code> pragma enables the dangerous <code>EVAL</code> function, which will compile and execute even user input. In this example, the grammar used to parse the input should ensure that only safe expressions are evaluated.
</p>
<h2><span class="mw-headline" id="Phix"><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=59" title="Edit section: Phix">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br />-- Note this uses simple/strict left association, so for example:<br />--  1+2*1*8 is ((1+2)*1)*8 not 1+((2*1)*8) [or 1+(2*(1*8))], and<br />--  7-(2*2)*8 is (7-(2*2))*8 not 7-((2*2)*8)<br />--  Does not allow unary minus on the first digit.<br />-- Uses solve24() from the next task, when it can.<br />--  (you may want to comment out the last 2 lines/uncomment the if 0, in that file)<br />--<br />--include 24_game_solve.exw<br />&#160;<br />--with trace<br />forward function eval(string equation, sequence unused, integer idx=1)<br />-- (the above definition is entirely optional, but good coding style)<br />&#160;<br />constant errorcodes = {&quot;digit expected&quot;,                    -- 1<br />                       &quot;')' expected&quot;,                      -- 2<br />                       &quot;digit already used&quot;,                -- 3<br />                       &quot;digit not offered&quot;,                 -- 4<br />                       &quot;operand expected&quot;}                  -- 5<br />&#160;<br />function card(integer idx)  -- (for error handling)<br />    if idx=1 then return &quot;1st&quot; end if<br />    if idx=2 then return &quot;2nd&quot; end if<br />    -- (assumes expression is less than 21 characters)<br />    return sprintf(&quot;%dth&quot;,idx)<br />end function<br />&#160;<br />function errorchar(sequence equation, integer idx)<br />    if idx&gt;length(equation) then return &quot;&quot; end if<br />    return sprintf(&quot;(%s)&quot;,equation[idx])<br />end function<br />&#160;<br />sequence rset = repeat(0,4)<br />&#160;<br />procedure new_rset()<br />    for i=1 to length(rset) do<br />        rset[i] = rand(9)<br />    end for<br />end procedure<br />&#160;<br />function get_operand(string equation, integer idx, sequence unused)<br />integer ch, k,<br />        error = 1 -- &quot;digit expected&quot;<br />atom res<br />&#160;<br />    if idx&lt;=length(equation) then<br />        ch = equation[idx]<br />        if ch='(' then<br />            {error,res,unused,idx} = eval(equation,unused,idx+1)<br />            if error=0<br />            and idx&lt;=length(equation) then<br />                ch = equation[idx]<br />                if ch=')' then<br />                    return {0,res,unused,idx+1}<br />                end if<br />            end if<br />            if error=0 then<br />                error = 2   -- &quot;')' expected&quot;<br />            end if<br />        elsif ch&gt;='0' and ch&lt;='9' then<br />            res = ch-'0'<br />            k = find(res,unused)<br />            if k!=0 then<br />                unused[k..k] = {}<br />                return {0,res,unused,idx+1}<br />            end if<br />            if find(res,rset) then<br />                error = 3  -- &quot;digit already used&quot;<br />            else<br />                error = 4  -- &quot;digit not offered&quot;<br />            end if<br />        end if<br />    end if<br />    return {error,0,unused,idx}<br />end function<br />&#160;<br />function get_operator(string equation, integer idx)<br />integer ch, error = 5 -- &quot;operand expected&quot;<br />    if idx&lt;=length(equation) then<br />        ch = equation[idx]<br />        if find(ch,&quot;+-/*&quot;) then<br />            return {0,ch,idx+1}<br />        end if<br />    end if<br />    return {error,0,idx}<br />end function<br />&#160;<br />function eval(string equation, sequence unused, integer idx=1)<br />atom lhs, rhs<br />integer ch, error<br />    {error,lhs,unused,idx} = get_operand(equation,idx,unused)<br />    if error=0 then<br />        while 1 do<br />            {error,ch,idx} = get_operator(equation,idx)<br />            if error!=0 then exit end if<br />            {error,rhs,unused,idx} = get_operand(equation,idx,unused)<br />            if error!=0 then exit end if<br />            if    ch='+' then       lhs += rhs<br />            elsif ch='-' then       lhs -= rhs<br />            elsif ch='/' then       lhs /= rhs<br />            elsif ch='*' then       lhs *= rhs<br />            else&#160;?9/0 -- (should not happen)<br />            end if<br />            if idx&gt;length(equation) then<br />                return {0,lhs,unused,idx}<br />            end if<br />            ch = equation[idx]<br />            if ch=')' then<br />                return {0,lhs,unused,idx}<br />            end if<br />        end while<br />    end if<br />    return {error,0,unused,idx}<br />end function<br />&#160;<br />function strip(string equation)<br />    for i=length(equation) to 1 by -1 do<br />        if find(equation[i],&quot; \t\r\n&quot;) then<br />            equation[i..i] = &quot;&quot;<br />        end if<br />    end for<br />    return equation<br />end function<br />&#160;<br />function strip0(atom a) -- (for error handling)<br />string res = sprintf(&quot;%f&quot;,a)<br />integer ch<br />    for i=length(res) to 2 by -1 do<br />        ch = res[i]<br />        if ch='.' then return res[1..i-1] end if<br />        if ch!='0' then return res[1..i] end if<br />    end for<br />    return res<br />end function<br />&#160;<br />procedure play()<br />sequence unused<br />string equation<br />integer error,idx<br />atom res<br />&#160;<br />    new_rset()<br />    printf(1,&quot;Enter an expression which evaluates to exactly 24\n&quot;&amp;<br />           &quot;Use all of, and only, the digits&#160;%d,&#160;%d,&#160;%d, and&#160;%d\n&quot;&amp;<br />           &quot;You may only use the operators + - * /\n&quot;&amp;<br />           &quot;Parentheses and spaces are allowed\n&quot;,rset)<br />    while 1 do<br />        equation = strip(gets(0))<br />        if upper(equation)=&quot;Q&quot; then exit end if<br />        if equation=&quot;?&quot; then<br />            puts(1,&quot;\n&quot;)<br />            integer r_solve24 = routine_id(&quot;solve24&quot;) -- see below<br />            if r_solve24=-1 then -- (someone copied just this code out?)<br />                puts(1,&quot;no solve24 routine\n&quot;)<br />            else<br />                call_proc(r_solve24,{rset})<br />            end if<br />        else<br />            {error,res,unused,idx} = eval(equation, rset)<br />            if error!=0 then<br />                printf(1,&quot; &#160;%s on the&#160;%s character%s\n&quot;,{errorcodes[error],card(idx),errorchar(equation,idx)})<br />            elsif idx&lt;=length(equation) then<br />                printf(1,&quot;\neval() returned only having processed&#160;%d of&#160;%d characters\n&quot;,{idx,length(equation)})<br />            elsif length(unused) then<br />                printf(1,&quot; not all the digits were used\n&quot;,error)<br />            elsif res!=24 then<br />                printf(1,&quot;\nresult is&#160;%s, not 24\n&quot;,{strip0(res)})<br />            else<br />                puts(1,&quot; correct!  Press any key to quit\n&quot;)<br />                if getc(0) then end if<br />                exit<br />            end if<br />        end if<br />        puts(1,&quot;enter Q to give up and quit\n&quot;)<br />    end while<br />end procedure<br />&#160;<br />    play()<br />&#160;</pre>
<h2><span class="mw-headline" id="PHP"><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=60" title="Edit section: PHP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Perl">Perl</a></div>
<pre class="php highlighted_source">#!/usr/bin/env php<br />The 24 Game<br />&#160;<br />Given any four digits in the range 1 to 9, which may have repetitions,<br />Using just the +, -, *, and / operators; and the possible use of<br />brackets, (), show how to make an answer of 24.<br />&#160;<br />An answer of &quot;q&quot; will quit the game.<br />An answer of &quot;!&quot; will generate a new set of four digits.<br />Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />&#160;<br />Note: you cannot form multiple digit numbers from the supplied digits,<br />so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />&#160;<br /><span class="kw2">&lt;?php</span><br />&#160;<br /><span class="kw1">while</span> <span class="br0">&#40;</span><span class="kw4">true</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="re0">$numbers</span> <span class="sy0">=</span> make_numbers<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="re0">$iteration_num</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span> <span class="sy0">;</span> <span class="re0">$iteration_num</span><span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">echo</span> <span class="st0">&quot;Expresion <span class="es4">$iteration_num</span>: &quot;</span><span class="sy0">;</span><br />&#160;<br />        <span class="re0">$entry</span> <span class="sy0">=</span> <a href="http://www.php.net/rtrim"><span class="kw3">rtrim</span></a><span class="br0">&#40;</span><a href="http://www.php.net/fgets"><span class="kw3">fgets</span></a><span class="br0">&#40;</span>STDIN<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$entry</span> <span class="sy0">===</span> <span class="st_h">'!'</span><span class="br0">&#41;</span> <span class="kw1">break</span><span class="sy0">;</span><br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$entry</span> <span class="sy0">===</span> <span class="st_h">'q'</span><span class="br0">&#41;</span> <a href="http://www.php.net/exit"><span class="kw3">exit</span></a><span class="sy0">;</span><br />&#160;<br />        <span class="re0">$result</span> <span class="sy0">=</span> play<span class="br0">&#40;</span><span class="re0">$numbers</span><span class="sy0">,</span> <span class="re0">$entry</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$result</span> <span class="sy0">===</span> <span class="kw4">null</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">echo</span> <span class="st0">&quot;That's not valid<span class="es1">\n</span>&quot;</span><span class="sy0">;</span><br />            <span class="kw1">continue</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw1">elseif</span> <span class="br0">&#40;</span><span class="re0">$result</span> <span class="sy0">!=</span> <span class="nu0">24</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">echo</span> <span class="st0">&quot;Sorry, that's <span class="es4">$result</span><span class="es1">\n</span>&quot;</span><span class="sy0">;</span><br />            <span class="kw1">continue</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw1">else</span> <span class="br0">&#123;</span><br />            <span class="kw1">echo</span> <span class="st0">&quot;That's right! 24!!<span class="es1">\n</span>&quot;</span><span class="sy0">;</span><br />            <a href="http://www.php.net/exit"><span class="kw3">exit</span></a><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="kw2">function</span> make_numbers<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="re0">$numbers</span> <span class="sy0">=</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">echo</span> <span class="st0">&quot;Your four digits: &quot;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="re0">$i</span> <span class="sy0">&lt;</span> <span class="nu0">4</span><span class="sy0">;</span> <span class="re0">$i</span><span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="re0">$number</span> <span class="sy0">=</span> <a href="http://www.php.net/rand"><span class="kw3">rand</span></a><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">&#41;</span><span class="sy0">;</span><br />        <span class="co1">// The check is needed to avoid E_NOTICE from PHP</span><br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><a href="http://www.php.net/isset"><span class="kw3">isset</span></a><span class="br0">&#40;</span><span class="re0">$numbers</span><span class="br0">&#91;</span><span class="re0">$number</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="re0">$numbers</span><span class="br0">&#91;</span><span class="re0">$number</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />        <span class="re0">$numbers</span><span class="br0">&#91;</span><span class="re0">$number</span><span class="br0">&#93;</span><span class="sy0">++;</span><br />        <span class="kw1">print</span> <span class="st0">&quot;<span class="es4">$number</span> &quot;</span><span class="sy0">;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">print</span> <span class="st0">&quot;<span class="es1">\n</span>&quot;</span><span class="sy0">;</span><br />&#160;<br />    <span class="kw1">return</span> <span class="re0">$numbers</span><span class="sy0">;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="kw2">function</span> play<span class="br0">&#40;</span><span class="re0">$numbers</span><span class="sy0">,</span> <span class="re0">$expression</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="re0">$operator</span> <span class="sy0">=</span> <span class="kw4">true</span><span class="sy0">;</span><br />    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="re0">$length</span> <span class="sy0">=</span> <a href="http://www.php.net/strlen"><span class="kw3">strlen</span></a><span class="br0">&#40;</span><span class="re0">$expression</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="re0">$i</span> <span class="sy0">&lt;</span> <span class="re0">$length</span><span class="sy0">;</span> <span class="re0">$i</span><span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="re0">$character</span> <span class="sy0">=</span> <span class="re0">$expression</span><span class="br0">&#91;</span><span class="re0">$i</span><span class="br0">&#93;</span><span class="sy0">;</span><br />&#160;<br />        <span class="kw1">if</span> <span class="br0">&#40;</span><a href="http://www.php.net/in_array"><span class="kw3">in_array</span></a><span class="br0">&#40;</span><span class="re0">$character</span><span class="sy0">,</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'('</span><span class="sy0">,</span> <span class="st_h">')'</span><span class="sy0">,</span> <span class="st_h">' '</span><span class="sy0">,</span> <span class="st0">&quot;<span class="es1">\t</span>&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">continue</span><span class="sy0">;</span><br />&#160;<br />        <span class="re0">$operator</span> <span class="sy0">=</span> <span class="sy0">!</span><span class="re0">$operator</span><span class="sy0">;</span><br />&#160;<br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><span class="re0">$operator</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">!</span><a href="http://www.php.net/empty"><span class="kw3">empty</span></a><span class="br0">&#40;</span><span class="re0">$numbers</span><span class="br0">&#91;</span><span class="re0">$character</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />                <span class="re0">$numbers</span><span class="br0">&#91;</span><span class="re0">$character</span><span class="br0">&#93;</span><span class="sy0">--;</span><br />                <span class="kw1">continue</span><span class="sy0">;</span><br />            <span class="br0">&#125;</span><br />            <span class="kw1">return</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw1">elseif</span> <span class="br0">&#40;</span><span class="sy0">!</span><a href="http://www.php.net/in_array"><span class="kw3">in_array</span></a><span class="br0">&#40;</span><span class="re0">$character</span><span class="sy0">,</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="st_h">'+'</span><span class="sy0">,</span> <span class="st_h">'-'</span><span class="sy0">,</span> <span class="st_h">'*'</span><span class="sy0">,</span> <span class="st_h">'/'</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">return</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">foreach</span> <span class="br0">&#40;</span><span class="re0">$numbers</span> <span class="kw1">as</span> <span class="re0">$remaining</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">if</span> <span class="br0">&#40;</span><span class="re0">$remaining</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />            <span class="kw1">return</span><span class="sy0">;</span><br />        <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <span class="kw1">return</span> <a href="http://www.php.net/eval"><span class="kw3">eval</span></a><span class="br0">&#40;</span><span class="st0">&quot;return <span class="es4">$expression</span>;&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /><span class="br0">&#125;</span><br /><span class="sy1">?&gt;</span></pre>
<h2><span class="mw-headline" id="PicoLisp"><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=61" title="Edit section: PicoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">(de checkExpression (Lst Exe)<br />   (make<br />      (when (diff Lst (fish num? Exe))<br />         (link &quot;Not all numbers used&quot; ) )<br />      (when (diff (fish num? Exe) Lst)<br />         (link &quot;Using wrong number(s)&quot;) )<br />      (when (diff (fish sym? Exe) '(+ - * /))<br />         (link &quot;Using illegal operator(s)&quot;) ) ) )<br />&#160;<br />(loop<br />   (setq Numbers (make (do 4 (link (rand 1 9)))))<br />   (prinl<br />      &quot;Please enter a Lisp expression using (, ), +, -, *, / and &quot;<br />      (glue &quot;, &quot; Numbers) )<br />   (prin &quot;Or a single dot '.' to stop: &quot;)<br />   (T (= &quot;.&quot; (setq Reply (catch '(NIL) (in NIL (read)))))<br />      (bye) )<br />   (cond<br />      ((str? Reply)<br />         (prinl &quot;-- Input error: &quot; Reply) )<br />      ((checkExpression Numbers Reply)<br />         (prinl &quot;-- Illegal Expression&quot;)<br />         (for S @<br />            (space 3)<br />            (prinl S) ) )<br />      ((str? (setq Result (catch '(NIL) (eval Reply))))<br />         (prinl &quot;-- Evaluation error: &quot; @) )<br />      ((= 24 Result)<br />         (prinl &quot;++ Congratulations! Correct result&#160;:-)&quot;) )<br />      (T (prinl &quot;Sorry, this gives &quot; Result)) )<br />   (prinl) )</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Please enter a Lisp expression using (, ), +, -, *, / and 1, 3, 3, 5
Or a single dot '.' to stop: (* (+ 3 1) (+ 5 1))
++ Congratulations! Correct result&#160;:-)

Please enter a Lisp expression using (, ), +, -, *, / and 8, 4, 7, 1
Or a single dot '.' to stop: (* 8 (% 7 3) 9)
-- Illegal Expression
   Not all numbers used
   Using wrong number(s)
   Using illegal operator(s)

Please enter a Lisp expression using (, ), +, -, *, / and 4, 2, 2, 3
Or a single dot '.' to stop: (/ (+ 4 3) (- 2 2))
-- Evaluation error: Div/0

Please enter a Lisp expression using (, ), +, -, *, / and 8, 4, 5, 9
Or a single dot '.' to stop: .</pre>
<h2><span class="mw-headline" id="PL.2FI"><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=62" title="Edit section: PL/I">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="pli highlighted_source">&#160;<br /><span class="coMULTI">/* Plays the game of 24. */</span><br />&#160;<br />TWENTYFOUR<span class="sy0">:</span> <span class="kw1">procedure</span> <span class="kw1">options</span> <span class="br0">&#40;</span><span class="kw1">main</span><span class="br0">&#41;</span><span class="sy0">;</span>            <span class="coMULTI">/* 14 August 2010 */</span><br />&#160;<br />CTP<span class="sy0">:</span> <span class="kw1">procedure</span> <span class="br0">&#40;</span>E<span class="br0">&#41;</span> <span class="kw1">returns</span> <span class="br0">&#40;</span><span class="kw1">character</span><span class="br0">&#40;</span><span class="nu0">50</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> E <span class="kw1">character</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> OUT <span class="kw1">character</span> <span class="br0">&#40;</span><span class="kw1">length</span><span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> S <span class="kw1">character</span> <span class="br0">&#40;</span><span class="kw1">length</span><span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">varying</span> <span class="kw1">controlled</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> c <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> i <span class="kw1">fixed</span> <span class="kw1">binary</span><span class="sy0">;</span><br />&#160;<br /><span class="coMULTI">/* This procedure converts an arithmetic expression to Reverse Polish Form. */</span><br /><span class="coMULTI">/* A push-down pop-up stack is used for operators. */</span><br /><span class="kw1">priority</span><span class="sy0">:</span> <span class="kw1">procedure</span> <span class="br0">&#40;</span>a<span class="br0">&#41;</span> <span class="kw1">returns</span> <span class="br0">&#40;</span><span class="kw1">fixed</span> <span class="kw1">decimal</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> a <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> ops <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span> <span class="kw1">initial</span> <span class="br0">&#40;</span><span class="st0">'#+-*/'</span><span class="br0">&#41;</span> <span class="kw1">varying</span> <span class="kw1">static</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> pri<span class="br0">&#40;</span><span class="nu0">6</span><span class="br0">&#41;</span> <span class="kw1">fixed</span> <span class="kw1">decimal</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">initial</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw1">static</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> i <span class="kw1">fixed</span> <span class="kw1">binary</span><span class="sy0">;</span><br />&#160;<br />   i <span class="sy0">=</span> <span class="kw1">index</span><span class="br0">&#40;</span>ops<span class="sy0">,</span>a<span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">return</span> <span class="br0">&#40;</span>pri<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br /><span class="kw1">end</span> <span class="kw1">priority</span><span class="sy0">;</span><br />&#160;<br />   <span class="kw1">allocate</span> S<span class="sy0">;</span> S <span class="sy0">=</span> <span class="st0">'#'</span><span class="sy0">;</span> out <span class="sy0">=</span> <span class="st0">''</span><span class="sy0">;</span><br />   <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw1">length</span><span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span><br />      c <span class="sy0">=</span> <span class="kw1">substr</span><span class="br0">&#40;</span>E<span class="sy0">,</span> i<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">if</span> <span class="kw1">index</span><span class="br0">&#40;</span><span class="st0">'+-*/'</span><span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span><br />         <span class="kw1">do</span><span class="sy0">;</span><br />            <span class="coMULTI">/* Copy any higher priority operators on the stack to the output. */</span><br />            <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span> <span class="kw1">priority</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="sy0">&lt;=</span> <span class="kw1">priority</span><span class="br0">&#40;</span><span class="br0">&#40;</span>S<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span><br />               out <span class="sy0">=</span> out <span class="sy0">||</span> S<span class="sy0">;</span><br />               <span class="kw1">free</span> S<span class="sy0">;</span><br />            <span class="kw1">end</span><span class="sy0">;</span><br />            <span class="coMULTI">/* Copy the input character to the stack. */</span><br />            <span class="kw1">allocate</span> S<span class="sy0">;</span> S <span class="sy0">=</span> c<span class="sy0">;</span><br />         <span class="kw1">end</span><span class="sy0">;</span><br />&#160;<br />      <span class="kw1">if</span> <span class="kw1">index</span><span class="br0">&#40;</span><span class="st0">'123456789'</span><span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span><br />         out <span class="sy0">=</span> out <span class="sy0">||</span> c<span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">do</span> <span class="kw1">while</span> <span class="br0">&#40;</span><span class="kw1">allocation</span><span class="br0">&#40;</span>S<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      out <span class="sy0">=</span> out <span class="sy0">||</span> s<span class="sy0">;</span><br />      <span class="kw1">free</span> S<span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">return</span> <span class="br0">&#40;</span>out<span class="br0">&#41;</span><span class="sy0">;</span><br /><span class="kw1">end</span> CTP<span class="sy0">;</span><br />&#160;<br /><span class="coMULTI">/* Given a push-down pop-up stack, and an expresion in  */</span><br /><span class="coMULTI">/* Reverse Polish notation, evaluate the expression.    */</span><br />EVAL<span class="sy0">:</span> <span class="kw1">procedure</span> <span class="br0">&#40;</span>E<span class="br0">&#41;</span> <span class="kw1">returns</span> <span class="br0">&#40;</span><span class="kw1">fixed</span> <span class="kw1">decimal</span><span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> E <span class="kw1">character</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> S <span class="kw1">fixed</span> <span class="kw1">decimal</span> <span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span> <span class="kw1">controlled</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> <span class="br0">&#40;</span>a<span class="sy0">,</span> b<span class="br0">&#41;</span> <span class="kw1">fixed</span> <span class="kw1">decimal</span> <span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> c <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> p <span class="kw1">fixed</span> <span class="kw1">binary</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> <span class="br0">&#40;</span>empty_stack<span class="sy0">,</span> invalid_expression<span class="br0">&#41;</span> <span class="kw1">condition</span><span class="sy0">;</span><br />&#160;<br />   <span class="kw1">on</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>empty_stack<span class="br0">&#41;</span> <span class="kw1">begin</span><span class="sy0">;</span><br />      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'Your expression is not valid.'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">stop</span><span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">on</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>invalid_expression<span class="br0">&#41;</span> <span class="kw1">begin</span><span class="sy0">;</span><br />      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'Your expression is not valid.'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">stop</span><span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />&#160;<br />   <span class="kw1">do</span> p <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw1">length</span><span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span><br />      c <span class="sy0">=</span> <span class="kw1">substr</span><span class="br0">&#40;</span>E<span class="sy0">,</span> p<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">if</span> <span class="kw1">index</span><span class="br0">&#40;</span><span class="st0">'123456789'</span><span class="sy0">,</span> c<span class="br0">&#41;</span> <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span><br />         <span class="kw1">do</span><span class="sy0">;</span> <span class="kw1">allocate</span> S<span class="sy0">;</span> S <span class="sy0">=</span> c<span class="sy0">;</span> <span class="kw1">end</span><span class="sy0">;</span><br />      <span class="kw1">else</span><br />         <span class="kw1">do</span><span class="sy0">;</span><br />            <span class="kw1">if</span> <span class="kw1">allocation</span><span class="br0">&#40;</span>S<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">then</span> <span class="kw1">signal</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>empty_stack<span class="br0">&#41;</span><span class="sy0">;</span><br />            b <span class="sy0">=</span> S<span class="sy0">;</span> <span class="kw1">free</span> S<span class="sy0">;</span><br />            <span class="kw1">if</span> <span class="kw1">allocation</span><span class="br0">&#40;</span>S<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">then</span> <span class="kw1">signal</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>empty_stack<span class="br0">&#41;</span><span class="sy0">;</span><br />            a <span class="sy0">=</span> S<span class="sy0">;</span><br />            <span class="kw1">select</span> <span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="sy0">;</span><br />               <span class="kw1">when</span> <span class="br0">&#40;</span><span class="st0">'+'</span><span class="br0">&#41;</span> S <span class="sy0">=</span> a <span class="sy0">+</span> b<span class="sy0">;</span> <br />               <span class="kw1">when</span> <span class="br0">&#40;</span><span class="st0">'-'</span><span class="br0">&#41;</span> S <span class="sy0">=</span> a <span class="sy0">-</span> b<span class="sy0">;</span><br />               <span class="kw1">when</span> <span class="br0">&#40;</span><span class="st0">'*'</span><span class="br0">&#41;</span> S <span class="sy0">=</span> a <span class="sy0">*</span> b<span class="sy0">;</span><br />               <span class="kw1">when</span> <span class="br0">&#40;</span><span class="st0">'/'</span><span class="br0">&#41;</span> S <span class="sy0">=</span> a <span class="sy0">/</span> b<span class="sy0">;</span><br />               <span class="kw1">when</span> <span class="br0">&#40;</span><span class="st0">'^'</span><span class="br0">&#41;</span> S <span class="sy0">=</span> a <span class="sy0">**</span> b<span class="sy0">;</span><br />               <span class="kw1">otherwise</span> <span class="kw1">signal</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>invalid_expression<span class="br0">&#41;</span><span class="sy0">;</span><br />            <span class="kw1">end</span><span class="sy0">;</span><br />         <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">if</span> <span class="kw1">allocation</span><span class="br0">&#40;</span>S<span class="br0">&#41;</span> <span class="sy0">^=</span> <span class="nu0">1</span> <span class="kw1">then</span> <span class="kw1">signal</span> <span class="kw1">condition</span> <span class="br0">&#40;</span>invalid_expression<span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">return</span> <span class="br0">&#40;</span>S<span class="br0">&#41;</span><span class="sy0">;</span><br /><span class="kw1">END</span> eval<span class="sy0">;</span><br />&#160;<br /><span class="coMULTI">/* Check that the player has used every digit and no others. */</span><br />VALIDATE<span class="sy0">:</span> <span class="kw1">procedure</span> <span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> E <span class="kw1">character</span> <span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> E2 <span class="kw1">character</span> <span class="br0">&#40;</span><span class="kw1">length</span><span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">,</span> <span class="br0">&#40;</span>i<span class="sy0">,</span> j<span class="br0">&#41;</span> <span class="kw1">fixed</span> <span class="kw1">binary</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> digits<span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span> <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">static</span> <span class="kw1">initial</span><br />      <span class="br0">&#40;</span><span class="st0">'1'</span><span class="sy0">,</span> <span class="st0">'2'</span><span class="sy0">,</span> <span class="st0">'3'</span><span class="sy0">,</span> <span class="st0">'4'</span><span class="sy0">,</span> <span class="st0">'5'</span><span class="sy0">,</span> <span class="st0">'6'</span><span class="sy0">,</span> <span class="st0">'7'</span><span class="sy0">,</span> <span class="st0">'8'</span><span class="sy0">,</span> <span class="st0">'9'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />   E2 <span class="sy0">=</span> <span class="kw1">translate</span><span class="br0">&#40;</span>E<span class="sy0">,</span> <span class="st0">'    '</span><span class="sy0">,</span> <span class="st0">'+-*/'</span> <span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><span class="sy0">;</span><br />      j <span class="sy0">=</span> <span class="kw1">index</span><span class="br0">&#40;</span>E2<span class="sy0">,</span> digits<span class="br0">&#40;</span>k<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br />      <span class="kw1">if</span> j <span class="sy0">&gt;</span> <span class="nu0">0</span> <span class="kw1">then</span><br />         <span class="kw1">substr</span><span class="br0">&#40;</span>E2<span class="sy0">,</span> j<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">' '</span><span class="sy0">;</span><br />      <span class="kw1">else</span><br />         <span class="kw1">do</span><span class="sy0">;</span> <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'You must use the digits supplied.'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="kw1">stop</span><span class="sy0">;</span> <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">end</span><span class="sy0">;</span><br />   <span class="kw1">if</span> E2 <span class="sy0">^=</span> <span class="st0">''</span> <span class="kw1">then</span><br />      <span class="kw1">do</span><span class="sy0">;</span> <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'You must use every digit supplied, and no others.'</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="kw1">stop</span><span class="sy0">;</span> <span class="kw1">end</span><span class="sy0">;</span><br /><span class="kw1">end</span> VALIDATE<span class="sy0">;</span><br />&#160;<br />   <span class="kw1">declare</span> E <span class="kw1">character</span> <span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span> <span class="kw1">varying</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> k<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw1">fixed</span> <span class="kw1">decimal</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> <span class="br0">&#40;</span><span class="kw1">time</span><span class="sy0">,</span> <span class="kw1">random</span><span class="br0">&#41;</span> <span class="kw1">builtin</span><span class="sy0">;</span><br />   <span class="kw1">declare</span> V <span class="kw1">fixed</span> <span class="kw1">decimal</span> <span class="br0">&#40;</span><span class="nu0">15</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />   k <span class="sy0">=</span> <span class="kw1">random</span><span class="br0">&#40;</span><span class="kw1">TIME</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   k <span class="sy0">=</span> <span class="nu0">9</span><span class="sy0">*</span><span class="kw1">random</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span><br />   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">edit</span> <span class="br0">&#40;</span><span class="st0">'Here are four integers:'</span><span class="sy0">,</span> k<span class="br0">&#41;</span> <span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'With these integers, make up an arithmetic expression'</span> <span class="sy0">||</span><br />      <span class="st0">' that evaluates to 24.'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'You can use any of the operators +, -, *, and /'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'E.g., Given the integers 1, 3, 7, and 6,'</span> <span class="sy0">||</span><br />      <span class="st0">' the expression 6*3+7-1 evaluates to 24.'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br />   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'Please type an arithmetic expression&#160;:'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">get</span> <span class="kw1">edit</span> <span class="br0">&#40;</span>E<span class="br0">&#41;</span> <span class="br0">&#40;</span>L<span class="br0">&#41;</span> <span class="kw1">COPY</span><span class="sy0">;</span><br />&#160;<br />   <span class="kw1">CALL</span> VALIDATE <span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span> <span class="coMULTI">/* Check that the player has used every digit and no others. */</span><br />&#160;<br />   E <span class="sy0">=</span> CTP<span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span><br />   V <span class="sy0">=</span> EVAL <span class="br0">&#40;</span>E<span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">if</span> V <span class="sy0">=</span> <span class="nu0">24</span> <span class="kw1">then</span><br />      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">&#40;</span><span class="st0">'Congratulations: the expression evaluates to 24.'</span><span class="br0">&#41;</span><span class="sy0">;</span><br />   <span class="kw1">else</span><br />      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">edit</span> <span class="br0">&#40;</span><span class="st0">'The result is '</span><span class="sy0">,</span> <span class="kw1">trim</span><span class="br0">&#40;</span>V<span class="br0">&#41;</span><span class="sy0">,</span> <span class="st0">' which is not correct'</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">;</span><br />&#160;<br /><span class="kw1">end</span> TWENTYFOUR<span class="sy0">;</span><br />&#160;</pre>
<h2><span class="mw-headline" id="Potion"><a href="/wiki/Category:Potion" title="Category:Potion">Potion</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=63" title="Edit section: Potion">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">is_num = (s):<br />  x = s ord(0)<br />  if (x &gt;= &quot;0&quot;ord &amp;&amp; x &lt;= &quot;9&quot;ord): true.<br />  else: false.<br />  .<br />&#160;<br />nums = (s):<br />  res = ()<br />  0 to (s length, (b):<br />    c = s(b)<br />    if (is_num(c)):<br />      res push(c).<br />  .)<br />  res.<br />&#160;<br />try = 1<br />while (true):<br />  r = rand string<br />  digits = (r(0),r(1),r(2),r(3))<br />  &quot;\nMy next four digits: &quot; print<br />  digits join(&quot; &quot;) say<br />  digit_s = digits ins_sort string<br />&#160;<br />  (&quot;Your expression to create 24 (try &quot;, try, &quot;): &quot;) print<br />  entry = read slice(0,-1)<br />  expr = entry eval<br />  parse = nums(entry)<br />  parse_s = parse clone ins_sort string<br />  try++<br />  if (parse length&#160;!= 4):<br />    (&quot;Wrong number of digits:&quot;, parse) say.<br />  elsif (parse_s&#160;!= digit_s):<br />    (&quot;Wrong digits:&quot;, parse) say.<br />  elsif (expr == 24):<br />    &quot;You won!&quot; say<br />    entry print, &quot; =&gt; 24&quot; say<br />    return().<br />  else:<br />    (entry, &quot; =&gt; &quot;, expr string, &quot;&#160;!= 24&quot;) join(&quot;&quot;) say.<br />.</pre>
<h2><span class="mw-headline" id="PowerShell"><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=64" title="Edit section: PowerShell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The "isNumeric" function was taken from the "Determine_if_a_string_is_numeric" task.
</p><p>todo: add a validation that all given digits were used. Right now the validation is that 4 digits should be used in the expression, but not exactly the ones given. (example: if you are given the digits 2, 2, 6, 9 this program accepts the following solution: 6 * <b>4</b> * 2 / 2)
</p>
<pre class="powershell highlighted_source">&#160;<br /><span class="kw2">CLS</span><br />&#160;<br /><span class="kw3">Function</span> isNumeric <span class="br0">&#40;</span><span class="re0">$x</span><span class="br0">&#41;</span><br /><span class="br0">&#123;</span><br />    <span class="re0">$x2</span> <span class="sy0">=</span> <span class="nu0">0</span>    <br />    <span class="re0">$isNum</span> <span class="sy0">=</span> <span class="br0">&#91;</span>System.Int32<span class="br0">&#93;</span>::TryParse<span class="br0">&#40;</span><span class="re0">$x</span><span class="sy0">,</span><span class="br0">&#91;</span><span class="re3">ref</span><span class="br0">&#93;</span><span class="re0">$x2</span><span class="br0">&#41;</span><br /><span class="kw3">Return</span> <span class="re0">$isNum</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="re0">$NumberArray</span> <span class="sy0">=</span> <span class="sy0">@</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br /><span class="kw3">While</span><span class="br0">&#40;</span> <span class="re0">$NumberArray</span>.Count <span class="kw4">-lt</span> <span class="nu0">4</span> <span class="br0">&#41;</span><span class="br0">&#123;</span><br />    <span class="re0">$NumberArray</span> <span class="sy0">+=</span> Random <span class="kw5">-Minimum</span> <span class="nu0">1</span> <span class="kw5">-Maximum</span> <span class="nu0">10</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="kw1">Write-Host</span> <span class="sy0">@</span><span class="st0">&quot;<br />Welcome to the 24 game!<br />&#160;<br />Here are your numbers: $($NumberArray -join &quot;</span><span class="sy0">,</span><span class="st0">&quot;).<br />Use division, multiplication, subtraction and addition to get 24 as a result with these 4 numbers.<br />&quot;</span><span class="sy0">@</span><br />&#160;<br /><span class="kw3">Do</span><br /><span class="br0">&#123;</span><br /><span class="re0">$Wrong</span> <span class="sy0">=</span> <span class="nu0">0</span><br /><span class="re0">$EndResult</span> <span class="sy0">=</span> <span class="re0">$null</span><br /><span class="re0">$TempChar</span> <span class="sy0">=</span> <span class="re0">$null</span><br /><span class="re0">$TempChar2</span> <span class="sy0">=</span> <span class="re0">$null</span><br /><span class="re0">$Count</span> <span class="sy0">=</span> <span class="re0">$null</span><br />&#160;<br /><span class="re0">$AllowableCharacters</span> <span class="sy0">=</span> <span class="re0">$NumberArray</span> <span class="sy0">+</span> <span class="st0">&quot;+-*/()&quot;</span>.ToCharArray<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    <span class="re0">$Result</span> <span class="sy0">=</span> <span class="kw1">Read-Host</span><br />        <span class="kw3">Foreach</span><span class="br0">&#40;</span><span class="re0">$Char</span> <span class="kw3">in</span> <span class="re0">$Result</span>.ToCharArray<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />        <span class="br0">&#123;</span><br />            <span class="kw3">If</span><span class="br0">&#40;</span> <span class="re0">$AllowableCharacters</span> <span class="kw4">-notcontains</span> <span class="re0">$Char</span> <span class="br0">&#41;</span><span class="br0">&#123;</span> <span class="re0">$Wrong</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="br0">&#125;</span><br />        <span class="br0">&#125;</span><br />&#160;<br />        <span class="kw3">If</span><span class="br0">&#40;</span><span class="re0">$Wrong</span> <span class="kw4">-eq</span> <span class="nu0">1</span><span class="br0">&#41;</span><br />        <span class="br0">&#123;</span><br />            <span class="kw1">Write-Warning</span> <span class="st0">&quot;Wrong input! Please use only the given numbers.&quot;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw3">Foreach</span><span class="br0">&#40;</span><span class="re0">$Char</span> <span class="kw3">in</span> <span class="re0">$Result</span>.ToCharArray<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />        <span class="br0">&#123;</span><br />            <span class="kw3">If</span><span class="br0">&#40;</span><span class="br0">&#40;</span>IsNumeric <span class="re0">$TempChar</span><span class="br0">&#41;</span> <span class="kw4">-AND</span> <span class="br0">&#40;</span>IsNumeric <span class="re0">$Char</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />            <span class="br0">&#123;</span><br />                <span class="kw1">Write-Warning</span> <span class="st0">&quot;Wrong input! Combining two or more numbers together is not allowed!&quot;</span><br />            <span class="br0">&#125;</span><br />            <span class="re0">$TempChar</span> <span class="sy0">=</span> <span class="re0">$Char</span><br />        <span class="br0">&#125;</span><br />        <span class="kw3">Foreach</span><span class="br0">&#40;</span><span class="re0">$Char</span> <span class="kw3">in</span> <span class="re0">$Result</span>.ToCharArray<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />        <span class="br0">&#123;</span><br />            <span class="kw3">If</span><span class="br0">&#40;</span>IsNumeric <span class="re0">$Char</span><span class="br0">&#41;</span><br />            <span class="br0">&#123;</span><br />                <span class="re0">$Count</span><span class="sy0">++</span><br />            <span class="br0">&#125;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw3">If</span><span class="br0">&#40;</span><span class="re0">$Count</span> <span class="kw4">-eq</span> <span class="nu0">4</span><span class="br0">&#41;</span><br />        <span class="br0">&#123;</span><br />            <span class="re0">$EndResult</span> <span class="sy0">=</span> <span class="kw1">Invoke-Expression</span> <span class="re0">$Result</span><br />                <span class="kw3">If</span><span class="br0">&#40;</span><span class="re0">$EndResult</span> <span class="kw4">-eq</span> <span class="nu0">24</span><span class="br0">&#41;</span><br />                <span class="br0">&#123;</span><br />                    <span class="kw1">Write-Host</span> <span class="st0">&quot;<span class="es0">`n</span>You've won the game!&quot;</span><br />                <span class="br0">&#125;</span><br />                <span class="kw3">Else</span><br />                <span class="br0">&#123;</span><br />                    <span class="kw1">Write-Host</span> <span class="st0">&quot;<span class="es0">`n</span>$EndResult is not 24! Too bad.&quot;</span><br />                <span class="br0">&#125;</span><br />        <span class="br0">&#125;</span><br />        <span class="kw3">Else</span><br />        <span class="br0">&#123;</span><br />            <span class="kw1">Write-Warning</span> <span class="st0">&quot;Wrong input! You did not supply four numbers.&quot;</span><br />        <span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br /><span class="kw3">While</span><span class="br0">&#40;</span><span class="re0">$EndResult</span> <span class="kw4">-ne</span> <span class="nu0">24</span><span class="br0">&#41;</span><br />&#160;</pre>
<h2><span class="mw-headline" id="ProDOS"><a href="/wiki/Category:ProDOS" title="Category:ProDOS">ProDOS</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=65" title="Edit section: ProDOS">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This example uses the math module:
</p>
<pre class="text highlighted_source">:a<br />editvar /modify -random- = &lt;10<br />printline These are your four digits: -random- -random- -random- -random-<br />printline Use an algorithm to make the number 24.<br />editvar /newvar /value=a /userinput=1 /title=Algorithm:<br />do -a-<br />if -a- /hasvalue 24 printline Your algorithm worked! &amp; goto&#160;:b (<br />) else printline Your algorithm did not work.<br />:b <br />editvar /newvar /value=b /userinput=1 /title=Do you want to play again?<br />if -b- /hasvalue y goto&#160;:a else exitcurrentprogram</pre>
<h2><span class="mw-headline" id="Prolog"><a href="/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=66" title="Edit section: Prolog">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/GNU_Prolog" title="GNU Prolog">GNU Prolog</a></div>
<pre class="prolog highlighted_source"><span class="sy1">:-</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">initialization</span></a><span class="br0">&#40;</span>main<span class="br0">&#41;</span><span class="sy4">.</span><br />&#160;<br />&#160;<br />answer<span class="br0">&#40;</span><span class="nu0">24</span><span class="br0">&#41;</span><span class="sy4">.</span><br />play <span class="sy1">:-</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">round</span></a><span class="sy4">,</span> play <span class="sy4">;</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">true</span></a><span class="sy4">.</span><br />&#160;<br /><a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">round</span></a> <span class="sy1">:-</span><br />    prompt<span class="br0">&#40;</span>Ns<span class="br0">&#41;</span><span class="sy4">,</span> get_line<span class="br0">&#40;</span>Input<span class="br0">&#41;</span><span class="sy4">,</span> Input \<span class="sy6">=</span> &quot;stop&quot;<br />  <span class="sy4">,</span> <span class="br0">&#40;</span> phrase<span class="br0">&#40;</span>parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">,</span> Input<span class="br0">&#41;</span> <span class="sy3">-</span><span class="sy6">&gt;</span> Result <span class="sy6">=</span> <span class="st_h">'correct'</span><br />                                   <span class="sy4">;</span> Result <span class="sy6">=</span> <span class="st_h">'wrong'</span><br />    <span class="br0">&#41;</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">write</span></a><span class="br0">&#40;</span>Result<span class="br0">&#41;</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">nl</span></a><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">nl</span></a><br />  <span class="sy4">.</span> <span class="co1">% where</span><br />    prompt<span class="br0">&#40;</span>Ns<span class="br0">&#41;</span>  <span class="sy1">:-</span> length<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy4">,</span> maplist<span class="br0">&#40;</span>random<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="sy4">,</span> Ns<span class="br0">&#41;</span><br />                 <span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">write</span></a><span class="br0">&#40;</span><span class="st_h">'Digits: '</span><span class="br0">&#41;</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">write</span></a><span class="br0">&#40;</span>Ns<span class="br0">&#41;</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">nl</span></a><br />                 <span class="sy4">.</span><br />&#160;<br />parse<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy4">,</span><span class="br0">&#91;</span>X<span class="br0">&#93;</span><span class="br0">&#41;</span>     <span class="sy3">--</span><span class="sy6">&gt;</span> <span class="br0">&#123;</span> answer<span class="br0">&#40;</span>X<span class="br0">&#41;</span> <span class="br0">&#125;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Y<span class="sy4">,</span>X<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy3">--</span><span class="sy6">&gt;</span> &quot;<span class="sy3">+</span>&quot;<span class="sy4">,</span> <span class="br0">&#123;</span> Z <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> X  <span class="sy3">+</span>  Y <span class="br0">&#125;</span><span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Z<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Y<span class="sy4">,</span>X<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy3">--</span><span class="sy6">&gt;</span> &quot;<span class="sy3">-</span>&quot;<span class="sy4">,</span> <span class="br0">&#123;</span> Z <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> X  <span class="sy3">-</span>  Y <span class="br0">&#125;</span><span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Z<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Y<span class="sy4">,</span>X<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy3">--</span><span class="sy6">&gt;</span> &quot;<span class="sy3">*</span>&quot;<span class="sy4">,</span> <span class="br0">&#123;</span> Z <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> X  <span class="sy3">*</span>  Y <span class="br0">&#125;</span><span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Z<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Y<span class="sy4">,</span>X<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy3">--</span><span class="sy6">&gt;</span> &quot;<span class="sy3">/</span>&quot;<span class="sy4">,</span> <span class="br0">&#123;</span> Z <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">is</span></a> X div Y <span class="br0">&#125;</span><span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span><span class="br0">&#91;</span>Z<span class="sy5">|</span>S<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span>Stack<span class="br0">&#41;</span>   <span class="sy3">--</span><span class="sy6">&gt;</span> &quot; &quot;<span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span>Stack<span class="br0">&#41;</span><span class="sy4">.</span><br />parse<span class="br0">&#40;</span>Ns<span class="sy4">,</span>Stack<span class="br0">&#41;</span>   <span class="sy3">--</span><span class="sy6">&gt;</span> <span class="br0">&#123;</span> select<span class="br0">&#40;</span>N<span class="sy4">,</span>Ns<span class="sy4">,</span>Ns1<span class="br0">&#41;</span><span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">number_codes</span></a><span class="br0">&#40;</span>N<span class="sy4">,</span><span class="br0">&#91;</span>Code<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><br />                    <span class="sy4">,</span> <span class="br0">&#91;</span>Code<span class="br0">&#93;</span><span class="sy4">,</span> parse<span class="br0">&#40;</span>Ns1<span class="sy4">,</span><span class="br0">&#91;</span>N<span class="sy5">|</span>Stack<span class="br0">&#93;</span><span class="br0">&#41;</span><br />                    <span class="sy4">.</span><br />&#160;<br />get_line<span class="br0">&#40;</span>Xs<span class="br0">&#41;</span> <span class="sy1">:-</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">get_code</span></a><span class="br0">&#40;</span>X<span class="br0">&#41;</span><br />              <span class="sy4">,</span> <span class="br0">&#40;</span> X <span class="sy6">==</span> <span class="nu0">10</span> <span class="sy3">-</span><span class="sy6">&gt;</span> Xs <span class="sy6">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy4">;</span> Xs <span class="sy6">=</span> <span class="br0">&#91;</span>X<span class="sy5">|</span>Ys<span class="br0">&#93;</span><span class="sy4">,</span> get_line<span class="br0">&#40;</span>Ys<span class="br0">&#41;</span> <span class="br0">&#41;</span><br />              <span class="sy4">.</span><br />main <span class="sy1">:-</span> randomize<span class="sy4">,</span> play<span class="sy4">,</span> <a href="http://pauillac.inria.fr/~deransar/prolog/bips.html"><span class="kw1">halt</span></a><span class="sy4">.</span></pre>
<p>Example "session":
</p>
<pre>Digits: [9,4,6,9]
46*9-9+
correct

Digits: [7,4,7,8]
8 4 7 7 / - *
correct

Digits: [7,2,8,2]
7282---
wrong

Digits: [2,6,7,1]
4611***
wrong

Digits: [3,6,5,8]
+
wrong

Digits: [2,1,7,7]
stop</pre>
<h2><span class="mw-headline" id="PureBasic"><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=67" title="Edit section: PureBasic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="purebasic highlighted_source">#digitCount <span class="sy0">=</span> <span class="nu0">4</span><br /><span class="kw1">Global</span> <span class="kw1">Dim</span> digits<span class="br0">&#40;</span>#digitCount <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="co1">;holds random digits</span><br />&#160;<br /><span class="kw1">Procedure</span> showDigits<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw2">Print</span><span class="br0">&#40;</span>#CRLF$ <span class="sy0">+</span> <span class="st0">&quot;These are your four digits: &quot;</span><span class="br0">&#41;</span><br />  <span class="kw1">Protected</span> i<br />  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> #digitCount <span class="sy0">-</span> <span class="nu0">1</span><br />    <span class="kw2">Print</span><span class="br0">&#40;</span><span class="kw2">Str</span><span class="br0">&#40;</span>digits<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="kw1">If</span> i <span class="sy0">&lt;</span> <span class="br0">&#40;</span>#digitCount <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">&#41;</span><br />      <span class="kw2">Print</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><br />    <span class="kw1">Else</span><br />      <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br />    <span class="kw1">EndIf</span><br />  <span class="kw1">Next</span><br />  <span class="kw2">Print</span><span class="br0">&#40;</span><span class="st0">&quot;24 = &quot;</span><span class="br0">&#41;</span><br /><span class="kw1">EndProcedure</span><br />&#160;<br /><span class="kw1">Procedure</span> playAgain<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">Protected</span> answer.s<br />  <span class="kw1">Repeat</span> <br />    <span class="kw2">Print</span><span class="br0">&#40;</span><span class="st0">&quot;Play again (y/n)? &quot;</span><span class="br0">&#41;</span><br />    answer <span class="sy0">=</span> <span class="kw2">LCase</span><span class="br0">&#40;</span><span class="kw2">Left</span><span class="br0">&#40;</span><span class="kw2">Trim</span><span class="br0">&#40;</span><span class="kw2">Input</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />    <span class="kw1">Select</span> answer<br />      <span class="kw1">Case</span> <span class="st0">&quot;n&quot;</span><br />        <span class="kw1">ProcedureReturn</span> #False<br />      <span class="kw1">Case</span> <span class="st0">&quot;y&quot;</span><br />        <span class="kw1">ProcedureReturn</span> #True<br />      <span class="kw1">Default</span><br />        <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><br />        <span class="kw1">Continue</span><br />    <span class="kw1">EndSelect</span><br />  <span class="kw1">ForEver</span><br /><span class="kw1">EndProcedure</span><br />&#160;<br /><span class="kw1">Procedure</span> allDigitsUsed<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">Protected</span> i<br />  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> #digitCount <span class="sy0">-</span> <span class="nu0">1</span><br />    <span class="kw1">If</span> digits<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span><br />      <span class="kw1">ProcedureReturn</span> #False<br />    <span class="kw1">EndIf</span><br />  <span class="kw1">Next</span> <br />  <span class="kw1">ProcedureReturn</span> #True <br /><span class="kw1">EndProcedure</span><br />&#160;<br /><span class="kw1">Procedure</span> isValidDigit<span class="br0">&#40;</span>d<span class="br0">&#41;</span><br />  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> #digitCount <span class="sy0">-</span> <span class="nu0">1</span><br />    <span class="kw1">If</span> digits<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> d<br />      digits<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span><br />      <span class="kw1">ProcedureReturn</span> #True<br />    <span class="kw1">EndIf</span> <br />  <span class="kw1">Next</span> <br />  <span class="kw1">ProcedureReturn</span> #False<br /><span class="kw1">EndProcedure</span><br />&#160;<br /><span class="kw1">Procedure</span> doOperation<span class="br0">&#40;</span>List op.c<span class="br0">&#40;</span><span class="br0">&#41;</span>, List operand.f<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />  <span class="kw1">Protected</span> x.f, y.f, op.c<br />  op <span class="sy0">=</span> op<span class="br0">&#40;</span><span class="br0">&#41;</span>: <span class="kw2">DeleteElement</span><span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />  <span class="kw1">If</span> op <span class="sy0">=</span> '<span class="br0">&#40;</span>'<br />    <span class="kw1">ProcedureReturn</span> #False <span class="co1">;end of sub-expression</span><br />  <span class="kw1">EndIf</span> <br />&#160;<br />  y <span class="sy0">=</span> operand<span class="br0">&#40;</span><span class="br0">&#41;</span>: <span class="kw2">DeleteElement</span><span class="br0">&#40;</span>operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />  x <span class="sy0">=</span> operand<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">Select</span> op<br />    <span class="kw1">Case</span> '<span class="sy0">+</span>'<br />      x <span class="sy0">+</span> y<br />    <span class="kw1">Case</span> '<span class="sy0">-</span>'<br />      x <span class="sy0">-</span> y<br />    <span class="kw1">Case</span> '<span class="sy0">*</span>' <br />      x <span class="sy0">*</span> y<br />    <span class="kw1">Case</span> '<span class="sy0">/</span>' <br />      x <span class="sy0">/</span> y<br />  <span class="kw1">EndSelect</span><br />  operand<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> x<br />  <span class="kw1">ProcedureReturn</span> #True <span class="co1">;operation completed</span><br /><span class="kw1">EndProcedure</span> <br />&#160;<br /><span class="co1">;returns error if present and the expression results in *result\f</span><br /><span class="kw1">Procedure</span>.s parseExpression<span class="br0">&#40;</span>expr.s, <span class="sy0">*</span>result.Float<span class="br0">&#41;</span><br />  <span class="kw1">NewList</span> op.c<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">NewList</span> operand.f<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  expr <span class="sy0">=</span> <span class="kw2">ReplaceString</span><span class="br0">&#40;</span>expr, <span class="st0">&quot; &quot;</span>, <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span> <span class="co1">;remove spaces</span><br />&#160;<br />  <span class="kw1">If</span> <span class="kw2">Len</span><span class="br0">&#40;</span>expr<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">0</span>: <span class="sy0">*</span>result<span class="sy0">\</span>f <span class="sy0">=</span> <span class="nu0">0</span>: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;&quot;</span>: <span class="kw1">EndIf</span> <span class="co1">;no expression, return zero</span><br />&#160;<br />  <span class="kw1">Protected</span> <span class="sy0">*</span>ech.Character <span class="sy0">=</span> @expr, lastWasDigit, lastWasOper, parenCheck, c.c<br />  <span class="kw1">While</span> <span class="sy0">*</span>ech<span class="sy0">\</span>c<br />    c <span class="sy0">=</span> <span class="sy0">*</span>ech<span class="sy0">\</span>c<br />    <span class="kw1">Select</span> c<br />      <span class="kw1">Case</span> '<span class="sy0">*</span>', '<span class="sy0">/</span>', '<span class="sy0">-</span>', '<span class="sy0">+</span>'<br />        <span class="kw1">If</span> <span class="kw1">Not</span> lastWasDigit: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, need a digit between operators.&quot;</span>: <span class="kw1">EndIf</span><br />        <span class="kw1">If</span> ListSize<span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">And</span> <span class="br0">&#40;</span><span class="kw2">FindString</span><span class="br0">&#40;</span><span class="st0">&quot;*/&quot;</span>, <span class="kw2">Chr</span><span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">Or</span> <span class="br0">&#40;</span><span class="kw2">FindString</span><span class="br0">&#40;</span><span class="st0">&quot;+-&quot;</span>, <span class="kw2">Chr</span><span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="kw1">And</span> <span class="kw2">FindString</span><span class="br0">&#40;</span><span class="st0">&quot;+-&quot;</span>, <span class="kw2">Chr</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />          doOperation<span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span>, operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />        <span class="kw1">EndIf</span> <br />        <span class="kw2">AddElement</span><span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>: op<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> c<br />        lastWasOper <span class="sy0">=</span> #True: lastWasDigit <span class="sy0">=</span> #False<br />      <span class="kw1">Case</span> '<span class="br0">&#40;</span>'<br />        <span class="kw1">If</span> lastWasDigit: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, need an operator before left paren.&quot;</span>: <span class="kw1">EndIf</span><br />        <span class="kw2">AddElement</span><span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>: op<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> c<br />        parenCheck <span class="sy0">+</span> <span class="nu0">1</span>: lastWasOper <span class="sy0">=</span> #False<br />      <span class="kw1">Case</span> '<span class="br0">&#41;</span>'<br />        parenCheck <span class="sy0">-</span> <span class="nu0">1</span>: <span class="kw1">If</span> parenCheck <span class="sy0">&lt;</span> <span class="nu0">0</span>: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, missing a left paren.&quot;</span>: <span class="kw1">EndIf</span><br />        <span class="kw1">If</span> <span class="kw1">Not</span> lastWasDigit: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, missing a digit before right paren.&quot;</span>: <span class="kw1">EndIf</span><br />        <span class="kw1">Repeat</span>: <span class="kw1">Until</span> <span class="kw1">Not</span> doOperation<span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span>,operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />        lastWasDigit <span class="sy0">=</span> #True<br />      <span class="kw1">Case</span> '<span class="nu0">1</span>' <span class="kw1">To</span> '<span class="nu0">9</span>'<br />        <span class="kw1">If</span> lastWasDigit: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, need an operator between digits.&quot;</span>: <span class="kw1">EndIf</span><br />        <span class="kw2">AddElement</span><span class="br0">&#40;</span>operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>: operand<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">=</span> c <span class="sy0">-</span> '<span class="nu0">0</span>'<br />        <span class="kw1">If</span> <span class="kw1">Not</span> isValidDigit<span class="br0">&#40;</span>operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> <span class="kw2">Chr</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;' is not a valid digit.&quot;</span>: <span class="kw1">EndIf</span><br />        lastWasDigit <span class="sy0">=</span> #True: lastWasOper <span class="sy0">=</span> #False<br />      <span class="kw1">Default</span><br />        <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;'&quot;</span> <span class="sy0">+</span> <span class="kw2">Chr</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;' is not allowed in the expression.&quot;</span><br />    <span class="kw1">EndSelect</span><br />    <span class="sy0">*</span>ech <span class="sy0">+</span> <span class="kw2">SizeOf</span><span class="br0">&#40;</span>Character<span class="br0">&#41;</span><br />  <span class="kw1">Wend</span> <br />&#160;<br />  <span class="kw1">If</span> parenCheck <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span> <span class="kw1">Or</span> lastWasOper: <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;Improper syntax, missing a right paren or digit.&quot;</span>: <span class="kw1">EndIf</span><br />  <span class="kw1">Repeat</span><br />    <span class="kw1">If</span> <span class="kw1">Not</span> ListSize<span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>: <span class="kw1">Break</span>: <span class="kw1">EndIf</span><br />  <span class="kw1">Until</span> <span class="kw1">Not</span> doOperation<span class="br0">&#40;</span>op<span class="br0">&#40;</span><span class="br0">&#41;</span>,operand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />  <span class="sy0">*</span>result<span class="sy0">\</span>f <span class="sy0">=</span> operand<span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw1">ProcedureReturn</span> <span class="st0">&quot;&quot;</span> <span class="co1">;no error</span><br /><span class="kw1">EndProcedure</span><br />&#160;<br /><span class="kw1">Define</span> success, failure, result.f, error.s, i<br /><span class="kw1">If</span> <span class="kw2">OpenConsole</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;The 24 Game&quot;</span> <span class="sy0">+</span> #CRLF$<span class="br0">&#41;</span><br />  <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;Given four digits and using just the +, -, *, and / operators; and the&quot;</span><span class="br0">&#41;</span><br />  <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;possible use of brackets, (), enter an expression that equates to 24.&quot;</span><span class="br0">&#41;</span><br />  <span class="kw1">Repeat</span><br />    <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> #digitCount <span class="sy0">-</span> <span class="nu0">1</span><br />      digits<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="sy0">+</span> <span class="kw2">Random</span><span class="br0">&#40;</span><span class="nu0">8</span><span class="br0">&#41;</span><br />    <span class="kw1">Next</span><br />&#160;<br />    showDigits<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    error <span class="sy0">=</span> parseExpression<span class="br0">&#40;</span><span class="kw2">Input</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, @result<span class="br0">&#41;</span><br />    <span class="kw1">If</span> error <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><br />      <span class="kw1">If</span> <span class="kw1">Not</span> allDigitsUsed<span class="br0">&#40;</span><span class="br0">&#41;</span><br />        <span class="kw2">PrintN</span><span class="br0">&#40;</span> <span class="st0">&quot;Wrong! (you didn't use all digits)&quot;</span><span class="br0">&#41;</span>: failure <span class="sy0">+</span> <span class="nu0">1</span><br />      <span class="kw1">ElseIf</span> result <span class="sy0">=</span> <span class="nu0">24.0</span><br />        <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;Correct!&quot;</span><span class="br0">&#41;</span>: success <span class="sy0">+</span> <span class="nu0">1</span><br />      <span class="kw1">Else</span><br />        <span class="kw2">Print</span><span class="br0">&#40;</span><span class="st0">&quot;Wrong! (you got &quot;</span><span class="br0">&#41;</span><br />        <span class="kw1">If</span> result <span class="sy0">&lt;&gt;</span> <span class="kw2">Int</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><br />          <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="kw2">StrF</span><span class="br0">&#40;</span>result, <span class="nu0">2</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span><br />        <span class="kw1">Else</span><br />          <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="kw2">Str</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot;)&quot;</span><span class="br0">&#41;</span><br />        <span class="kw1">EndIf</span> <br />        failure <span class="sy0">+</span> <span class="nu0">1</span><br />      <span class="kw1">EndIf</span> <br />    <span class="kw1">Else</span><br />      <span class="kw2">PrintN</span><span class="br0">&#40;</span>error<span class="br0">&#41;</span>: failure <span class="sy0">+</span> <span class="nu0">1</span><br />    <span class="kw1">EndIf</span> <br />  <span class="kw1">Until</span> <span class="kw1">Not</span> playAgain<span class="br0">&#40;</span><span class="br0">&#41;</span><br />&#160;<br />  <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;success:&quot;</span> <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">&#40;</span>success<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; failure:&quot;</span> <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">&#40;</span>failure<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="st0">&quot; total:&quot;</span> <span class="sy0">+</span> <span class="kw2">Str</span><span class="br0">&#40;</span>success <span class="sy0">+</span> failure<span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br />  <span class="kw2">Print</span><span class="br0">&#40;</span>#CRLF$ <span class="sy0">+</span> <span class="st0">&quot;Press ENTER to exit&quot;</span><span class="br0">&#41;</span>: <span class="kw2">Input</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br />  <span class="kw2">CloseConsole</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br /><span class="kw1">EndIf</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>The 24 Game

Given four digits and using just the +, -, *, and / operators; and the
possible use of brackets, (), enter an expression that equates to 24.

These are your four digits: 9, 2, 8, 7
24 = 9*8/2-7
Wrong! (you got 29)
Play again (y/n)? y

These are your four digits: 5, 5, 5, 6
24 = 5*5+5-6
Correct!
Play again (y/n)? n
success:1 failure:1 total:2</pre>
<h2><span class="mw-headline" id="Python"><a href="/wiki/Category:Python" title="Category:Python">Python</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=68" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="python highlighted_source"><span class="kw1">import</span> <span class="kw3">random</span><span class="sy0">,</span> <span class="kw3">re</span><br />chars <span class="sy0">=</span> <span class="br0">&#91;</span><span class="st0">&quot;(&quot;</span><span class="sy0">,</span><span class="st0">&quot;)&quot;</span><span class="sy0">,</span><span class="st0">&quot;/&quot;</span><span class="sy0">,</span><span class="st0">&quot;+&quot;</span><span class="sy0">,</span><span class="st0">&quot;-&quot;</span><span class="sy0">,</span><span class="st0">&quot;*&quot;</span><span class="br0">&#93;</span>  <br /><span class="kw1">while</span> <span class="kw2">True</span>:<br />    charsandints<span class="sy0">,</span> ints <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">,</span> <span class="br0">&#91;</span><span class="br0">&#93;</span><br />    <span class="kw1">for</span> x <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span>:<br />        ints.<span class="me1">append</span><span class="br0">&#40;</span><span class="kw2">str</span><span class="br0">&#40;</span><span class="kw3">random</span>.<span class="me1">randrange</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />    charsandints <span class="sy0">=</span> chars + ints<br />    <span class="kw1">print</span> <span class="st0">&quot;Numbers are:&quot;</span><span class="sy0">,</span> ints<br />    guess <span class="sy0">=</span> <span class="kw2">raw_input</span><span class="br0">&#40;</span><span class="st0">&quot;Enter your guess:&quot;</span><span class="br0">&#41;</span><br />    <span class="kw1">if</span> guess.<span class="me1">lower</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">&quot;q&quot;</span>:<br />        <span class="kw1">break</span><br />    <span class="kw1">elif</span> guess.<span class="me1">lower</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">&quot;|&quot;</span>:<br />        <span class="kw1">pass</span><br />    <span class="kw1">else</span>:<br />        flag <span class="sy0">=</span> <span class="kw2">True</span><br />        <span class="kw1">for</span> a <span class="kw1">in</span> guess:<br />            <span class="kw1">if</span> a <span class="kw1">not</span> <span class="kw1">in</span> charsandints <span class="kw1">or</span> guess.<span class="me1">count</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> <span class="sy0">&gt;</span> charsandints.<span class="me1">count</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span>:<br />                flag <span class="sy0">=</span> <span class="kw2">False</span><br />        <span class="kw1">if</span> <span class="kw3">re</span>.<span class="me1">search</span><span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\d</span><span class="es0">\d</span>&quot;</span><span class="sy0">,</span> guess<span class="br0">&#41;</span>:<br />            <span class="kw1">print</span> <span class="st0">&quot;You cannot combine digits.&quot;</span><br />            <span class="kw1">break</span><br />        <span class="kw1">if</span> flag:<br />            <span class="kw1">print</span> <span class="st0">&quot;Your result is: &quot;</span><span class="sy0">,</span> <span class="kw2">eval</span><span class="br0">&#40;</span>guess<span class="br0">&#41;</span><br />            <span class="kw1">if</span> <span class="kw2">eval</span><span class="br0">&#40;</span>guess<span class="br0">&#41;</span> <span class="sy0">==</span> <span class="nu0">24</span>:<br />                <span class="kw1">print</span> <span class="st0">&quot;You won&quot;</span><br />                <span class="kw1">break</span><br />            <span class="kw1">else</span>:<br />                <span class="kw1">print</span> <span class="st0">&quot;You lost&quot;</span><br />                <span class="kw1">break</span><br />        <span class="kw1">else</span>:<br />            <span class="kw1">print</span> <span class="st0">&quot;You cannot use anthing other than&quot;</span><span class="sy0">,</span> charsandints<br />            <span class="kw1">break</span><br /><span class="kw1">print</span> <span class="st0">&quot;Thanks for playing&quot;</span></pre>
<h2><span class="mw-headline" id="Python_2"><a href="/wiki/Category:Python" title="Category:Python">Python</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=69" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Uses eval, the built-in expression evaluator of infix expressions.
</p>
<pre class="python highlighted_source"><span class="st0">'''<br /> The 24 Game<br />&#160;<br /> Given any four digits in the range 1 to 9, which may have repetitions,<br /> Using just the +, -, *, and / operators; and the possible use of<br /> brackets, (), show how to make an answer of 24.<br />&#160;<br /> An answer of &quot;q&quot; will quit the game.<br /> An answer of &quot;!&quot; will generate a new set of four digits.<br /> Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />&#160;<br /> Note: you cannot form multiple digit numbers from the supplied digits,<br /> so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />&#160;<br />'''</span><br />&#160;<br /><span class="kw1">from</span> <span class="kw3">__future__</span> <span class="kw1">import</span> division<span class="sy0">,</span> print_function<br /><span class="kw1">import</span> <span class="kw3">random</span><span class="sy0">,</span> ast<span class="sy0">,</span> <span class="kw3">re</span><br /><span class="kw1">import</span> <span class="kw3">sys</span><br />&#160;<br /><span class="kw1">if</span> <span class="kw3">sys</span>.<span class="me1">version_info</span><span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy0">&lt;</span> <span class="nu0">3</span>: <span class="kw2">input</span> <span class="sy0">=</span> <span class="kw2">raw_input</span><br />&#160;<br /><span class="kw1">def</span> choose4<span class="br0">&#40;</span><span class="br0">&#41;</span>:<br />    <span class="st0">'four random digits &gt;0 as characters'</span><br />    <span class="kw1">return</span> <span class="br0">&#91;</span><span class="kw2">str</span><span class="br0">&#40;</span><span class="kw3">random</span>.<span class="me1">randint</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#93;</span><br />&#160;<br /><span class="kw1">def</span> welcome<span class="br0">&#40;</span>digits<span class="br0">&#41;</span>:<br />    <span class="kw1">print</span> <span class="br0">&#40;</span>__doc__<span class="br0">&#41;</span><br />    <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;Your four digits: &quot;</span> + <span class="st0">' '</span>.<span class="me1">join</span><span class="br0">&#40;</span>digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="kw1">def</span> check<span class="br0">&#40;</span>answer<span class="sy0">,</span> digits<span class="br0">&#41;</span>:<br />    allowed <span class="sy0">=</span> <span class="kw2">set</span><span class="br0">&#40;</span><span class="st0">'() +-*/<span class="es0">\t</span>'</span>+<span class="st0">''</span>.<span class="me1">join</span><span class="br0">&#40;</span>digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br />    ok <span class="sy0">=</span> <span class="kw2">all</span><span class="br0">&#40;</span>ch <span class="kw1">in</span> allowed <span class="kw1">for</span> ch <span class="kw1">in</span> answer<span class="br0">&#41;</span> <span class="kw1">and</span> \<br />         <span class="kw2">all</span><span class="br0">&#40;</span>digits.<span class="me1">count</span><span class="br0">&#40;</span>dig<span class="br0">&#41;</span> <span class="sy0">==</span> answer.<span class="me1">count</span><span class="br0">&#40;</span>dig<span class="br0">&#41;</span> <span class="kw1">for</span> dig <span class="kw1">in</span> <span class="kw2">set</span><span class="br0">&#40;</span>digits<span class="br0">&#41;</span><span class="br0">&#41;</span> \<br />         <span class="kw1">and</span> <span class="kw1">not</span> <span class="kw3">re</span>.<span class="me1">search</span><span class="br0">&#40;</span><span class="st0">'<span class="es0">\d</span><span class="es0">\d</span>'</span><span class="sy0">,</span> answer<span class="br0">&#41;</span><br />    <span class="kw1">if</span> ok:<br />        <span class="kw1">try</span>:<br />            ast.<span class="me1">parse</span><span class="br0">&#40;</span>answer<span class="br0">&#41;</span><br />        <span class="kw1">except</span>:<br />            ok <span class="sy0">=</span> <span class="kw2">False</span><br />    <span class="kw1">return</span> ok<br />&#160;<br /><span class="kw1">def</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span>:    <br />    digits <span class="sy0">=</span> choose4<span class="br0">&#40;</span><span class="br0">&#41;</span><br />    welcome<span class="br0">&#40;</span>digits<span class="br0">&#41;</span><br />    trial <span class="sy0">=</span> <span class="nu0">0</span><br />    answer <span class="sy0">=</span> <span class="st0">''</span><br />    chk <span class="sy0">=</span> ans <span class="sy0">=</span> <span class="kw2">False</span><br />    <span class="kw1">while</span> <span class="kw1">not</span> <span class="br0">&#40;</span>chk <span class="kw1">and</span> ans <span class="sy0">==</span> <span class="nu0">24</span><span class="br0">&#41;</span>:<br />        trial +<span class="sy0">=</span><span class="nu0">1</span><br />        answer <span class="sy0">=</span> <span class="kw2">input</span><span class="br0">&#40;</span><span class="st0">&quot;Expression&#160;%i: &quot;</span>&#160;% trial<span class="br0">&#41;</span><br />        chk <span class="sy0">=</span> check<span class="br0">&#40;</span>answer<span class="sy0">,</span> digits<span class="br0">&#41;</span><br />        <span class="kw1">if</span> answer.<span class="me1">lower</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">==</span> <span class="st0">'q'</span>:<br />            <span class="kw1">break</span><br />        <span class="kw1">if</span> answer <span class="sy0">==</span> <span class="st0">'!'</span>:<br />            digits <span class="sy0">=</span> choose4<span class="br0">&#40;</span><span class="br0">&#41;</span><br />            <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;New digits:&quot;</span><span class="sy0">,</span> <span class="st0">' '</span>.<span class="me1">join</span><span class="br0">&#40;</span>digits<span class="br0">&#41;</span><span class="br0">&#41;</span><br />            <span class="kw1">continue</span><br />        <span class="kw1">if</span> <span class="kw1">not</span> chk:<br />            <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;The input '%s' was wonky!&quot;</span>&#160;% answer<span class="br0">&#41;</span><br />        <span class="kw1">else</span>:<br />            ans <span class="sy0">=</span> <span class="kw2">eval</span><span class="br0">&#40;</span>answer<span class="br0">&#41;</span><br />            <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot; = &quot;</span><span class="sy0">,</span> ans<span class="br0">&#41;</span><br />            <span class="kw1">if</span> ans <span class="sy0">==</span> <span class="nu0">24</span>:<br />                <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;Thats right!&quot;</span><span class="br0">&#41;</span><br />    <span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;Thank you and goodbye&quot;</span><span class="br0">&#41;</span>   <br />&#160;<br /><span class="kw1">if</span> __name__ <span class="sy0">==</span> <span class="st0">'__main__'</span>: main<span class="br0">&#40;</span><span class="br0">&#41;</span> </pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
 The 24 Game

 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.

 An answer of &quot;q&quot; will quit the game.
 An answer of &quot;!&quot; will generate a new set of four digits.

 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.


Your four digits: 3 2 4 6
Expression 1: (3 - 1)*(6*4)
The input '(3 - 1)*(6*4)' was wonky!
Expression 2: (3 - 2) * 6 * 4
 =  24
That's right!
Thank you and goodbye.</pre>
<h2><span class="mw-headline" id="R"><a href="/wiki/Category:R" title="Category:R">R</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=70" title="Edit section: R">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This makes use of R's metaprogramming (parse, eval, etc.). It uses parse to obtain a parse tree, which is scanned for containing only permitted elements before evaluating.
</p>
<pre class="text highlighted_source">twenty.four &lt;- function(operators=c(&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;(&quot;),<br />                        selector=function() sample(1:9, 4, replace=TRUE),<br />                        arguments=selector(),<br />                        goal=24) {<br />  newdigits &lt;- function() {<br />    arguments &lt;&lt;- selector()<br />    cat(&quot;New digits:&quot;, paste(arguments, collapse=&quot;, &quot;), &quot;\n&quot;)<br />  } <br />  help &lt;- function() cat(&quot;Make&quot;, goal,<br />      &quot;out of the numbers&quot;,paste(arguments, collapse=&quot;, &quot;),<br />      &quot;and the operators&quot;,paste(operators, collapse=&quot;, &quot;), &quot;.&quot;,<br />      &quot;\nEnter 'q' to quit, '!' to select new digits,&quot;,<br />      &quot;or '?' to repeat this message.\n&quot;)<br />  help()<br />  repeat {<br />    switch(input &lt;- readline(prompt=&quot;&gt; &quot;),<br />           q={ cat(&quot;Goodbye!\n&quot;); break },<br />           `?`=help(),<br />           `!`=newdigits(),<br />           tryCatch({<br />             expr &lt;- parse(text=input, n=1)[[1]]<br />             check.call(expr, operators, arguments)<br />             result &lt;- eval(expr)<br />             if (isTRUE(all.equal(result, goal))) {<br />               cat(&quot;Correct!\n&quot;)<br />               newdigits()<br />             } else {<br />               cat(&quot;Evaluated to&quot;, result, &quot;( goal&quot;, goal, &quot;)\n&quot;)<br />             }<br />           },error=function(e) cat(e$message, &quot;\n&quot;)))<br />  }<br />}<br />&#160;<br />check.call &lt;- function(expr, operators, arguments) {<br />  unexpr &lt;- function(x) {<br />    if (is.call(x))<br />      unexpr(as.list(x))<br />    else if (is.list(x))<br />      lapply(x,unexpr)<br />    else x<br />  }<br />  leaves &lt;- unlist(unexpr(expr))<br />  if (any(disallowed &lt;-<br />         &#160;!leaves&#160;%in% c(lapply(operators, as.name),<br />                         as.list(arguments)))) {<br />    stop(&quot;'&quot;, paste(sapply(leaves[disallowed], as.character),<br />                    collapse=&quot;, &quot;),<br />         &quot;' not allowed. &quot;)<br />  }<br />  numbers.used &lt;- unlist(leaves[sapply(leaves, mode) == 'numeric'])<br />&#160;<br />  if (! isTRUE(all.equal(sort(numbers.used), sort(arguments))))<br />   stop(&quot;Must use each number once.&quot;)<br />}</pre>
<p>Example Session
</p>
<pre class="text highlighted_source">&gt; twenty.four()<br />&#160;<br />Make 24 out of the numbers 1, 6, 7, 5 and the operators +, -, *, /, ( . <br />Enter 'q' to quit, '!' to select new digits, or '?' to repeat this message.<br />&gt; 6*(5-1)<br />Must use each number once. <br />&gt; 1 + 6*5 - 7<br />Correct!<br />New digits: 7, 2, 9, 3 <br />&gt; (7+9)/2*3<br />Correct!<br />New digits: 1, 4, 1, 7 <br />&gt; 4*(7-1)<br />Must use each number once. <br />&gt; (7-1)*4*1<br />Correct!<br />New digits: 1, 5, 2, 8 <br />&gt; (5-1)^2+8<br />'^' not allowed.<br />&gt;&#160;!<br />New digits: 2, 8, 5, 2 <br />&gt; 52-28<br />'52, 28' not allowed.<br />&gt; (8-2)*(5-2/2)<br />Must use each number once. <br />&gt; (8+2)*2+5<br />Evaluated to 25 ( goal 24 )<br />&gt; q<br />Goodbye!<br />&#160;</pre>
<h2><span class="mw-headline" id="Racket"><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=71" title="Edit section: Racket">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The functional interpreter of an expression given in the infix form.
It parses the S-expression representing the user's answer and handles
invalid cases.
</p>
<pre class="text highlighted_source">&#160;<br />#lang racket<br />&#160;<br />(define (interprete expr numbers)<br /> &#160;;; the cashe for used numbers<br />  (define cashe numbers)<br />&#160;<br /> &#160;;; updating the cashe and handling invalid cases<br />  (define (update-cashe! x)<br />    (unless (member x numbers) (error &quot;Number is not in the given set:&quot; x))<br />    (unless (member x cashe)   (error &quot;Number is used more times then it was given:&quot; x))<br />    (set! cashe (remq x cashe)))<br />&#160;<br /> &#160;;; the parser<br />  (define parse<br />    (match-lambda<br />     &#160;;; parsing arythmetics<br />      [`(,x ... + ,y ...) (+ (parse x) (parse y))]<br />      [`(,x ... - ,y ...) (- (parse x) (parse y))]<br />      [`(,x ... * ,y ...) (* (parse x) (parse y))]<br />      [`(,x ... / ,y ...) (/ (parse x) (parse y))]<br />      [`(,x ,op ,y ...)   (error &quot;Unknown operator: &quot; op)]<br />     &#160;;; opening redundant brackets<br />      [`(,expr)           (parse expr)]<br />     &#160;;; parsing numbers<br />      [(? number? x)      (update-cashe! x) x]<br />     &#160;;; unknown token<br />      [x                  (error &quot;Not a number: &quot; x)]))<br />&#160;<br /> &#160;;; parse the expresion<br />  (define result (parse expr))<br />&#160;<br /> &#160;;; return the result if cashe is empty<br />  (if (empty? cashe)<br />      result<br />      (error &quot;You didn`t use all numbers!&quot;)))<br />&#160;</pre>
<p>Testing the interpreter:
</p>
<pre>
&gt; (interprete '(1 - 2 * 3 + 8) '(1 2 3 8))
3
&gt; (interprete '(1 - 2 * (3 + 8)) '(1 2 3 8))
-21
&gt; (interprete '((1 - 2) * (3 + 8)) '(1 2 3 8))
-11
&gt; (interprete '((1 - 2) * 3 + 8) '(1 2 3 8))
5
&gt; (interprete '((1 - 2) * 3 + 8) '(1 2 3 4))
 Number is not in the given set: 8
&gt; (interprete '((1 - 2) * 3 + 2) '(1 2 3 3))
 Number is used more times then it was given: 2
&gt; (interprete '((1 - 2) ^ 3 + 2) '(1 2 3 2))
 Unknown operator:  ^
&gt; (interprete '((1 - 2) * 3) '(1 2 3 2))
 You didn`t use all numbers!
</pre>
<p>The program which uses the interpreter to play the game:
</p>
<pre class="text highlighted_source">&#160;<br />;; starting the program<br />(define (start)<br />  (displayln &quot;Combine given four numbers using operations + - * / to get 24.&quot;)<br />  (displayln &quot;Input 'q' to quit or your answer like '1 - 3 * (2 + 3)'&quot;)<br />  (new-game))<br />&#160;<br />;; starting a new game<br />(define (new-game)<br /> &#160;;; create a new number set<br />  (define numbers (build-list 4 (λ (_) (+ 1 (random 9)))))<br />  (apply printf &quot;Your numbers: ~a  ~a  ~a  ~a\n&quot; numbers)<br />  (new-input numbers))<br />&#160;<br />;; processing a new user input<br />(define (new-input numbers)<br /> &#160;;; if an exception is raized while processing, show the exeption message<br /> &#160;;; and prompt for another input, but do not stop the program.<br />  (with-handlers ([exn? (λ (exn)<br />                          (displayln (exn-message exn))<br />                          (new-input numbers))])<br />   &#160;;; get the answer<br />    (define user-expr (read-the-answer))<br />   &#160;;; interprete it<br />    (case user-expr<br />      [(q) (display &quot;Good buy!&quot;)]<br />      [(n) (new-game)]<br />      [else (define ans (interprete user-expr numbers))<br />            (case ans<br />              [(24) (printf &quot;Indeed! ~a = 24\n&quot; user-expr)<br />                    (new-game)]<br />              [else (error &quot;Wrong!&quot; user-expr '= ans)])])))<br />&#160;<br />;; reading and preparing the user's answer<br />;; &quot;1 + 2 * (3 + 4)&quot; --&gt; '(1 + 2 * (3 + 4))<br />(define (read-the-answer)<br />  (read (open-input-string (format &quot;(~a)&quot; (read-line)))))<br />&#160;</pre>
<h2><span class="mw-headline" id="REXX"><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=72" title="Edit section: REXX">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="version_1">version 1</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=73" title="Edit section: version 1">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<pre>
╔═════════════════════════════════════════════════════════════════════════════╗
║ Argument for the   24    REXX program is either of three forms:  (blank)    ║
║                                                                  ssss       ║
║                                                                  ssss-ffff  ║
║                                                                             ║
║ where   SSSS  and  FFFF   must be exactly four numerals (digits) comprised  ║
║ solely of the numerals (digits)    1 ──► 9     (inclusive, with no zeroes). ║
║                                                                             ║
║                            SSSS  is the start,                              ║
║                            FFFF  is the finish.                             ║
║                                                                             ║
║ If no argument is specified,  the program finds a  four digit number  (with ║
║ no zeroes)  which has at least one solution,  and then displays the number  ║
║ to the user,  requesting that they enter a solution in the form of:         ║
║                                                                             ║
║                    w   operator   x   operator   y   operator   z           ║
║                                                                             ║
║ where    w   x   y   and   z    are single digit numbers  (no zeroes).      ║
║ and    operator   can be any one of:     +    -    *    /                   ║
║ Parentheses ( ),   brackets [ ],   and/or  braces { }   may be used in the  ║
║ normal manner for grouping expressions.       Leading signs are permitted.  ║
╚═════════════════════════════════════════════════════════════════════════════╝
</pre>
<p>A large part of this program deals with validating the user input &#160; (and issuing appropriate and meaningful error 
<br />messages), &#160; and also that the digits presented to the user, do in fact, have a possible solution.
</p>
<pre class="rexx highlighted_source"><span class="coMULTI">/*REXX program supports a human to play the game of 24 (twenty-four) with error checking*/</span><br /><span class="kw1">numeric</span> <span class="kw2">digits</span> <span class="nu0">15</span>                                <span class="coMULTI">/*allow more leeway when computing #s. */</span><br /><span class="kw1">parse</span> <span class="kw1">arg</span> yyy                                    <span class="coMULTI">/*get the optional arguments from C.L. */</span><br />          yyy = <span class="kw6">space</span><span class="br0">&#40;</span>yyy, <span class="nu0">0</span><span class="br0">&#41;</span>                    <span class="coMULTI">/*remove extraneous blanks from  YYY.  */</span><br /><span class="kw1">parse</span> <span class="kw2">var</span>  yyy      start  <span class="st0">'-'</span>  fin              <span class="coMULTI">/*get the START and FINish  (maybe).   */</span><br />     fin = <span class="kw6">word</span><span class="br0">&#40;</span>fin start, <span class="nu0">1</span><span class="br0">&#41;</span>                    <span class="coMULTI">/*if no  FINish  specified, use  START.*/</span><br />     ops = <span class="st0">'+-*/'</span>       &#160;;  Lops = <span class="kw6">length</span><span class="br0">&#40;</span>0ps<span class="br0">&#41;</span>   <span class="coMULTI">/*define the legal arithmetic operators*/</span><br />groupSym = <span class="st0">'()[]{}'</span>                              <span class="coMULTI">/*legal grouping symbols for this game.*/</span><br />  indent = <span class="kw6">left</span><span class="br0">&#40;</span><span class="st0">''</span>, <span class="nu0">30</span><span class="br0">&#41;</span>                          <span class="coMULTI">/*used to indent display of solutions. */</span><br />    Lpar = <span class="st0">'('</span>          &#160;;  Rpar = <span class="st0">')'</span>           <span class="coMULTI">/*strings to make the output prettier.*/</span><br />    digs = <span class="nu0">123456789</span>                             <span class="coMULTI">/*numerals (digits)  that can be used. */</span><br />    show = <span class="nu0">1</span>                                     <span class="coMULTI">/*flag used show solutions  (0 = not). */</span><br />            <span class="kw1">do</span> j=<span class="nu0">1</span> <span class="kw2">for</span> Lops; @<span class="sy0">.</span>j=<span class="kw6">substr</span><span class="br0">&#40;</span>ops,j,<span class="nu0">1</span><span class="br0">&#41;</span> <span class="coMULTI">/*define a version for fast execution. */</span><br />            <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br /><span class="kw1">signal</span> <span class="kw2">on</span> <span class="kw2">syntax</span>                                 <span class="coMULTI">/*enable program to trap syntax errors.*/</span><br /><span class="kw1">if</span> yyy<span class="sy0">\</span>==<span class="st0">''</span>  <span class="kw3">then</span> <span class="kw1">do</span>; sols=solve<span class="br0">&#40;</span>start, fin<span class="br0">&#41;</span>     <span class="coMULTI">/*solve  from  START  ───►  FINish.    */</span><br />                      <span class="kw1">if</span> sols <span class="sy0">&lt;</span><span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">exit</span> <span class="nu0">13</span>   <span class="coMULTI">/*Was there a problem with the input?  */</span><br />                      <span class="kw1">if</span> sols==<span class="nu0">0</span>  <span class="kw3">then</span> sols=<span class="st0">'No'</span> <span class="coMULTI">/*Englishize  the  SOLS  variable value*/</span><br />                      <span class="kw1">say</span>;   <span class="kw1">say</span>  sols   <span class="st0">'unique solution'</span>s<span class="br0">&#40;</span>sols<span class="br0">&#41;</span>      <span class="st0">&quot;found for&quot;</span>     yyy<br />                      <span class="kw1">exit</span>                       <span class="coMULTI">/*S    [↑]   does pluralizations.      */</span><br />                  <span class="kw3">end</span><br />show=<span class="nu0">0</span>                                           <span class="coMULTI">/*stop  SOLVE  from blabbing solutions.*/</span><br />        <span class="kw1">do</span>  <span class="kw2">forever</span>;         rrrr=<span class="kw6">random</span><span class="br0">&#40;</span><span class="nu0">1111</span>, <span class="nu0">9999</span><span class="br0">&#41;</span><br />        <span class="kw1">if</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="nu0">0</span>, rrrr<span class="br0">&#41;</span><span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">iterate</span>        <span class="coMULTI">/*if it contains a zero, then ignore it*/</span><br />        <span class="kw1">if</span> solve<span class="br0">&#40;</span>rrrr<span class="br0">&#41;</span> <span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">leave</span>          <span class="coMULTI">/*if solved, then we can stop looking. */</span><br />        <span class="kw3">end</span>   <span class="coMULTI">/*forever*/</span><br />show=<span class="nu0">1</span>                                           <span class="coMULTI">/*enable  SOLVE  to display solutions. */</span><br />rrrr=sort<span class="br0">&#40;</span>rrrr<span class="br0">&#41;</span>;    Lrrrr=<span class="kw6">length</span><span class="br0">&#40;</span>rrrr<span class="br0">&#41;</span>           <span class="coMULTI">/*sort four digits (for consistency).  */</span><br />$<span class="sy0">.</span>=<span class="nu0">0</span><br />        <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">for</span> Lrrrr;   _=<span class="kw6">substr</span><span class="br0">&#40;</span>rrrr,j,<span class="nu0">1</span><span class="br0">&#41;</span>  <span class="coMULTI">/*digit count for each digit in  RRRR. */</span><br />        $<span class="sy0">.</span>_= countDigs<span class="br0">&#40;</span>rrrr, _<span class="br0">&#41;</span>                  <span class="coMULTI">/*define the count for this digit.     */</span><br />        <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span>                              <span class="coMULTI">/* [↑] counts duplicates twice, no harm*/</span><br />&#160;<br />__ = <span class="kw6">copies</span><span class="br0">&#40;</span><span class="st0">'─'</span>, <span class="nu0">9</span><span class="br0">&#41;</span>                              <span class="coMULTI">/*used for output highlighting.        */</span><br />prompt= <span class="st0">'Using the digits '</span> rrrr<span class="st0">&quot;,  enter an expression that equals   24    (or QUIT):&quot;</span><br />                                                 <span class="coMULTI">/* [↓]  ITERATE  needs a variable name.*/</span><br />  <span class="kw1">do</span> prompter=<span class="nu0">0</span>;   <span class="kw1">say</span>;    <span class="kw1">say</span> __ prompt         <span class="coMULTI">/*display blank line and the prompt (P)*/</span><br />  <span class="kw1">pull</span> y;                  y=<span class="kw6">space</span><span class="br0">&#40;</span>y, <span class="nu0">0</span><span class="br0">&#41;</span>         <span class="coMULTI">/*get Y from CL, then remove all blanks*/</span><br />  <span class="kw1">if</span> <span class="kw6">abbrev</span><span class="br0">&#40;</span><span class="st0">'QUIT'</span>, y, <span class="nu0">1</span><span class="br0">&#41;</span>  <span class="kw3">then</span> <span class="kw1">exit</span> <span class="nu0">0</span>           <span class="coMULTI">/*Does the user want to quit this game?*/</span><br />  _v=<span class="kw6">verify</span><span class="br0">&#40;</span>y, digs <span class="sy0">||</span> ops <span class="sy0">||</span> groupSym<span class="br0">&#41;</span>;                         a=<span class="kw6">substr</span><span class="br0">&#40;</span>y, <span class="kw6">max</span><span class="br0">&#40;</span><span class="nu0">1</span>,_v<span class="br0">&#41;</span>, <span class="nu0">1</span><span class="br0">&#41;</span><br />  <span class="kw1">if</span> _v<span class="sy0">\</span>==<span class="nu0">0</span>        <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> ger  <span class="st0">&quot;invalid character:&quot;</span>  a;   <span class="kw1">iterate</span>;    <span class="kw3">end</span><br />  <span class="kw1">if</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="st0">'**'</span>, y<span class="br0">&#41;</span>  <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> ger  <span class="st0">&quot;invalid  **  operator&quot;</span>;   <span class="kw1">iterate</span>;    <span class="kw3">end</span><br />  <span class="kw1">if</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="st0">'//'</span>, y<span class="br0">&#41;</span>  <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> ger  <span class="st0">&quot;invalid  //  operator&quot;</span>;   <span class="kw1">iterate</span>;    <span class="kw3">end</span><br />  Ly=<span class="kw6">length</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><br />  <span class="kw1">if</span> y==<span class="st0">''</span>         <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> validate y;                     <span class="kw1">iterate</span>;    <span class="kw3">end</span><br />&#160;<br />            <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">for</span> Ly-<span class="nu0">1</span>;  <span class="kw1">if</span> <span class="sy0">\</span><span class="kw6">datatype</span><span class="br0">&#40;</span><span class="kw6">substr</span><span class="br0">&#40;</span>y, j  , <span class="nu0">1</span><span class="br0">&#41;</span>,  <span class="st0">'W'</span><span class="br0">&#41;</span>    <span class="kw3">then</span> <span class="kw1">iterate</span><br />                               <span class="kw1">if</span> <span class="sy0">\</span><span class="kw6">datatype</span><span class="br0">&#40;</span><span class="kw6">substr</span><span class="br0">&#40;</span>y, j+<span class="nu0">1</span>, <span class="nu0">1</span><span class="br0">&#41;</span>,  <span class="st0">'W'</span><span class="br0">&#41;</span>    <span class="kw3">then</span> <span class="kw1">iterate</span><br />            <span class="kw1">call</span> ger  <span class="st0">'invalid use of  &quot;digit abuttal&quot;.'</span><br />            <span class="kw1">iterate</span> prompter<br />            <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br />&#160;<br />  yd=countDigs<span class="br0">&#40;</span>y, digs<span class="br0">&#41;</span>                          <span class="coMULTI">/*count of the digits 1──►9 (123456789)*/</span><br />  <span class="kw1">if</span> yd<span class="sy0">&lt;</span><span class="nu0">4</span>  <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> ger <span class="st0">'not enough digits entered.'</span>;   <span class="kw1">iterate</span>  <span class="coMULTI">/*prompter*/</span>;   <span class="kw3">end</span><br />  <span class="kw1">if</span> yd<span class="sy0">&gt;</span><span class="nu0">4</span>  <span class="kw3">then</span> <span class="kw1">do</span>;  <span class="kw1">call</span> ger <span class="st0">'too many digits entered.'</span> &#160;;   <span class="kw1">iterate</span>  <span class="coMULTI">/*prompter*/</span>;   <span class="kw3">end</span><br />&#160;<br />           <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">for</span> <span class="nu0">9</span>;             <span class="kw1">if</span> $<span class="sy0">.</span>j==<span class="nu0">0</span>   <span class="kw3">then</span> <span class="kw1">iterate</span><br />           _d=countDigs<span class="br0">&#40;</span>y, j<span class="br0">&#41;</span>;        <span class="kw1">if</span> $<span class="sy0">.</span>j==_d  <span class="kw3">then</span> <span class="kw1">iterate</span><br />           <span class="kw1">if</span> _d<span class="sy0">&lt;</span>$<span class="sy0">.</span>j   <span class="kw3">then</span> <span class="kw1">call</span> ger  <span class="st0">'not enough'</span>   j   <span class="st0">&quot;digits, must be&quot;</span>   $<span class="sy0">.</span>j<br />                       <span class="kw3">else</span> <span class="kw1">call</span> ger  <span class="st0">'too many'</span>     j   <span class="st0">&quot;digits, must be&quot;</span>   $<span class="sy0">.</span>j<br />           <span class="kw1">iterate</span> prompter<br />           <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br />&#160;<br />  <span class="kw1">interpret</span>  <span class="st0">'ans='</span>  <span class="kw6">translate</span><span class="br0">&#40;</span>y, <span class="st0">'()()'</span>, <span class="st0">&quot;[]{}&quot;</span><span class="br0">&#41;</span>;    ans=ans<span class="sy0">/</span><span class="nu0">1</span><br />  <span class="kw1">if</span> ans==<span class="nu0">24</span>  <span class="kw3">then</span> <span class="kw1">leave</span> prompter;                    <span class="kw1">say</span>  <span class="st0">'incorrect, '</span>    y<span class="st0">&quot;=&quot;</span>ans<br />  <span class="kw3">end</span>   <span class="coMULTI">/*prompter*/</span><br />&#160;<br /><span class="kw1">say</span>;            <span class="kw1">say</span> <span class="kw6">center</span><span class="br0">&#40;</span><span class="st0">'┌─────────────────────┐'</span>, <span class="nu0">79</span><span class="br0">&#41;</span><br />                <span class="kw1">say</span> <span class="kw6">center</span><span class="br0">&#40;</span><span class="st0">'│                     │'</span>, <span class="nu0">79</span><span class="br0">&#41;</span><br />                <span class="kw1">say</span> <span class="kw6">center</span><span class="br0">&#40;</span><span class="st0">'│  congratulations&#160;!  │'</span>, <span class="nu0">79</span><span class="br0">&#41;</span><br />                <span class="kw1">say</span> <span class="kw6">center</span><span class="br0">&#40;</span><span class="st0">'│                     │'</span>, <span class="nu0">79</span><span class="br0">&#41;</span><br />                <span class="kw1">say</span> <span class="kw6">center</span><span class="br0">&#40;</span><span class="st0">'└─────────────────────┘'</span>, <span class="nu0">79</span><span class="br0">&#41;</span><br /><span class="kw1">exit</span>                                             <span class="coMULTI">/*stick a fork in it,  we're all done. */</span><br /><span class="coMULTI">/*──────────────────────────────────────────────────────────────────────────────────────*/</span><br />countDigs: <span class="kw1">arg</span>&#160;?;   <span class="kw1">return</span>  <span class="kw6">length</span><span class="br0">&#40;</span>?<span class="br0">&#41;</span> - <span class="kw6">length</span><span class="br0">&#40;</span><span class="kw6">space</span><span class="br0">&#40;</span><span class="kw6">translate</span><span class="br0">&#40;</span>?, , <span class="kw1">arg</span><span class="br0">&#40;</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#41;</span>, <span class="nu0">0</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />div:       <span class="kw1">if</span> <span class="kw1">arg</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>=<span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">return</span> 7e9;  <span class="kw1">return</span>  <span class="kw1">arg</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>          <span class="coMULTI">/*÷ by 0? Fudge result*/</span><br />ger:       <span class="kw1">say</span>; <span class="kw1">say</span> __ <span class="st0">'***error*** for expression:'</span> y; <span class="kw1">say</span> __ <span class="kw1">arg</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>; <span class="kw1">say</span>; OK=<span class="nu0">0</span>; <span class="kw1">return</span> <span class="nu0">0</span><br />s:         <span class="kw1">if</span> <span class="kw1">arg</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>==<span class="nu0">1</span>  <span class="kw3">then</span> <span class="kw1">return</span> <span class="st0">''</span>;             <span class="kw1">return</span> <span class="st0">&quot;s&quot;</span>   <span class="coMULTI">/*a simple pluralizer.*/</span><br /><span class="kw2">syntax</span>:    <span class="kw1">call</span> ger  <span class="st0">'illegal syntax in'</span>  y;      <span class="kw1">exit</span><br /><span class="coMULTI">/*──────────────────────────────────────────────────────────────────────────────────────*/</span><br />solve: <span class="kw1">parse</span> <span class="kw1">arg</span> ssss, ffff                      <span class="coMULTI">/*parse the argument passed to  SOLVE. */</span><br />       <span class="kw1">if</span> ffff==<span class="st0">''</span>         <span class="kw3">then</span> ffff=ssss        <span class="coMULTI">/*create a   FFFF   if necessary.      */</span><br />       <span class="kw1">if</span> <span class="sy0">\</span>validate<span class="br0">&#40;</span>ssss<span class="br0">&#41;</span>  <span class="kw3">then</span> <span class="kw1">return</span> -<span class="nu0">1</span>        <span class="coMULTI">/*validate the  SSSS  field.           */</span><br />       <span class="kw1">if</span> <span class="sy0">\</span>validate<span class="br0">&#40;</span>ffff<span class="br0">&#41;</span>  <span class="kw3">then</span> <span class="kw1">return</span> -<span class="nu0">1</span>        <span class="coMULTI">/*    &quot;     &quot;   FFFF    &quot;              */</span><br />       #=<span class="nu0">0</span>                                       <span class="coMULTI">/*number of found solutions (so far).  */</span><br />      &#160;!<span class="sy0">.</span>=<span class="nu0">0</span>                                      <span class="coMULTI">/*a method to hold unique expressions. */</span><br />                                                 <span class="coMULTI">/*alternative:  indent=copies(' ',30)  */</span><br />         <span class="kw1">do</span> g=ssss  <span class="kw2">to</span> ffff                      <span class="coMULTI">/*process a (possible) range of values.*/</span><br />         <span class="kw1">if</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="nu0">0</span>, g<span class="br0">&#41;</span><span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">iterate</span>          <span class="coMULTI">/*ignore values with zero in them.     */</span><br />&#160;<br />             <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">for</span> <span class="nu0">4</span>;  g<span class="sy0">.</span>j=<span class="kw6">substr</span><span class="br0">&#40;</span>g, j, <span class="nu0">1</span><span class="br0">&#41;</span> <span class="coMULTI">/*define a version for fast execution. */</span><br />             <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br />&#160;<br />           <span class="kw1">do</span> i      =<span class="nu0">1</span>  <span class="kw2">for</span> Lops                <span class="coMULTI">/*insert an operator after 1st number. */</span><br />             <span class="kw1">do</span> j    =<span class="nu0">1</span>  <span class="kw2">for</span> Lops                <span class="coMULTI">/*   &quot;    &quot;     &quot;      &quot;   2nd    &quot;    */</span><br />               <span class="kw1">do</span> k  =<span class="nu0">1</span>  <span class="kw2">for</span> Lops                <span class="coMULTI">/*   &quot;    &quot;     &quot;      &quot;   3rd    &quot;    */</span><br />                 <span class="kw1">do</span> m=<span class="nu0">0</span>  <span class="kw2">to</span>  <span class="nu0">3</span>;    L<span class="sy0">.</span>=           <span class="coMULTI">/*assume no left parenthesis  (so far).*/</span><br />                   <span class="kw1">do</span> n=m+<span class="nu0">1</span>  <span class="kw2">to</span> <span class="nu0">4</span>; L<span class="sy0">.</span>m=Lpar; R<span class="sy0">.</span>= <span class="coMULTI">/*match left paren with a right paren. */</span><br />                   <span class="kw1">if</span> m==<span class="nu0">1</span> <span class="sy0">&amp;</span> n==<span class="nu0">2</span>  <span class="kw3">then</span> L<span class="sy0">.</span>=      <span class="coMULTI">/*special case of&#160;:   (n)  +  ···      */</span><br />                                   <span class="kw3">else</span> <span class="kw1">if</span> m<span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> R<span class="sy0">.</span>n=Rpar             <span class="coMULTI">/*no (, no )*/</span><br />                   e= L<span class="sy0">.</span>1  g<span class="sy0">.</span>1  @<span class="sy0">.</span>i     L<span class="sy0">.</span>2  g<span class="sy0">.</span>2  @<span class="sy0">.</span>j     L<span class="sy0">.</span>3  g<span class="sy0">.</span>3  R<span class="sy0">.</span>3     @<span class="sy0">.</span>k  g<span class="sy0">.</span>4  R<span class="sy0">.</span>4<br />                   e=<span class="kw6">space</span><span class="br0">&#40;</span>e, <span class="nu0">0</span><span class="br0">&#41;</span>                 <span class="coMULTI">/*remove all blanks from the expression*/</span><br />                   yyyE=e                        <span class="coMULTI">/*keep old the version for the display.*/</span><br />                                                 <span class="coMULTI">/* [↓] change   /(yyy)  ═══► /div(yyy) */</span><br />                   <span class="kw1">if</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="st0">'/('</span>, e<span class="br0">&#41;</span><span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> e=<span class="kw6">changestr</span><span class="br0">&#40;</span> <span class="st0">&quot;/(&quot;</span>,  e,  <span class="st0">'/div('</span>  <span class="br0">&#41;</span><br />                   <span class="kw1">if</span>&#160;!<span class="sy0">.</span>e  <span class="kw3">then</span> <span class="kw1">iterate</span>          <span class="coMULTI">/*was this expression already used?    */</span><br />                  &#160;!<span class="sy0">.</span>e=<span class="nu0">1</span>                         <span class="coMULTI">/*mark this expression as being used.  */</span><br />                   <span class="kw1">interpret</span>  <span class="st0">'x='</span>  e            <span class="coMULTI">/*have REXX do all the heavy lifting   */</span><br />                   <span class="kw1">if</span> x<span class="sy0">\</span>=<span class="nu0">24</span>  <span class="kw3">then</span> <span class="kw1">iterate</span>        <span class="coMULTI">/*Is the result incorrect?  Try again. */</span><br />                   #=#+<span class="nu0">1</span>                         <span class="coMULTI">/*bump number of found solutions.      */</span><br />                   <span class="kw1">if</span> show  <span class="kw3">then</span> <span class="kw1">say</span> indent   <span class="st0">'a solution:'</span>   <span class="kw6">translate</span><span class="br0">&#40;</span>yyyE, <span class="st0">']['</span>, <span class="st0">&quot;)(&quot;</span><span class="br0">&#41;</span><br />                   <span class="kw3">end</span>   <span class="coMULTI">/*n*/</span>                   <span class="coMULTI">/* [↑]   display a (single) solution.  */</span><br />                 <span class="kw3">end</span>     <span class="coMULTI">/*m*/</span><br />               <span class="kw3">end</span>       <span class="coMULTI">/*k*/</span><br />             <span class="kw3">end</span>         <span class="coMULTI">/*j*/</span><br />           <span class="kw3">end</span>           <span class="coMULTI">/*i*/</span><br />         <span class="kw3">end</span>             <span class="coMULTI">/*g*/</span><br />&#160;<br />       <span class="kw1">return</span> #<br /><span class="coMULTI">/*──────────────────────────────────────────────────────────────────────────────────────*/</span><br />sort: <span class="kw1">procedure</span>; <span class="kw1">parse</span> <span class="kw1">arg</span> #;  L=<span class="kw6">length</span><span class="br0">&#40;</span>#<span class="br0">&#41;</span>; &#160;!<span class="sy0">.</span>=      <span class="coMULTI">/*this is a modified   bin   sort.*/</span><br />                            <span class="kw1">do</span> d=<span class="nu0">1</span>  <span class="kw2">for</span> L;  _=<span class="kw6">substr</span><span class="br0">&#40;</span>#, d, <span class="nu0">1</span><span class="br0">&#41;</span>; &#160;!<span class="sy0">.</span>d=!<span class="sy0">.</span>d <span class="sy0">||</span> _;   <span class="kw3">end</span>  <span class="coMULTI">/*d*/</span><br />      <span class="kw1">return</span> <span class="kw6">space</span><span class="br0">&#40;</span>!<span class="sy0">.</span>0&#160;!<span class="sy0">.</span>1&#160;!<span class="sy0">.</span>2&#160;!<span class="sy0">.</span>3&#160;!<span class="sy0">.</span>4&#160;!<span class="sy0">.</span>5&#160;!<span class="sy0">.</span>6&#160;!<span class="sy0">.</span>7&#160;!<span class="sy0">.</span>8&#160;!<span class="sy0">.</span>9, <span class="nu0">0</span><span class="br0">&#41;</span>     <span class="coMULTI">/*reconstitute the #.*/</span><br /><span class="coMULTI">/*──────────────────────────────────────────────────────────────────────────────────────*/</span><br />validate: <span class="kw1">parse</span> <span class="kw1">arg</span> y;  OK=<span class="nu0">1</span>;  _v=<span class="kw6">verify</span><span class="br0">&#40;</span>y,digs<span class="br0">&#41;</span>; DE=<span class="st0">'digits entered, there must be four.'</span><br />              <span class="kw1">select</span><br />              <span class="kw3">when</span> y==<span class="st0">''</span>         <span class="kw3">then</span> <span class="kw1">call</span> ger         <span class="st0">&quot;no&quot;</span>  DE<br />              <span class="kw3">when</span> <span class="kw6">length</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><span class="sy0">&lt;</span><span class="nu0">4</span>   <span class="kw3">then</span> <span class="kw1">call</span> ger <span class="st0">&quot;not enough&quot;</span>  DE<br />              <span class="kw3">when</span> <span class="kw6">length</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><span class="sy0">&gt;</span><span class="nu0">4</span>   <span class="kw3">then</span> <span class="kw1">call</span> ger   <span class="st0">&quot;too many&quot;</span>  DE<br />              <span class="kw3">when</span> <span class="kw6">pos</span><span class="br0">&#40;</span><span class="nu0">0</span>,y<span class="br0">&#41;</span><span class="sy0">\</span>==<span class="nu0">0</span>  <span class="kw3">then</span> <span class="kw1">call</span> ger <span class="st0">&quot;can't use the digit  0 (zero).&quot;</span><br />              <span class="kw3">when</span> _v<span class="sy0">\</span>==<span class="nu0">0</span>        <span class="kw3">then</span> <span class="kw1">call</span> ger <span class="st0">&quot;illegal character: &quot;</span>      <span class="kw6">substr</span><span class="br0">&#40;</span>y, _v, <span class="nu0">1</span><span class="br0">&#41;</span><br />              <span class="kw3">otherwise</span>          <span class="kw1">nop</span><br />              <span class="kw3">end</span>    <span class="coMULTI">/*select*/</span><br />          <span class="kw1">return</span> OK</pre>
<p>Some older REXXes don't have a &#160; <b>changestr</b> &#160; BIF, &#160; so one is included here &#160; ──► &#160; <a href="/wiki/CHANGESTR.REX" title="CHANGESTR.REX">CHANGESTR.REX</a>.
</p><p><b>output</b> &#160; of a sample execution:
</p>
<pre>
───────── Using the digits  8961,  enter an expression that equals   24    (or QUIT):
8 * [9-6] / 1               ◄■■■■■■■■■■■■■■ this is the user input.

                            ┌─────────────────────┐
                            │                     │
                            │  congratulations&#160;!  │
                            │                     │
                            └─────────────────────┘
</pre>
<p><span id="rexx_version2"></span>
</p>
<h3><span class="mw-headline" id="version_2">version 2</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=74" title="Edit section: version 2">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The above was created for Classic Rexx and can be used, unchanged, for Regina and other implementations of Classic Rexx.
After recent changes it can also be used, unchanged, for ooRexx.
</p><p>Therefore I removed the code of the 24 game's Version 2 for Rexx.
</p><p>As regards TSO (German code page):
I wrote me a little program that just translates \ and | to ^ and&#160;! in the source (except for literals and comments) 
and version 1 (Gerard's) of the 24 game works, 
if translated that way and otherwise unchanged, on TSO. TSO supports the A=;  
For the sake of my 80 column CLIST PDS I had to split the few lines that are longer than that.
</p><p><b>Result:</b>
</p>
<pre>
                               ISPF Command Shell                            
 Enter TSO or Workstation commands below:                                  
  ===&gt; tso h24   
Using the digits 5559 , enter an expression that equals 24 (or QUIT):       
5+5+5+9                                                                      
                                                                           
                             +---------------------+                         
                            &#160;:                    &#160;:                         
                            &#160;:  congratulations&#160;! &#160;:                         
                            &#160;:                    &#160;:                         
                             +---------------------+       
</pre>
<p>I just leave the complete version of changestr here although it has nothing to do with 24!
</p>
<pre class="rexx highlighted_source"><span class="kw6">changestr</span>: <span class="kw1">Procedure</span>                                                    <br /><span class="coMULTI">/* change needle to newneedle in haystack (as often as specified      */</span><br /><span class="coMULTI">/* or all of them if count is omitted                                 */</span><br />  <span class="kw1">Parse</span> <span class="kw1">Arg</span> needle,haystack,newneedle,count                             <br />  <span class="kw1">If</span> count<span class="sy0">&gt;</span><span class="st0">''</span> <span class="kw3">Then</span> <span class="kw1">Do</span>                                                   <br />    <span class="kw1">If</span> count=<span class="nu0">0</span> <span class="kw3">Then</span> <span class="kw1">Do</span>                                                  <br />      <span class="kw1">Say</span> <span class="st0">'chstr count must be &gt; 0'</span>                                     <br />      <span class="kw1">Signal</span> <span class="kw2">Syntax</span>                                                     <br />      <span class="kw3">End</span>                                                               <br />    <span class="kw3">End</span>                                                                 <br />  res=<span class="st0">&quot;&quot;</span>                                                                <br />  changes=<span class="nu0">0</span>                                                             <br />  px=<span class="nu0">1</span>                                                                  <br />  <span class="kw1">do</span> <span class="kw2">Until</span> py=<span class="nu0">0</span>                                                         <br />    py=<span class="kw6">pos</span><span class="br0">&#40;</span>needle,haystack,px<span class="br0">&#41;</span>                                          <br />    <span class="kw1">if</span> py<span class="sy0">&gt;</span><span class="nu0">0</span> <span class="kw3">then</span> <span class="kw1">Do</span>                                                     <br />      res=res<span class="sy0">||</span><span class="kw6">substr</span><span class="br0">&#40;</span>haystack,px,py-px<span class="br0">&#41;</span><span class="sy0">||</span>newneedle                     <br />      px=py+<span class="kw6">length</span><span class="br0">&#40;</span>needle<span class="br0">&#41;</span>                                              <br />      changes=changes+<span class="nu0">1</span>                                                 <br />      <span class="kw1">If</span> count<span class="sy0">&gt;</span><span class="st0">''</span> <span class="kw3">Then</span>                                                  <br />        <span class="kw1">If</span> changes=count <span class="kw3">Then</span> <span class="kw1">Leave</span>                                     <br />      <span class="kw3">End</span>                                                               <br />    <span class="kw3">end</span>                                                                 <br />  res=res<span class="sy0">||</span><span class="kw6">substr</span><span class="br0">&#40;</span>haystack,px<span class="br0">&#41;</span>                                          <br />  <span class="kw1">Return</span> res</pre>
<h2><span class="mw-headline" id="Ruby"><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=75" title="Edit section: Ruby">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="ruby highlighted_source"><span class="kw1">class</span> Guess <span class="sy0">&lt;</span> <span class="kw3">String</span><br />  <span class="kw1">def</span> <span class="kw2">self</span>.<span class="me1">play</span><br />    nums = <span class="kw3">Array</span>.<span class="me1">new</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#123;</span><span class="kw3">rand</span><span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#125;</span><br />    <span class="kw3">loop</span> <span class="kw1">do</span><br />      result = get<span class="br0">&#40;</span>nums<span class="br0">&#41;</span>.<span class="me1">evaluate</span>!<br />      <span class="kw1">break</span> <span class="kw1">if</span> result == <span class="nu0">24.0</span><br />      <span class="kw3">puts</span> <span class="st0">&quot;Try again! That gives #{result}!&quot;</span><br />    <span class="kw1">end</span><br />    <span class="kw3">puts</span> <span class="st0">&quot;You win!&quot;</span><br />  <span class="kw1">end</span><br />&#160;<br />  <span class="kw1">def</span> <span class="kw2">self</span>.<span class="me1">get</span><span class="br0">&#40;</span>nums<span class="br0">&#41;</span><br />    <span class="kw3">loop</span> <span class="kw1">do</span><br />      <span class="kw3">print</span> <span class="st0">&quot;<span class="es0">\n</span>Enter a guess using #{nums}: &quot;</span><br />      input = <span class="kw3">gets</span>.<span class="kw3">chomp</span><br />      <span class="kw2">return</span> new<span class="br0">&#40;</span>input<span class="br0">&#41;</span> <span class="kw1">if</span> validate<span class="br0">&#40;</span>input, nums<span class="br0">&#41;</span><br />    <span class="kw1">end</span><br />  <span class="kw1">end</span><br />&#160;<br />  <span class="kw1">def</span> <span class="kw2">self</span>.<span class="me1">validate</span><span class="br0">&#40;</span>guess, nums<span class="br0">&#41;</span><br />    name, error =<br />      <span class="br0">&#123;</span><br />        invalid_character:  <span class="sy0">-&gt;</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="br0">&#123;</span>&#160;!str.<span class="me1">scan</span><span class="br0">&#40;</span><span class="sy0">%</span>r<span class="br0">&#123;</span><span class="br0">&#91;</span>^\d\s<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">+*/-</span><span class="br0">&#93;</span><span class="br0">&#125;</span><span class="br0">&#41;</span>.<span class="me1">empty</span>? <span class="br0">&#125;</span>,<br />        wrong_number:       <span class="sy0">-&gt;</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="br0">&#123;</span> str.<span class="me1">scan</span><span class="br0">&#40;</span><span class="sy0">/</span>\d<span class="sy0">/</span><span class="br0">&#41;</span>.<span class="me1">map</span><span class="br0">&#40;</span><span class="sy0">&amp;</span>:to_i<span class="br0">&#41;</span>.<span class="me1">sort</span>&#160;!= nums.<span class="me1">sort</span> <span class="br0">&#125;</span>,<br />        multi_digit_number: <span class="sy0">-&gt;</span><span class="br0">&#40;</span>str<span class="br0">&#41;</span><span class="br0">&#123;</span> str.<span class="me1">match</span><span class="br0">&#40;</span><span class="sy0">/</span>\d\d<span class="sy0">/</span><span class="br0">&#41;</span> <span class="br0">&#125;</span><br />      <span class="br0">&#125;</span><br />        .<span class="me1">find</span> <span class="br0">&#123;</span><span class="sy0">|</span>name, validator<span class="sy0">|</span> validator<span class="br0">&#91;</span>guess<span class="br0">&#93;</span> <span class="br0">&#125;</span><br />&#160;<br />    error&#160;? <span class="kw3">puts</span><span class="br0">&#40;</span><span class="st0">&quot;Invalid input of a(n) #{name.to_s.tr('_',' ')}!&quot;</span><span class="br0">&#41;</span>&#160;: <span class="kw2">true</span><br />  <span class="kw1">end</span><br />&#160;<br />  <span class="kw1">def</span> evaluate!<br />    as_rat = <span class="kw3">gsub</span><span class="br0">&#40;</span><span class="sy0">/</span><span class="br0">&#40;</span>\d<span class="br0">&#41;</span><span class="sy0">/</span>, <span class="st0">'<span class="es0">\1</span>r'</span><span class="br0">&#41;</span>        <span class="co1"># r&#160;: Rational suffix</span><br />    <span class="kw3">eval</span> <span class="st0">&quot;(#{as_rat}).to_f&quot;</span><br />  <span class="kw1">rescue</span> <span class="kw4">SyntaxError</span><br />    <span class="st0">&quot;[syntax error]&quot;</span><br />  <span class="kw1">end</span><br /><span class="kw1">end</span><br />&#160;<br />Guess.<span class="me1">play</span></pre>
<h2><span class="mw-headline" id="Rust"><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=76" title="Edit section: Rust">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The solution below converts the infix notation to RPN and then calculates the result.
</p><p>I am still new to Rust so i am certain it could be written in a shorter way.
So if there is someone better than me please feel free to improve. 
</p>
<pre class="text highlighted_source">&#160;<br />use std::io::{self,BufRead};<br />extern crate rand;<br />use rand::Rng;<br />&#160;<br />fn op_type(x: char) -&gt; i32{<br />    match x {<br />        '-' | '+' =&gt; return 1,<br />        '/' | '*' =&gt; return 2,<br />        '(' | ')' =&gt; return -1,<br />        _   =&gt; return 0,<br />    }<br />}<br />&#160;<br />fn to_rpn(input: &amp;mut String){<br />&#160;<br />    let mut rpn_string&#160;: String = String::new();<br />    let mut rpn_stack&#160;: String = String::new();<br />    let mut last_token = '#';<br />    for token in input.chars(){<br />        if token.is_digit(10) {<br />            rpn_string.push(token);<br />        }<br />        else if op_type(token) == 0 {<br />            continue;<br />        }<br />        else if op_type(token) &gt; op_type(last_token) || token == '(' {<br />                rpn_stack.push(token);<br />                last_token=token;<br />        }<br />        else {<br />            while let Some(top) = rpn_stack.pop() {<br />                if top=='(' {<br />                    break;<br />                }<br />                rpn_string.push(top);<br />            }<br />            if token&#160;!= ')'{<br />                rpn_stack.push(token);<br />            }<br />        }<br />    }<br />    while let Some(top) = rpn_stack.pop() {<br />        rpn_string.push(top);<br />    }<br />&#160;<br />    println!(&quot;you formula results in {}&quot;, rpn_string);<br />&#160;<br />    *input=rpn_string;<br />}<br />&#160;<br />fn calculate(input: &amp;String, list&#160;: &amp;mut [u32;4]) -&gt; f32{<br />    let mut stack&#160;: Vec&lt;f32&gt; = Vec::new();<br />    let mut accumulator&#160;: f32 = 0.0;<br />&#160;<br />    for token in input.chars(){<br />        if token.is_digit(10) {<br />            let test = token.to_digit(10).unwrap() as u32;<br />            match list.iter().position(|&amp;x| x == test){<br />                Some(idx) =&gt; list[idx]=10 ,<br />                _         =&gt; println!(&quot; invalid digit: {} &quot;,test),<br />            }<br />            stack.push(accumulator);<br />            accumulator = test as f32;<br />        }else{<br />            let a = stack.pop().unwrap();<br />            accumulator = match token {<br />                '-' =&gt; a-accumulator,<br />                '+' =&gt; a+accumulator,<br />                '/' =&gt; a/accumulator,<br />                '*' =&gt; a*accumulator,<br />                _ =&gt; {accumulator},//NOP<br />            };<br />        }<br />    }<br />    println!(&quot;you formula results in {}&quot;,accumulator);<br />    accumulator<br />}<br />&#160;<br />fn main() {<br />&#160;<br />    let mut rng = rand::thread_rng();<br />    let mut list&#160;:[u32;4]=[rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10,rng.gen::&lt;u32&gt;()%10];<br />&#160;<br />    println!(&quot;form 24 with using + - / * {:?}&quot;,list);<br />    //get user input<br />    let mut input = String::new();<br />    io::stdin().read_line(&amp;mut input).unwrap();<br />    //convert to rpn<br />    to_rpn(&amp;mut input);<br />    let result = calculate(&amp;input, &amp;mut list);<br />&#160;<br />    if list.iter().any(|&amp;list| list&#160;!=10){<br />        println!(&quot;and you used all numbers&quot;);<br />        match result {<br />            24.0 =&gt; println!(&quot;you won&quot;),<br />            _ =&gt; println!(&quot;but your formulla doesn't result in 24&quot;),<br />        }<br />    }else{<br />        println!(&quot;you didn't use all the numbers&quot;);<br />    }<br />&#160;<br />}<br />&#160;</pre>
<h2><span class="mw-headline" id="Scala"><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=77" title="Edit section: Scala">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The solution below is much more complex than strictly needed, because it shows off
Scala's Parser library, which enables easy construction of parsers from
EBNF grammars.
</p><p>Only problems with solution are shown to the user.
</p>
<div style="width: full; overflow: scroll"><pre class="scala highlighted_source"><a href="http://scala-lang.org"><span class="kw1">object</span></a> TwentyFourGame <span class="br0">&#123;</span><br />  <a href="http://scala-lang.org"><span class="kw1">def</span></a> main<span class="br0">&#40;</span>args<span class="sy0">:</span> Array<span class="br0">&#91;</span>String<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <a href="http://scala-lang.org"><span class="kw1">import</span></a> Parser.<span class="me1">TwentyFourParser</span><br />&#160;<br />    println<span class="br0">&#40;</span>welcome<span class="br0">&#41;</span><br />&#160;<br />    <a href="http://scala-lang.org"><span class="kw1">var</span></a> parser <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">new</span></a> TwentyFourParser<span class="br0">&#40;</span>problemsIterator.<span class="me1">next</span><span class="br0">&#41;</span><br />    println<span class="br0">&#40;</span><span class="st0">&quot;Your four digits: &quot;</span>+parser+<span class="st0">&quot;.&quot;</span><span class="br0">&#41;</span><br />&#160;<br />    <a href="http://scala-lang.org"><span class="kw1">var</span></a> finished <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">false</span></a><br />    <a href="http://scala-lang.org"><span class="kw1">var</span></a> expressionCount <span class="sy0">=</span> <span class="nu0">1</span><br />    <a href="http://scala-lang.org"><span class="kw1">do</span></a> <span class="br0">&#123;</span><br />      <a href="http://scala-lang.org"><span class="kw1">val</span></a> line <span class="sy0">=</span> Console.<span class="me1">readLine</span><span class="br0">&#40;</span><span class="st0">&quot;Expression &quot;</span>+expressionCount+<span class="st0">&quot;: &quot;</span><span class="br0">&#41;</span><br />      line <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;!&quot;</span> <span class="sy0">=&gt;</span><br />          parser <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">new</span></a> TwentyFourParser<span class="br0">&#40;</span>problemsIterator.<span class="me1">next</span><span class="br0">&#41;</span><br />          println<span class="br0">&#40;</span><span class="st0">&quot;New digits: &quot;</span>+parser+<span class="st0">&quot;.&quot;</span><span class="br0">&#41;</span><br />&#160;<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;q&quot;</span> <span class="sy0">=&gt;</span><br />          finished <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">true</span></a><br />&#160;<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="sy0">_</span> <span class="sy0">=&gt;</span><br />          parser readExpression line <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />            <a href="http://scala-lang.org"><span class="kw1">case</span></a> Some<span class="br0">&#40;</span><span class="nu0">24</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> println<span class="br0">&#40;</span><span class="st0">&quot;That's right!&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span> finished <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">true</span></a><br />            <a href="http://scala-lang.org"><span class="kw1">case</span></a> Some<span class="br0">&#40;</span>n<span class="br0">&#41;</span> <span class="sy0">=&gt;</span> println<span class="br0">&#40;</span><span class="st0">&quot;Sorry, that's &quot;</span>+n+<span class="st0">&quot;.&quot;</span><span class="br0">&#41;</span><br />            <a href="http://scala-lang.org"><span class="kw1">case</span></a> None <span class="sy0">=&gt;</span><br />          <span class="br0">&#125;</span><br />      <span class="br0">&#125;</span><br />      expressionCount +<span class="sy0">=</span> <span class="nu0">1</span><br />    <span class="br0">&#125;</span> <a href="http://scala-lang.org"><span class="kw1">while</span></a> <span class="br0">&#40;</span><span class="sy0">!</span>finished<span class="br0">&#41;</span><br />&#160;<br />    println<span class="br0">&#40;</span><span class="st0">&quot;Thank you and goodbye!&quot;</span><span class="br0">&#41;</span><br />  <span class="br0">&#125;</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">val</span></a> welcome <span class="sy0">=</span> <span class="st0">&quot;&quot;</span><span class="st0">&quot;|The 24 Game<br />                   |<br />                   |Given any four digits in the range 1 to 9, which may have repetitions,<br />                   |Using just the +, -, *, and / operators; and the possible use of<br />                   |brackets, (), show how to make an answer of 24.<br />                   |<br />                   |An answer of &quot;</span>q<span class="st0">&quot; will quit the game.<br />                   |An answer of &quot;</span><span class="sy0">!</span><span class="st0">&quot; will generate a new set of four digits.<br />                   |Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />                   |<br />                   |Note: you cannot form multiple digit numbers from the supplied digits,<br />                   |so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />                   |&quot;</span><span class="st0">&quot;&quot;</span>.<span class="me1">stripMargin</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">val</span></a> problemsIterator <span class="sy0">=</span> <span class="br0">&#40;</span><br />    Iterator <br />    continually List.<span class="me1">fill</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#40;</span>scala.<span class="me1">util</span>.<span class="me1">Random</span>.<span class="me1">nextInt</span><span class="br0">&#40;</span><span class="nu0">9</span><span class="br0">&#41;</span> + <span class="nu0">1</span> toDouble<span class="br0">&#41;</span> <br />    filter hasSolution<br />  <span class="br0">&#41;</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">def</span></a> hasSolution<span class="br0">&#40;</span>l<span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">=</span> permute<span class="br0">&#40;</span>l<span class="br0">&#41;</span> flatMap computeAllOperations exists <span class="br0">&#40;</span><span class="sy0">_</span> <span class="sy0">==</span> <span class="nu0">24</span><span class="br0">&#41;</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">def</span></a> computeAllOperations<span class="br0">&#40;</span>l<span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span> <span class="sy0">=</span> l <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />    <a href="http://scala-lang.org"><span class="kw1">case</span></a> Nil <span class="sy0">=&gt;</span> Nil<br />    <a href="http://scala-lang.org"><span class="kw1">case</span></a> x <span class="sy0">::</span> Nil <span class="sy0">=&gt;</span> l<br />    <a href="http://scala-lang.org"><span class="kw1">case</span></a> x <span class="sy0">::</span> xs <span class="sy0">=&gt;</span><br />      <a href="http://scala-lang.org"><span class="kw1">for</span></a> <span class="br0">&#123;</span><br />        y <span class="sy0">&lt;</span>- computeAllOperations<span class="br0">&#40;</span>xs<span class="br0">&#41;</span><br />        z <span class="sy0">&lt;</span>- <a href="http://scala-lang.org"><span class="kw1">if</span></a> <span class="br0">&#40;</span>y <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> List<span class="br0">&#40;</span>x<span class="sy0">*</span>y, x+y, x-y<span class="br0">&#41;</span> <a href="http://scala-lang.org"><span class="kw1">else</span></a> List<span class="br0">&#40;</span>x<span class="sy0">*</span>y, x/y, x+y, x-y<span class="br0">&#41;</span><br />      <span class="br0">&#125;</span> <a href="http://scala-lang.org"><span class="kw1">yield</span></a> z<br />  <span class="br0">&#125;</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">def</span></a> permute<span class="br0">&#40;</span>l<span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">:</span> List<span class="br0">&#91;</span>List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#93;</span> <span class="sy0">=</span> l <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />    <a href="http://scala-lang.org"><span class="kw1">case</span></a> Nil <span class="sy0">=&gt;</span> List<span class="br0">&#40;</span>Nil<span class="br0">&#41;</span><br />    <a href="http://scala-lang.org"><span class="kw1">case</span></a> x <span class="sy0">::</span> xs <span class="sy0">=&gt;</span><br />      <a href="http://scala-lang.org"><span class="kw1">for</span></a> <span class="br0">&#123;</span><br />        ys <span class="sy0">&lt;</span>- permute<span class="br0">&#40;</span>xs<span class="br0">&#41;</span><br />        position <span class="sy0">&lt;</span>- <span class="nu0">0</span> to ys.<span class="me1">length</span><br />        <span class="br0">&#40;</span>left, right<span class="br0">&#41;</span> <span class="sy0">=</span> ys splitAt position<br />      <span class="br0">&#125;</span> <a href="http://scala-lang.org"><span class="kw1">yield</span></a> left <span class="sy0">:::</span> <span class="br0">&#40;</span>x <span class="sy0">::</span> right<span class="br0">&#41;</span><br />  <span class="br0">&#125;</span><br />&#160;<br />  <a href="http://scala-lang.org"><span class="kw1">object</span></a> Parser <span class="br0">&#123;</span><br />    <span class="coMULTI">/*  Arithmetic expression grammar production rules in EBNF form:<br />     *<br />     * &lt;expr&gt; --&gt; &lt;term&gt; ( '+' &lt;term&gt; | '-' &lt;term&gt; )*<br />     * &lt;term&gt; --&gt; &lt;factor&gt; ( '*'  &lt;factor&gt; | '/'  &lt;factor&gt; )*<br />     * &lt;factor&gt; --&gt; '(' &lt;expr&gt; ')' | &lt;digit&gt;<br />     * &lt;digit&gt; --&gt; 0 | 1  | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9<br />     * <br />     * Semantically, &lt;digit&gt; can only be a digit from the list of remaining digits.<br />     */</span><br />&#160;<br />    <a href="http://scala-lang.org"><span class="kw1">class</span></a> TwentyFourParser<span class="br0">&#40;</span>digits<span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#41;</span> <a href="http://scala-lang.org"><span class="kw1">extends</span></a> scala.<span class="me1">util</span>.<span class="me1">parsing</span>.<span class="me1">combinator</span>.<span class="me1">RegexParsers</span> <span class="br0">&#123;</span><br />      require<span class="br0">&#40;</span>digits.<span class="me1">length</span> <span class="sy0">==</span> <span class="nu0">4</span> <span class="sy0">&amp;&amp;</span> digits.<span class="me1">forall</span><span class="br0">&#40;</span>d <span class="sy0">=&gt;</span> <span class="nu0">0</span> <span class="sy0">&lt;=</span> d <span class="sy0">&amp;&amp;</span> d <span class="sy0">&lt;=</span> <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />      <a href="http://scala-lang.org"><span class="kw1">override</span></a> <a href="http://scala-lang.org"><span class="kw1">val</span></a> toString <span class="sy0">=</span> digits.<span class="me1">map</span><span class="br0">&#40;</span><span class="sy0">_</span>.<span class="me1">toInt</span><span class="br0">&#41;</span>.<span class="me1">mkString</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><br />&#160;<br />      <span class="co1">// Grammar</span><br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> exprConsumingAllDigits <span class="sy0">=</span> expr ^<span class="sy0">?</span> <span class="br0">&#40;</span>remainingDigits.<span class="me1">allDigitsConsumed</span>, digitsRemainingError<span class="br0">&#41;</span> <span class="co1">// Guarantees all digits consumed</span><br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> expr <span class="sy0">:</span> Parser<span class="br0">&#91;</span>Double<span class="br0">&#93;</span> <span class="sy0">=</span> term ~ rep<span class="br0">&#40;</span> <span class="st0">&quot;+&quot;</span> ~ term | <span class="st0">&quot;-&quot;</span> ~ term<span class="br0">&#41;</span> ^^ solveOperationChain<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> term <span class="sy0">=</span> factor ~ rep<span class="br0">&#40;</span> <span class="st0">&quot;*&quot;</span> ~ factor | <span class="st0">&quot;/&quot;</span> ~ factor<span class="br0">&#41;</span> ^^ solveOperationChain<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> factor <span class="sy0">=</span> <span class="st0">&quot;(&quot;</span> ~<span class="sy0">&gt;</span> expr <span class="sy0">&lt;</span>~ <span class="st0">&quot;)&quot;</span> | digit<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> digit <span class="sy0">=</span> digitRegex ^<span class="sy0">?</span> <span class="br0">&#40;</span>remainingDigits.<span class="me1">consumeDigit</span>, digitNotAllowedError<span class="br0">&#41;</span> <br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> digitRegex <span class="sy0">=</span> <span class="st0">&quot;<span class="es1">\\</span>d&quot;</span>.<span class="me1">r</span> | digitExpected<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> digitExpected<span class="sy0">:</span> Parser<span class="br0">&#91;</span>String<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;.&quot;</span>.<span class="me1">r</span> <span class="sy0">&lt;</span>~ failure<span class="br0">&#40;</span>expectedDigitError<span class="br0">&#41;</span> <span class="co1">// Produces clear error messages</span><br />&#160;<br />      <span class="co1">// Evaluate expressions</span><br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> readExpression<span class="br0">&#40;</span>input<span class="sy0">:</span> String<span class="br0">&#41;</span><span class="sy0">:</span> Option<span class="br0">&#91;</span>Double<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><br />        remainingDigits <span class="sy0">=</span> <a href="http://scala-lang.org"><span class="kw1">new</span></a> DigitList<span class="br0">&#40;</span>digits<span class="br0">&#41;</span> <span class="co1">// Initialize list of digits to be consumed</span><br />        parseAll<span class="br0">&#40;</span>exprConsumingAllDigits, input<span class="br0">&#41;</span> <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />          <a href="http://scala-lang.org"><span class="kw1">case</span></a> Success<span class="br0">&#40;</span>result, <span class="sy0">_</span><span class="br0">&#41;</span> <span class="sy0">=&gt;</span> Some<span class="br0">&#40;</span>result<span class="br0">&#41;</span><br />          <a href="http://scala-lang.org"><span class="kw1">case</span></a> NoSuccess<span class="br0">&#40;</span>msg, next<span class="br0">&#41;</span> <span class="sy0">=&gt;</span><br />            println<span class="br0">&#40;</span>ParsingErrorFormatter<span class="br0">&#40;</span>msg, next<span class="br0">&#41;</span><span class="br0">&#41;</span><br />            None<br />        <span class="br0">&#125;</span><br />      <span class="br0">&#125;</span><br />&#160;<br />      <span class="co1">// List of digits to be consumed</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">var</span></a> remainingDigits<span class="sy0">:</span> DigitList <span class="sy0">=</span> <span class="sy0">_</span><br />&#160;<br />      <span class="co1">// Solve partial results from parsing</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> solveOperationChain<span class="br0">&#40;</span>partialResult<span class="sy0">:</span> ~<span class="br0">&#91;</span>Double,List<span class="br0">&#91;</span>~<span class="br0">&#91;</span>String,Double<span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">:</span> Double <span class="sy0">=</span> partialResult <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> first ~ chain <span class="sy0">=&gt;</span> chain.<span class="me1">foldLeft</span><span class="br0">&#40;</span>first<span class="br0">&#41;</span><span class="br0">&#40;</span>doOperation<span class="br0">&#41;</span><br />      <span class="br0">&#125;</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> doOperation<span class="br0">&#40;</span>acc<span class="sy0">:</span> Double, op<span class="sy0">:</span> ~<span class="br0">&#91;</span>String, Double<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">:</span> Double <span class="sy0">=</span> op <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">&#123;</span><br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;+&quot;</span> ~ operand <span class="sy0">=&gt;</span> acc + operand<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;-&quot;</span> ~ operand <span class="sy0">=&gt;</span> acc - operand<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;*&quot;</span> ~ operand <span class="sy0">=&gt;</span> acc <span class="sy0">*</span> operand<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="st0">&quot;/&quot;</span> ~ operand <span class="sy0">=&gt;</span> acc / operand<br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> x <span class="sy0">=&gt;</span> error<span class="br0">&#40;</span><span class="st0">&quot;Unknown operation &quot;</span>+x+<span class="st0">&quot;.&quot;</span><span class="br0">&#41;</span> <br />      <span class="br0">&#125;</span><br />&#160;<br />      <span class="co1">// Error messages</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> digitNotAllowedError<span class="br0">&#40;</span>d<span class="sy0">:</span> String<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;Digit &quot;</span>+d+<span class="st0">&quot; is not allowed here. Available digits: &quot;</span>+remainingDigits+<span class="st0">&quot;.&quot;</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> digitsRemainingError<span class="br0">&#40;</span>x<span class="sy0">:</span> Any<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="st0">&quot;Not all digits were consumed. Digits remaining: &quot;</span>+remainingDigits+<span class="st0">&quot;.&quot;</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> expectedDigitError <span class="sy0">=</span> <span class="st0">&quot;Unexpected input. Expected a digit from the list: &quot;</span>+remainingDigits+<span class="st0">&quot;.&quot;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">object</span></a> ParsingErrorFormatter <span class="br0">&#123;</span><br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> apply<span class="br0">&#91;</span>T<span class="br0">&#93;</span><span class="br0">&#40;</span>msg<span class="sy0">:</span> String, next<span class="sy0">:</span> scala.<span class="me1">util</span>.<span class="me1">parsing</span>.<span class="me1">input</span>.<span class="me1">Reader</span><span class="br0">&#91;</span>T<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="sy0">=</span><br />        <span class="st0">&quot;%s<span class="es1">\n</span>%s<span class="es1">\n</span>%s<span class="es1">\n</span>&quot;</span> format <span class="br0">&#40;</span>msg, next.<span class="me1">source</span>.<span class="me1">toString</span>.<span class="me1">trim</span>, <span class="st0">&quot; &quot;</span><span class="sy0">*</span><span class="br0">&#40;</span>next.<span class="me1">offset</span> - <span class="nu0">1</span><span class="br0">&#41;</span>+<span class="st0">&quot;^&quot;</span><span class="br0">&#41;</span><br />    <span class="br0">&#125;</span><br />&#160;<br />    <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">class</span></a> DigitList<span class="br0">&#40;</span>digits<span class="sy0">:</span> List<span class="br0">&#91;</span>Double<span class="br0">&#93;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />      <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">var</span></a> remainingDigits <span class="sy0">=</span> digits<br />      <a href="http://scala-lang.org"><span class="kw1">override</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> toString <span class="sy0">=</span> remainingDigits.<span class="me1">map</span><span class="br0">&#40;</span><span class="sy0">_</span>.<span class="me1">toInt</span><span class="br0">&#41;</span>.<span class="me1">mkString</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><br />&#160;<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> consumeDigit<span class="sy0">:</span> PartialFunction<span class="br0">&#91;</span>String, Double<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> d <a href="http://scala-lang.org"><span class="kw1">if</span></a> remainingDigits contains d.<span class="me1">toDouble</span> <span class="sy0">=&gt;</span><br />          <a href="http://scala-lang.org"><span class="kw1">val</span></a> n <span class="sy0">=</span> d.<span class="me1">toDouble</span><br />          remainingDigits <span class="sy0">=</span> remainingDigits diff List<span class="br0">&#40;</span>n<span class="br0">&#41;</span><br />          n<br />      <span class="br0">&#125;</span><br />&#160;<br />      <a href="http://scala-lang.org"><span class="kw1">def</span></a> allDigitsConsumed<span class="sy0">:</span> PartialFunction<span class="br0">&#91;</span>Double, Double<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><br />        <a href="http://scala-lang.org"><span class="kw1">case</span></a> n <a href="http://scala-lang.org"><span class="kw1">if</span></a> remainingDigits.<span class="me1">isEmpty</span> <span class="sy0">=&gt;</span> n<br />      <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br />  <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre></div>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
C:\Workset&gt;scala TwentyFourGame
The 24 Game

Given any four digits in the range 1 to 9, which may have repetitions,
Using just the +, -, *, and / operators; and the possible use of
brackets, (), show how to make an answer of 24.

An answer of &quot;q&quot; will quit the game.
An answer of &quot;!&quot; will generate a new set of four digits.
Otherwise you are repeatedly asked for an expression until it evaluates to 24

Note: you cannot form multiple digit numbers from the supplied digits,
so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.

Your four digits: 2, 7, 7, 2.
Expression 1: 2*7+2+7
Sorry, that's 23.0.
Expression 2: 7*7/2-2
Sorry, that's 22.5.
Expression 3: 2*7+(7-2)
Sorry, that's 19.0.
Expression 4: 2*(7+7-2)
That's right!
Thank you and goodbye!
</pre>
<h2><span class="mw-headline" id="Scheme"><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=78" title="Edit section: Scheme">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/mw/index.php?title=PLT_Scheme&amp;action=edit&amp;redlink=1" class="new" title="PLT Scheme (page does not exist)">PLT Scheme</a> version 4</div>
<p>This uses read to read in a scheme expression, and eval to evaluate it, so in that sense it's not ideal (eval is evil etc.) but any expression that is valid should be safe and terminate in a timely manner.
</p>
<pre class="scheme highlighted_source">#lang scheme<br /><span class="br0">&#40;</span>require srfi<span class="sy0">/</span><span class="nu0">27</span> srfi<span class="sy0">/</span><span class="nu0">1</span><span class="br0">&#41;</span> <span class="co1">;; random-integer, every</span><br />&#160;<br /><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>play<span class="br0">&#41;</span><br />  <span class="br0">&#40;</span><span class="kw1">let*</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>numbers <span class="br0">&#40;</span>build<span class="sy0">-</span><span class="kw1">list</span> <span class="nu0">4</span> <span class="br0">&#40;</span><span class="kw1">lambda</span> <span class="br0">&#40;</span>n<span class="br0">&#41;</span><br />                                  <span class="br0">&#40;</span>add1 <span class="br0">&#40;</span>random<span class="sy0">-</span>integer <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><br />         <span class="br0">&#91;</span>valid?  <span class="br0">&#40;</span>curryr valid? numbers<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />    <span class="br0">&#40;</span>printf startup<span class="sy0">-</span>message numbers<span class="br0">&#41;</span><br />    <span class="br0">&#40;</span><span class="kw1">let</span> loop <span class="br0">&#40;</span><span class="br0">&#91;</span><span class="kw1">exp</span> <span class="br0">&#40;</span><span class="kw1">read</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />      <span class="br0">&#40;</span>with<span class="sy0">-</span>handlers <span class="br0">&#40;</span><span class="br0">&#91;</span>exn:fail? <span class="br0">&#40;</span><span class="kw1">lambda</span> <span class="br0">&#40;</span>err<span class="br0">&#41;</span><br />                                   <span class="br0">&#40;</span>printf error<span class="sy0">-</span>message <span class="kw1">exp</span> <span class="br0">&#40;</span>exn<span class="sy0">-</span>message err<span class="br0">&#41;</span><span class="br0">&#41;</span><br />                                   <span class="br0">&#40;</span>loop <span class="br0">&#40;</span><span class="kw1">read</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />       <span class="br0">&#40;</span><span class="kw1">cond</span> <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw1">eq?</span> <span class="kw1">exp</span> '<span class="sy0">!</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>play<span class="br0">&#41;</span><span class="br0">&#93;</span><br />&#160;<br />             <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw1">or</span> <span class="br0">&#40;</span><span class="kw1">eq?</span> <span class="kw1">exp</span> 'q<span class="br0">&#41;</span><br />                  <span class="br0">&#40;</span><span class="kw1">eof-object?</span> <span class="kw1">exp</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>printf quit<span class="sy0">-</span>message<span class="br0">&#41;</span><span class="br0">&#93;</span><br />&#160;<br />             <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw1">not</span> <span class="br0">&#40;</span>valid? <span class="kw1">exp</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />              <span class="br0">&#40;</span>printf bad<span class="sy0">-</span>exp<span class="sy0">-</span>message <span class="kw1">exp</span><span class="br0">&#41;</span><br />              <span class="br0">&#40;</span>loop <span class="br0">&#40;</span><span class="kw1">read</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><br />&#160;<br />             <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="kw1">not</span> <span class="br0">&#40;</span><span class="sy0">=</span> <span class="br0">&#40;</span>eval <span class="kw1">exp</span><span class="br0">&#41;</span> <span class="nu0">24</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />              <span class="br0">&#40;</span>printf bad<span class="sy0">-</span>result<span class="sy0">-</span>message <span class="kw1">exp</span> <span class="br0">&#40;</span>eval <span class="kw1">exp</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />              <span class="br0">&#40;</span>loop <span class="br0">&#40;</span><span class="kw1">read</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#93;</span><br />&#160;<br />             <span class="br0">&#91;</span><span class="kw1">else</span> <span class="br0">&#40;</span>printf winning<span class="sy0">-</span>message<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>valid? <span class="kw1">exp</span> numbers<span class="br0">&#41;</span><br />  <span class="co1">;; must contain each number exactly once and only valid symbols</span><br />  <span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>valid<span class="sy0">-</span><span class="kw1">symbol?</span> sym<span class="br0">&#41;</span><br />    <span class="co1">;; only +, -, *, and / are valid</span><br />    <span class="br0">&#40;</span><span class="kw1">case</span> sym<br />      <span class="br0">&#91;</span><span class="br0">&#40;</span><span class="sy0">+</span> <span class="sy0">-</span> <span class="sy0">*</span> <span class="sy0">/</span><span class="br0">&#41;</span> #t<span class="br0">&#93;</span><br />      <span class="br0">&#91;</span><span class="kw1">else</span> #f<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br />  <span class="br0">&#40;</span><span class="kw1">let*</span> <span class="br0">&#40;</span><span class="br0">&#91;</span>ls <span class="br0">&#40;</span>flatten <span class="kw1">exp</span><span class="br0">&#41;</span><span class="br0">&#93;</span><br />         <span class="br0">&#91;</span>numbers<span class="sy0">*</span> <span class="br0">&#40;</span>filter <span class="kw1">number?</span> ls<span class="br0">&#41;</span><span class="br0">&#93;</span><br />         <span class="br0">&#91;</span>symbols  <span class="br0">&#40;</span>remove <span class="kw1">number?</span> ls<span class="br0">&#41;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br />    <span class="br0">&#40;</span><span class="kw1">and</span> <span class="br0">&#40;</span><span class="kw1">equal?</span> <span class="br0">&#40;</span>sort numbers <span class="sy0">&lt;</span><span class="br0">&#41;</span><br />                 <span class="br0">&#40;</span>sort numbers<span class="sy0">*</span> <span class="sy0">&lt;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />         <span class="br0">&#40;</span>every valid<span class="sy0">-</span><span class="kw1">symbol?</span> symbols<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="br0">&#40;</span><span class="kw1">define</span> startup<span class="sy0">-</span>message <span class="st0">&quot;<br />Write a lisp expression that evaluates to 24<br />using only (, ), +, -, *, /<br />and these four numbers: ~a<br />&#160;<br />or '!' to get a new set of numbers<br />or 'q' to quit&quot;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="br0">&#40;</span><span class="kw1">define</span> error<span class="sy0">-</span>message <span class="st0">&quot;<br />Your expression ~a raised an exception:<br />&#160;<br />  <span class="es0">\&quot;</span>~a<span class="es0">\&quot;</span><br />&#160;<br />Please try again&quot;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="br0">&#40;</span><span class="kw1">define</span> bad<span class="sy0">-</span>exp<span class="sy0">-</span>message <span class="st0">&quot;Sorry, ~a is a bad expression.&quot;</span><span class="br0">&#41;</span><br /><span class="br0">&#40;</span><span class="kw1">define</span> bad<span class="sy0">-</span>result<span class="sy0">-</span>message <span class="st0">&quot;Sorry, ~a evaluates to ~a, not 24.&quot;</span><span class="br0">&#41;</span><br /><span class="br0">&#40;</span><span class="kw1">define</span> quit<span class="sy0">-</span>message <span class="st0">&quot;Thanks for playing...&quot;</span><span class="br0">&#41;</span><br /><span class="br0">&#40;</span><span class="kw1">define</span> winning<span class="sy0">-</span>message <span class="st0">&quot;You win!&quot;</span><span class="br0">&#41;</span><br />&#160;<br /><span class="br0">&#40;</span>provide play<span class="br0">&#41;</span><br />&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
&gt; (require &quot;24game.ss&quot;)
&gt; (play)

Write a lisp expression that evaluates to 24
using only (, ), +, -, *, /
and these four numbers: (2 7 2 5)

or '!' to get a new set of numbers
or 'q' to quit
!

Write a lisp expression that evaluates to 24
using only (, ), +, -, *, /
and these four numbers: (9 2 7 6)

or '!' to get a new set of numbers
or 'q' to quit
(9 7 6 2)

Your expression (9 7 6 2) raised an exception:

  &quot;procedure application: expected procedure, given: 9; arguments were: 7 6 2&quot;

Please try again
(+ 9 7 6 2)
You win!
</pre>
<h2><span class="mw-headline" id="Sidef"><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=79" title="Edit section: Sidef">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="ruby highlighted_source">const digits  = <span class="br0">&#40;</span><span class="nu0">1</span>..<span class="nu0">9</span> <span class="sy0">-&gt;</span> pick<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="br0">&#41;</span>;<br />const grammar = Regex.<span class="me1">new</span><span class="br0">&#40;</span><br />    <span class="st0">'^ (?&amp;exp) <span class="es0">\z</span><br />      (?(DEFINE)<br />          (?&lt;exp&gt; ( (?&amp;term) (?&amp;op) (?&amp;term) )+ )<br />          (?&lt;term&gt; <span class="es0">\(</span> (?&amp;exp) <span class="es0">\)</span> | ['</span> <span class="sy0">+</span> digits.<span class="me1">join</span> <span class="sy0">+</span> <span class="st0">'])<br />          (?&lt;op&gt; [-+*/] )<br />      )'</span>, <span class="st0">'x'</span><br /><span class="br0">&#41;</span>;<br /> <br />say <span class="st0">&quot;Here are your digits: #{digits.join(' ')}&quot;</span>;<br /> <br /><span class="kw3">loop</span> <span class="br0">&#123;</span><br />    var input = Sys.<span class="me1">scanln</span><span class="br0">&#40;</span><span class="st0">&quot;Expression: &quot;</span><span class="br0">&#41;</span>;<br /> <br />    var expr = input;<br />    expr <span class="sy0">-</span>= <span class="sy0">/</span>\s<span class="sy0">+/</span>g;    <span class="co1"># remove all whitespace</span><br /> <br />    input == <span class="st0">'q'</span> <span class="sy0">&amp;&amp;</span> <span class="br0">&#40;</span><br />        say <span class="st0">&quot;Goodbye.  Sorry you couldn't win.&quot;</span>;<br />        <span class="kw1">break</span>;<br />    <span class="br0">&#41;</span>;<br /> <br />    var given_digits = digits.<span class="me1">map</span><span class="br0">&#123;</span>.<span class="me1">to_s</span><span class="br0">&#125;</span>.<span class="me1">sort</span>.<span class="me1">join</span>;<br />    var entry_digits = input.<span class="me1">scan</span><span class="br0">&#40;</span><span class="sy0">/</span>\d<span class="sy0">/</span><span class="br0">&#41;</span>.<span class="me1">sort</span>.<span class="me1">join</span>;<br /> <br />    <span class="kw1">if</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>given_digits != entry_digits<span class="br0">&#41;</span> <span class="sy0">||</span> <span class="br0">&#40;</span>expr !~ grammar<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        say <span class="st0">&quot;That's not valid&quot;</span>;<br />        <span class="kw1">next</span>;<br />    <span class="br0">&#125;</span><br /> <br />    given<span class="br0">&#40;</span>var n = <span class="kw3">eval</span><span class="br0">&#40;</span>input<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />        <span class="kw1">when</span> <span class="br0">&#40;</span><span class="nu0">24</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> say <span class="st0">&quot;You win!&quot;</span>; <span class="kw1">break</span> <span class="br0">&#125;</span><br />        default   <span class="br0">&#123;</span> say <span class="st0">&quot;Sorry, your expression is #{n}, not 24&quot;</span> <span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br /><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
Here are your digits: 8 2 3 4
Expression: 8 * (2 - (3 + 4))    
Sorry, your expression is -40, not 24
Expression: 8 * (2 - (3 -            
That's not valid
Expression: 8 * (2 - (3 - 4))
You win!
</pre>
<h2><span class="mw-headline" id="Swift"><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=80" title="Edit section: Swift">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">import Darwin<br />import Foundation<br />&#160;<br />println(&quot;24 Game&quot;)<br />println(&quot;Generating 4 digits...&quot;)<br />&#160;<br />func randomDigits() -&gt; Int[] {<br />    var result = Int[]();<br />    for var i = 0; i &lt; 4; i++ {<br />        result.append(Int(arc4random_uniform(9)+1))<br />    }<br />    return result;<br />}<br />&#160;<br />// Choose 4 digits<br />let digits = randomDigits()<br />&#160;<br />print(&quot;Make 24 using these digits&#160;: &quot;)<br />&#160;<br />for digit in digits {<br />    print(&quot;\(digit) &quot;)<br />}<br />println()<br />&#160;<br />// get input from operator<br />var input = NSString(data:NSFileHandle.fileHandleWithStandardInput().availableData, encoding:NSUTF8StringEncoding)<br />&#160;<br />var enteredDigits = Int[]()<br />&#160;<br />var enteredOperations = Character[]()<br />&#160;<br />let inputString = input as String<br />&#160;<br />// store input in the appropriate table<br />for character in inputString {<br />    switch character {<br />        case &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;:<br />            let digit = String(character)<br />            enteredDigits.append(digit.toInt()!)<br />        case &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;:<br />            enteredOperations.append(character)<br />        case &quot;\n&quot;:<br />            println()<br />        default:<br />            println(&quot;Invalid expression&quot;)<br />    }<br />}<br />&#160;<br />// check value of expression provided by the operator<br />var value = Int()<br />&#160;<br />if enteredDigits.count == 4 &amp;&amp; enteredOperations.count == 3 {<br />    value = enteredDigits[0]<br />    for (i, operation) in enumerate(enteredOperations) {<br />        switch operation {<br />            case &quot;+&quot;:<br />                value = value + enteredDigits[i+1]<br />            case &quot;-&quot;:<br />                value = value - enteredDigits[i+1]<br />            case &quot;*&quot;:<br />                value = value * enteredDigits[i+1]<br />            case &quot;/&quot;:<br />                value = value / enteredDigits[i+1]<br />            default:<br />                println(&quot;This message should never happen!&quot;)<br />        }<br />    }<br />}<br />&#160;<br />if value&#160;!= 24 {<br />    println(&quot;The value of the provided expression is \(value) instead of 24!&quot;)<br />} else {<br />    println(&quot;Congratulations, you found a solution!&quot;)<br />}<br />&#160;</pre>
<h2><span class="mw-headline" id="Tcl"><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=81" title="Edit section: Tcl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Python">Python</a></div>
<p>This version also terminates cleanly on end-of-file.
</p>
<pre class="tcl highlighted_source"><span class="co1"># Four random non-zero digits</span><br /><span class="kw1">proc</span> choose4 <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />    <span class="kw1">set</span> digits <span class="br0">&#123;</span><span class="br0">&#125;</span><br />    <span class="kw1">foreach</span> x <span class="br0">&#123;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><span class="kw2">lappend</span> digits <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#123;</span>int<span class="br0">&#40;</span><span class="nu0">1</span>+rand<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">*</span><span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#125;</span><br />    <span class="kw1">return</span> <span class="br0">&#91;</span><span class="kw2">lsort</span> <span class="re0">$digits</span><span class="br0">&#93;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="co1"># Print out a welcome message</span><br /><span class="kw1">proc</span> welcome digits <span class="br0">&#123;</span><br />    <span class="kw2">puts</span> <span class="br0">&#91;</span><span class="kw2">string</span> trim <span class="st0">&quot;<br />The 24 Game<br />&#160;<br />Given any four digits in the range 1 to 9, which may have repetitions,<br />Using just the +, -, *, and / operators; and the possible use of<br />brackets, (), show how to make an answer of 24.<br />&#160;<br />An answer of <span class="es0">\&quot;</span>q<span class="es0">\&quot;</span> will quit the game.<br />An answer of <span class="es0">\&quot;</span>!<span class="es0">\&quot;</span> will generate a new set of four digits.<br />Otherwise you are repeatedly asked for an expression until it evaluates to 24<br />&#160;<br />Note: you cannot form multiple digit numbers from the supplied digits,<br />so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.<br />    &quot;</span><span class="br0">&#93;</span><br />    <span class="kw2">puts</span> <span class="st0">&quot;<span class="es0">\n</span>Your four digits: $digits&quot;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="co1"># Check whether we've got a legal answer</span><br /><span class="kw1">proc</span> check <span class="br0">&#123;</span>answer digits<span class="br0">&#125;</span> <span class="br0">&#123;</span><br />    <span class="kw1">if</span> <span class="br0">&#123;</span><br />	<span class="br0">&#91;</span><span class="kw2">regexp</span> <span class="st0">&quot;<span class="es0">\[</span>^-+*/() <span class="es0">\t</span>[join $digits {}]<span class="es0">\]</span>&quot;</span> <span class="re0">$answer</span><span class="br0">&#93;</span><br />	|| <span class="br0">&#91;</span><span class="kw2">regexp</span> <span class="br0">&#123;</span>\d\d<span class="br0">&#125;</span> <span class="re0">$answer</span><span class="br0">&#93;</span><br />    <span class="br0">&#125;</span> <span class="kw1">then</span> <span class="br0">&#123;</span><br />	<span class="kw1">return</span> false<br />    <span class="br0">&#125;</span><br />    <span class="kw1">set</span> digs <span class="br0">&#91;</span><span class="kw2">lsort</span> <span class="br0">&#91;</span><span class="kw2">regexp</span> -inline -all <span class="br0">&#123;</span>\d<span class="br0">&#125;</span> <span class="re0">$answer</span><span class="br0">&#93;</span><span class="br0">&#93;</span><br />    <span class="kw1">if</span> <span class="br0">&#123;</span><span class="re0">$digs</span> ne <span class="re0">$digits</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />	<span class="kw1">return</span> false<br />    <span class="br0">&#125;</span><br />    <span class="kw1">expr</span> <span class="br0">&#123;</span><span class="sy0">!</span><span class="br0">&#91;</span><span class="kw1">catch</span> <span class="br0">&#123;</span><span class="kw1">expr</span> <span class="re0">$answer</span><span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#125;</span><br /><span class="br0">&#125;</span><br />&#160;<br /><span class="co1"># The main game loop</span><br /><span class="kw1">proc</span> main <span class="br0">&#123;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />    <span class="kw2">fconfigure</span> stdout -buffering none<br />&#160;<br />    <span class="kw1">set</span> digits <span class="br0">&#91;</span>choose4<span class="br0">&#93;</span><br />    welcome <span class="re0">$digits</span><br />    <span class="kw1">set</span> trial <span class="nu0">0</span><br />    <span class="kw1">while</span> true <span class="br0">&#123;</span><br />	<span class="kw2">puts</span> -nonewline <span class="st0">&quot;Expression [incr trial]: &quot;</span><br />	<span class="kw2">gets</span> stdin answer<br />&#160;<br />        <span class="co1"># Check for various types of non-answer</span><br />	<span class="kw1">if</span> <span class="br0">&#123;</span><span class="br0">&#91;</span><span class="kw2">eof</span> stdin<span class="br0">&#93;</span> || <span class="re0">$answer</span> eq <span class="st0">&quot;q&quot;</span> || <span class="re0">$answer</span> eq <span class="st0">&quot;Q&quot;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />	    <span class="kw1">break</span><br />	<span class="br0">&#125;</span> <span class="kw1">elseif</span> <span class="br0">&#123;</span><span class="re0">$answer</span> eq <span class="st0">&quot;!&quot;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />	    <span class="kw1">set</span> digits <span class="br0">&#91;</span>choose4<span class="br0">&#93;</span><br />	    <span class="kw2">puts</span> <span class="st0">&quot;New digits: $digits&quot;</span><br />	    <span class="kw1">continue</span><br />	<span class="br0">&#125;</span> <span class="kw1">elseif</span> <span class="br0">&#123;</span><span class="sy0">!</span><span class="br0">&#91;</span>check <span class="re0">$answer</span> <span class="re0">$digits</span><span class="br0">&#93;</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />	    <span class="kw2">puts</span> <span class="st0">&quot;The input '$answer' was wonky!&quot;</span><br />            <span class="kw1">continue</span><br />	<span class="br0">&#125;</span><br />&#160;<br />        <span class="co1"># Check to see if it is the right answer</span><br />	<span class="kw1">set</span> ans <span class="br0">&#91;</span><span class="kw1">expr</span> <span class="br0">&#91;</span><span class="kw2">regsub</span> <span class="br0">&#123;</span>\d<span class="br0">&#125;</span> <span class="re0">$answer</span> <span class="br0">&#123;</span><span class="sy0">&amp;</span>.0<span class="br0">&#125;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><br />	<span class="kw2">puts</span> <span class="st0">&quot; = [string trimright $ans .0]&quot;</span><br />	<span class="kw1">if</span> <span class="br0">&#123;</span><span class="re0">$ans</span> == <span class="nu0">24.0</span><span class="br0">&#125;</span> <span class="br0">&#123;</span><br />	    <span class="kw2">puts</span> <span class="st0">&quot;That's right!&quot;</span><br />            <span class="kw1">break</span><br />	<span class="br0">&#125;</span><br />    <span class="br0">&#125;</span><br />    <span class="kw2">puts</span> <span class="st0">&quot;Thank you and goodbye&quot;</span><br /><span class="br0">&#125;</span><br />main</pre>
<h2><span class="mw-headline" id="TorqueScript"><a href="/wiki/Category:TorqueScript" title="Category:TorqueScript">TorqueScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=82" title="Edit section: TorqueScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Includes an equation parser to avoid using eval.
To use, type startTwentyFourGame(); in the console.
</p>
<pre class="text highlighted_source">function startTwentyFourGame()<br />{<br />	if($numbers&#160;!$= &quot;&quot;)<br />	{<br />		echo(&quot;Ending current 24 game...&quot;);<br />		endTwentyFourGame();<br />	}<br />&#160;<br />	echo(&quot;Welcome to the 24 game!&quot;);<br />	echo(&quot;Generating 4 numbers...&quot;);<br />	for(%a = 0;&#160;%a &lt; 4;&#160;%a++)<br />		$numbers = setWord($numbers,&#160;%a, getRandom(0, 9));<br />&#160;<br />	echo(&quot;Numbers generated! Here are your numbers:&quot;);<br />	echo($numbers);<br />	echo(&quot;Use try24Equation( equation ); to try and guess the equation.&quot;);<br />&#160;<br />	$TwentyFourGame = 1;<br />}<br />&#160;<br />function endTwentyFourGame()<br />{<br />	if(!$TwentyFourGame)<br />	{<br />		echo(&quot;No 24 game is active!&quot;);<br />		return false;<br />	}<br />&#160;<br />	echo(&quot;Ending the 24 game.&quot;);<br />	$numbers = &quot;&quot;;<br />	$TwentyFourGame = 0;<br />}<br />&#160;<br />function try24Equation(%equ)<br />{<br />	if(!$TwentyFourGame)<br />	{<br />		echo(&quot;No 24 game is active!&quot;);<br />		return false;<br />	}<br />	%numbers = &quot;0123456789&quot;;<br />	%operators = &quot;+-*x/()&quot;;<br />	%tempchars = $numbers;<br />	%other = strReplace(%tempchars, &quot; &quot;, &quot;&quot;);<br />&#160;<br />	//Check it and make sure it has all the stuff<br />	%equ = strReplace(%equ, &quot; &quot;, &quot;&quot;);<br />	%length = strLen(%equ);<br />&#160;<br />	for(%a = 0;&#160;%a &lt;&#160;%Length;&#160;%a++)<br />	{<br />		%Char = getSubStr(%equ,&#160;%a, 1);<br />		if(%a+1&#160;!=&#160;%Length)<br />			%Next = getSubStr(%equ,&#160;%a+1, 1);<br />		else<br />			%Next = &quot; &quot;;<br />&#160;<br />		if(strPos(%numbers @&#160;%operators,&#160;%char) &lt; 0)<br />		{<br />			echo(&quot;The equation you entered is invalid! Try again.&quot;);<br />			return false;<br />		}<br />		if(strPos(%tempchars,&#160;%char) &lt; 0 &amp;&amp; strPos(%operators,&#160;%char) &lt; 0)<br />		{<br />			echo(&quot;The equation you entered uses a number you were not given! Try again.&quot;);<br />			return false;<br />		}<br />		else if(strPos(%numbers,&#160;%next) &gt;= 0 &amp;&amp; strPos(%numbers,&#160;%char) &gt;= 0)<br />		{<br />			echo(&quot;No numbers above 9 please! Try again.&quot;);<br />			echo(%next SPC&#160;%char SPC&#160;%a);<br />			return false;<br />		}<br />		else if(strPos(%operators,&#160;%char) &gt; 0)<br />			continue;<br />&#160;<br />		%pos = 2*strPos(%other,&#160;%char);<br />		if(%pos &lt; 0)<br />			return &quot;ERROROMG&quot;;<br />&#160;<br />		//Remove it from the allowed numbers<br />		%tempchars = removeWord(%tempchars,&#160;%pos/2);<br />		%other = getSubStr(%other, 0,&#160;%pos) @ getSubStr(%other,&#160;%pos+1, strLen(%other));<br />    }<br />&#160;<br />   &#160;%result = doEquation(%equ);<br />&#160;<br />    if(%result&#160;!= 24)<br />    {<br />        echo(&quot;Your equation resulted to&quot; SPC&#160;%result @ &quot;, not 24! Try again.&quot;);<br />        return false;<br />    }<br />&#160;<br />    for(%a = 0;&#160;%a &lt; 4;&#160;%a++)<br />        $numbers = setWord($numbers,&#160;%a, getRandom(0, 9));<br />&#160;<br />    echo(&quot;Great job!&quot; SPC&#160;%equ SPC &quot;Does result to 24! Here's another set for you:&quot;);<br />    echo($numbers);<br />}<br />&#160;<br />//Evaluates an equation without using eval.<br />function doEquation(%equ)<br />{   //Validate the input<br />   &#160;%equ = strReplace(%equ, &quot; &quot;, &quot;&quot;);%equ = strReplace(%equ, &quot;*&quot;, &quot;x&quot;);<br />   &#160;%equ = strReplace(%equ, &quot;+&quot;, &quot; + &quot;);%equ = strReplace(%equ, &quot;x&quot;, &quot; x &quot;);<br />   &#160;%equ = strReplace(%equ, &quot;/&quot;, &quot; / &quot;);%equ = strReplace(%equ, &quot;-&quot;, &quot; - &quot;);<br />&#160;<br />    //Parenthesis'<br />    while(strPos(%equ, &quot;(&quot;) &gt; -1 &amp;&amp; strPos(%equ, &quot;)&quot;) &gt; 0)<br />    {<br />       &#160;%start = strPos(%equ, &quot;(&quot;);<br />       &#160;%end =&#160;%start;<br />       &#160;%level = 1;<br />        while(%level&#160;!= 0 &amp;&amp;&#160;%end&#160;!= strLen(%equ))<br />        {<br />           &#160;%end++;<br />            if(getsubStr(%equ,&#160;%end, 1) $= &quot;(&quot;)&#160;%level++;<br />            if(getsubStr(%equ,&#160;%end, 1) $= &quot;)&quot;)&#160;%level--;<br />        }<br />        if(%level&#160;!= 0)<br />            return &quot;ERROR&quot;;<br />       &#160;%inbrackets = getsubStr(%equ,&#160;%start+1,&#160;%end - strLen(getsubStr(%equ, 0,&#160;%start + 1)));<br />       &#160;%leftofbrackets = getsubStr(%equ, 0,&#160;%start);<br />       &#160;%rightofbrackets = getsubStr(%equ,&#160;%end + 1, strLen(%equ) -&#160;%end);<br />       &#160;%equ =&#160;%leftofbrackets @ doEquation(%inbrackets) @&#160;%rightofbrackets;<br />    }<br />&#160;<br />    if(strPos(%equ, &quot;ERROR&quot;) &gt;= 0)<br />        return &quot;ERROR&quot;;<br />&#160;<br />    //Multiplication/Division loop<br />    for(%a = 0;&#160;%a &lt; getWordCount(%equ);&#160;%a++)<br />    {<br />        if(getWord(%equ,&#160;%a) $= &quot;x&quot; || getWord(%equ,&#160;%a) $= &quot;/&quot; &amp;&amp;&#160;%a&#160;!= 0)<br />        {<br />           &#160;%f = getWord(%equ,&#160;%a - 1);<br />           &#160;%l = getWord(%equ,&#160;%a + 1);<br />           &#160;%o = getWord(%equ,&#160;%a);<br />            switch$(%o)<br />            {<br />                case &quot;x&quot;:&#160;%a--;<br />                   &#160;%equ = removeWord(removeWord(setWord(%equ,&#160;%a+1,&#160;%f *&#160;%l),&#160;%a+2),&#160;%a);<br />                case &quot;/&quot;:&#160;%a--;<br />                   &#160;%equ = removeWord(removeWord(setWord(%equ,&#160;%a+1,&#160;%f /&#160;%l),&#160;%a+2),&#160;%a);<br />            }<br />        }<br />    }<br />&#160;<br />    //Addition/Subraction loop<br />    for(%a = 0;&#160;%a &lt; getWordCount(%equ);&#160;%a++)<br />    {<br />        if(getWord(%equ,&#160;%a) $= &quot;+&quot; || getWord(%equ,&#160;%a) $= &quot;-&quot; &amp;&amp;&#160;%a&#160;!= 0)<br />        {<br />           &#160;%f = getWord(%equ,&#160;%a - 1);<br />           &#160;%l = getWord(%equ,&#160;%a + 1);<br />           &#160;%o = getWord(%equ,&#160;%a);<br />            switch$(%o)<br />            {<br />                case &quot;+&quot;:&#160;%a--;<br />                   &#160;%equ = removeWord(removeWord(setWord(%equ,&#160;%a+1,&#160;%f +&#160;%l),&#160;%a+2),&#160;%a);<br />                case &quot;-&quot;:&#160;%a--;<br />                   &#160;%equ = removeWord(removeWord(setWord(%equ,&#160;%a+1,&#160;%f -&#160;%l),&#160;%a+2),&#160;%a);<br />            }<br />        }<br />    }<br />    return&#160;%equ;<br />}</pre>
<h2><span class="mw-headline" id="TUSCRIPT"><a href="/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=83" title="Edit section: TUSCRIPT">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br />$$ MODE TUSCRIPT<br />BUILD X_TABLE blanks = &quot;:':&#160;:&quot;<br />&#160;<br />SECTION game<br />operators=&quot;*'/'+'-'(')&quot;,numbers=&quot;&quot;<br />&#160;<br />LOOP n=1,4<br />number=RANDOM_NUMBERS (1,9,1)<br />numbers=APPEND(numbers,number)<br />ENDLOOP<br />&#160;<br />SET allowed=APPEND (numbers,operators)<br />SET allowed=MIXED_SORT (allowed)<br />SET allowed=REDUCE (allowed)<br />BUILD S_TABLE ALLOWED =*<br />DATA '{allowed}'<br />&#160;<br />SET checksum=DIGIT_SORT (numbers)<br />&#160;<br />printnumbers=EXCHANGE (numbers,blanks)<br />printoperat=EXCHANGE (operators,blanks)<br />&#160;<br />PRINT &quot;Your numbers &quot;, printnumbers<br />PRINT &quot;Use only these operators &quot;, printoperat<br />PRINT &quot;Enter an expression that equates to 24&quot;<br />PRINT &quot;Enter 'l' for new numbers&quot;<br />PRINT &quot;Your 4 digits: &quot;,printnumbers<br />&#160;<br />DO play<br />ENDSECTION<br />&#160;<br />SECTION check_expr<br /> SET pos = VERIFY (expr,allowed)<br /> IF (pos!=0) THEN<br />  PRINT &quot;wrong entry on position &quot;,pos<br />  DO play<br />  STOP<br /> ELSE<br />  SET yourdigits   = STRINGS (expr,&quot;:&gt;/:&quot;)<br />  SET yourchecksum = DIGIT_SORT (yourdigits)<br />   IF (checksum!=yourchecksum) THEN<br />    PRINT/ERROR &quot;wrong digits&quot;<br />    DO play<br />    STOP<br />   ELSE<br />    CONTINUE<br />   ENDIF<br /> ENDIF<br />ENDSECTION<br />&#160;<br />SECTION play<br />LOOP n=1,3<br />ASK   &quot;Expression {n}&quot;: expr=&quot;&quot;<br />IF (expr==&quot;l&quot;) THEN<br />RELEASE S_TABLE allowed<br />PRINT &quot;Your new numbers&quot;<br />DO game<br />ELSEIF (expr!=&quot;&quot;) THEN<br />DO check_expr<br />sum={expr}<br /> IF (sum!=24) THEN<br />  PRINT/ERROR expr,&quot; not equates 24 but &quot;,sum<br />  CYCLE<br /> ELSE<br />  PRINT &quot;BINGO &quot;, expr,&quot; equates &quot;, sum<br />  STOP<br /> ENDIF<br />ELSE<br /> CYCLE<br />ENDIF<br />ENDLOOP<br />ENDSECTION<br />DO game<br />&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre style="height:30ex;overflow:scroll">
Your numbers 2 8 9 9
Use only these operators * / + - ( )
Enter an expression that equates to 24
Enter 'l' for new numbers
Your 4 digits: 2 8 9 9
Expression 1 &gt;l
Your new numbers
Your numbers 2 4 2 3
Use only these operators * / + - ( )
Enter an expression that equates to 24
Enter 'l' for new numbers
Your 4 digits: 2 4 2 3
Expression 1 &gt;2+4+2+3
@@@@@@@@  2+4+2+3 not equates 24 but 11                                @@@@@@@@
Expression 2 &gt;2+2+2+3
@@@@@@@@  wrong digits                                                 @@@@@@@@
Expression 1 &gt;2+2+a+3
wrong entry on position 5
Expression 1 &gt;(2+4+2)*3
BINGO (2+4+2)*3 equates 24
</pre>
<h2><span class="mw-headline" id="UNIX_Shell"><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=84" title="Edit section: UNIX Shell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Tried to be POSIX. Not sure about corner-cases.
</p>
<pre class="bash highlighted_source">gen_digits<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="kw2">awk</span> <span class="st_h">'BEGIN { srand()<br />                 for(i = 1; i &lt;= 4; i++) print 1 + int(9 * rand())<br />         }'</span> <span class="sy0">|</span> <span class="kw2">sort</span><br /><span class="br0">&#125;</span><br />&#160;<br />same_digits<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="br0">&#91;</span> <span class="st0">&quot;<span class="es4">$(tr -dc 0-9 | sed 's/./&amp;\n/g' | grep . | sort)</span>&quot;</span> = <span class="st0">&quot;$*&quot;</span> <span class="br0">&#93;</span><br /><span class="br0">&#125;</span><br />&#160;<br />guessed<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br />    <span class="br0">&#91;</span> <span class="st0">&quot;<span class="es4">$(echo &quot;$1&quot; | tr -dc '\n0-9()</span>*/+-' | bc 2&gt;/dev/null)&quot;</span> = <span class="nu0">24</span> <span class="br0">&#93;</span><br /><span class="br0">&#125;</span><br />&#160;<br />&#160;<br /><span class="kw1">while</span>&#160;:<br /><span class="kw1">do</span><br />    <span class="re2">digits</span>=$<span class="br0">&#40;</span>gen_digits<span class="br0">&#41;</span><br />    <span class="kw3">echo</span><br />    <span class="kw3">echo</span> Digits: <span class="re1">$digits</span><br />    <span class="kw2">read</span> <span class="re5">-r</span> <span class="kw2">expr</span><br />&#160;<br />    <span class="kw3">echo</span> <span class="st0">&quot; <span class="es2">$expr</span>&quot;</span> <span class="sy0">|</span> same_digits <span class="st0">&quot;<span class="es2">$digits</span>&quot;</span> <span class="sy0">||</span> \<br />        <span class="br0">&#123;</span> <span class="kw3">echo</span> digits should be: <span class="re1">$digits</span>; <span class="kw3">continue</span>; <span class="br0">&#125;</span><br />&#160;<br />    guessed <span class="st0">&quot;<span class="es2">$expr</span>&quot;</span> <span class="sy0">&amp;&amp;</span> <span class="re2">message</span>=correct \<br />                    <span class="sy0">||</span> <span class="re2">message</span>=wrong<br />&#160;<br />    <span class="kw3">echo</span> <span class="re1">$message</span><br /><span class="kw1">done</span></pre>
<h2><span class="mw-headline" id="VBA"><a href="/wiki/Category:VBA" title="Category:VBA">VBA</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=85" title="Edit section: VBA">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="vb highlighted_source">&#160;<br /><span class="kw2">Sub</span> Rosetta_24game()<br />&#160;<br /><span class="kw4">Dim</span> Digit(4) <span class="kw4">As</span> <span class="kw1">Integer</span>, i <span class="kw4">As</span> <span class="kw1">Integer</span>, iDigitCount <span class="kw4">As</span> <span class="kw1">Integer</span><br /><span class="kw4">Dim</span> stUserExpression <span class="kw4">As</span> <span class="kw1">String</span><br /><span class="kw4">Dim</span> stFailMessage <span class="kw4">As</span> <span class="kw1">String</span>, stFailDigits <span class="kw4">As</span> <span class="kw1">String</span><br /><span class="kw4">Dim</span> bValidExpression <span class="kw4">As</span> <span class="kw1">Boolean</span>, bValidDigits <span class="kw4">As</span> <span class="kw1">Boolean</span>, bValidChars <span class="kw4">As</span> <span class="kw1">Boolean</span><br /><span class="kw4">Dim</span> vResult <span class="kw4">As</span> <span class="kw1">Variant</span>, vTryAgain <span class="kw4">As</span> <span class="kw1">Variant</span>, vSameDigits <span class="kw4">As</span> <span class="kw1">Variant</span><br />&#160;<br /><span class="co1">' Generate 4 random digits<br /></span>GenerateNewDigits:<br />    <span class="kw3">For</span> i = 1 <span class="kw3">To</span> 4<br />        Digit(i) = [randbetween(1,9)]<br />    <span class="kw3">Next</span> i<br />&#160;<br /><span class="co1">' Get user expression<br /></span>GetUserExpression:<br />    bValidExpression = <span class="kw5">True</span><br />    stFailMessage = <span class="st0">&quot;&quot;</span><br />    stFailDigits = <span class="st0">&quot;&quot;</span><br />    stUserExpression = InputBox(<span class="st0">&quot;Enter a mathematical expression which results in 24, using the following digits: &quot;</span> &amp; _<br />        Digit(1) &amp; <span class="st0">&quot;, &quot;</span> &amp; Digit(2) &amp; <span class="st0">&quot;, &quot;</span> &amp; Digit(3) &amp; <span class="st0">&quot; and &quot;</span> &amp; Digit(4), <span class="st0">&quot;Rosetta Code | 24 Game&quot;</span>)<br />&#160;<br /><span class="co1">' Check each digit is included in user expression<br /></span>    bValidDigits = <span class="kw5">True</span><br />    stFailDigits = <span class="st0">&quot;&quot;</span><br />    <span class="kw3">For</span> i = 1 <span class="kw3">To</span> 4<br />        <span class="kw3">If</span> InStr(stUserExpression, Digit(i)) = 0 <span class="kw3">Then</span><br />            bValidDigits = <span class="kw5">False</span><br />            stFailDigits = stFailDigits &amp; <span class="st0">&quot; &quot;</span> &amp; Digit(i)<br />        <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">Next</span> i<br />    <span class="kw3">If</span> bValidDigits = <span class="kw5">False</span> <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = <span class="st0">&quot;Your expression excluded the following required digits: &quot;</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />&#160;<br /><span class="co1">' Check each character of user expression is a valid character type<br /></span>    bValidDigits = <span class="kw5">True</span><br />    stFailDigits = <span class="st0">&quot;&quot;</span><br />    <span class="kw3">For</span> i = 1 <span class="kw3">To</span> Len(stUserExpression)<br />        <span class="kw3">If</span> InStr(<span class="st0">&quot;0123456789+-*/()&quot;</span>, Mid(stUserExpression, i, 1)) = 0 <span class="kw3">Then</span><br />            bValidDigits = <span class="kw5">False</span><br />            stFailDigits = stFailDigits &amp; <span class="st0">&quot; &quot;</span> &amp; Mid(stUserExpression, i, 1)<br />        <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">Next</span> i<br />    <span class="kw3">If</span> bValidDigits = <span class="kw5">False</span> <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression contained invalid characters:&quot;</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />&#160;<br /><span class="co1">' Check no disallowed integers entered<br /></span>    bValidDigits = <span class="kw5">True</span><br />    stFailDigits = <span class="st0">&quot;&quot;</span><br />    iDigitCount = 0<br />    <span class="kw3">For</span> i = 1 <span class="kw3">To</span> Len(stUserExpression)<br />        <span class="kw3">If</span> <span class="kw3">Not</span> InStr(<span class="st0">&quot;0123456789&quot;</span>, Mid(stUserExpression, i, 1)) = 0 <span class="kw3">Then</span><br />            iDigitCount = iDigitCount + 1<br />            <span class="kw3">If</span> IsError(Application.Match(--(Mid(stUserExpression, i, 1)), Digit, <span class="kw5">False</span>)) <span class="kw3">Then</span><br />                bValidDigits = <span class="kw5">False</span><br />                stFailDigits = stFailDigits &amp; <span class="st0">&quot; &quot;</span> &amp; Mid(stUserExpression, i, 1)<br />            <span class="kw3">End</span> <span class="kw3">If</span><br />        <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">Next</span> i<br />    <span class="kw3">If</span> iDigitCount &gt; 4 <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression contained more than 4 digits&quot;</span> &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />        <span class="kw3">If</span> iDigitCount &lt; 4 <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression contained less than 4 digits&quot;</span> &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">If</span> bValidDigits = <span class="kw5">False</span> <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression contained invalid digits:&quot;</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />&#160;<br /><span class="co1">' Check no double digit numbers entered<br /></span>    bValidDigits = <span class="kw5">True</span><br />    stFailDigits = <span class="st0">&quot;&quot;</span><br />    <span class="kw3">For</span> i = 11 <span class="kw3">To</span> 99<br />        <span class="kw3">If</span> <span class="kw3">Not</span> InStr(stUserExpression, i) = 0 <span class="kw3">Then</span><br />            bValidDigits = <span class="kw5">False</span><br />            stFailDigits = stFailDigits &amp; <span class="st0">&quot; &quot;</span> &amp; i<br />        <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">Next</span> i<br />    <span class="kw3">If</span> bValidDigits = <span class="kw5">False</span> <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression contained invalid numbers:&quot;</span> &amp; stFailDigits &amp; vbCr &amp; vbCr<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />&#160;<br /><span class="co1">' Check result of user expression<br /></span>    <span class="kw4">On</span> <span class="kw4">Error</span> <span class="kw3">GoTo</span> EvalFail<br />    vResult = Evaluate(stUserExpression)<br />    <span class="kw3">If</span> <span class="kw3">Not</span> vResult = 24 <span class="kw3">Then</span><br />        bValidExpression = <span class="kw5">False</span><br />        stFailMessage = stFailMessage &amp; <span class="st0">&quot;Your expression did not result in 24. It returned: &quot;</span> &amp; vResult<br />    <span class="kw3">End</span> <span class="kw3">If</span><br />&#160;<br /><span class="co1">' Return results<br /></span>    <span class="kw3">If</span> bValidExpression = <span class="kw5">False</span> <span class="kw3">Then</span><br />        vTryAgain = MsgBox(stFailMessage &amp; vbCr &amp; vbCr &amp; <span class="st0">&quot;Would you like to try again?&quot;</span>, vbCritical + vbRetryCancel, <span class="st0">&quot;Rosetta Code | 24 Game | FAILED&quot;</span>)<br />            <span class="kw3">If</span> vTryAgain = vbRetry <span class="kw3">Then</span><br />                vSameDigits = MsgBox(<span class="st0">&quot;Do you want to use the same numbers?&quot;</span>, vbQuestion + vbYesNo, <span class="st0">&quot;Rosetta Code | 24 Game | RETRY&quot;</span>)<br />                <span class="kw3">If</span> vSameDigits = vbYes <span class="kw3">Then</span><br />                    <span class="kw3">GoTo</span> GetUserExpression<br />                <span class="kw3">Else</span><br />                    <span class="kw3">GoTo</span> GenerateNewDigits<br />                <span class="kw3">End</span> <span class="kw3">If</span><br />            <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">Else</span><br />        vTryAgain = MsgBox(<span class="st0">&quot;You entered: &quot;</span> &amp; stUserExpression &amp; vbCr &amp; vbCr &amp; <span class="st0">&quot;which resulted in: &quot;</span> &amp; vResult, _<br />            vbInformation + vbRetryCancel, <span class="st0">&quot;Rosetta Code | 24 Game | SUCCESS&quot;</span>)<br />        <span class="kw3">If</span> vTryAgain = vbRetry <span class="kw3">Then</span><br />            <span class="kw3">GoTo</span> GenerateNewDigits<br />        <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw3">End</span> <span class="kw3">If</span><br />    <span class="kw2">Exit</span> <span class="kw2">Sub</span><br />EvalFail:<br />    bValidExpression = <span class="kw5">False</span><br />    vResult = Err.Description<br />    <span class="kw4">Resume</span><br /><span class="kw3">End</span> <span class="kw2">Sub</span><br />&#160;<br />&#160;</pre>
<h2><span class="mw-headline" id="zkl"><a href="/wiki/Category:Zkl" title="Category:Zkl">zkl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=86" title="Edit section: zkl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">while(1){<br />   digits&#160;:= [1..4].pump(String,(0).random.fpM(&quot;11-&quot;,1,9));<br />   exp&#160;:= ask(&quot;Enter an expression using the digits &quot;,digits,<br />	      &quot; that evals to 24: &quot;) - &quot; \n&quot;;<br />   expf:=exp.apply(fcn(c){if (&quot;1&quot;&lt;=c&lt;=&quot;9&quot;) &quot;(%s).toFloat()&quot;.fmt(c) else c});<br />   reg r;<br />   try { Compiler.Compiler.compileText(expf).__constructor(); r=vm.regX }<br />   catch { println(&quot;bad expression&quot;); continue; }<br />   else{ <br />      extra&#160;:= (exp - &quot;+-/*()&quot; - digits);<br />      if (extra) { println(&quot;Extra goodies in expression: &quot;,extra); continue; }<br />      (digits.split(&quot;&quot;).sort()&#160;!= (exp - &quot;+-/*()&quot;).split(&quot;&quot;).sort())&#160;:<br />         if(_) { println(&quot;You can only use the digits &quot;,digits,&quot; once each&quot;); continue; };<br />      if (exp.matches(&quot;*[1-9][1-9]*&quot;))<br />	 { println(&quot;no repeated digits&quot;); continue; }<br />      if (r.closeTo(24,0.001)) &quot;nice!&quot;.println();<br />      else println(&quot;That evaled to &quot;,r,&quot;, not 24&quot;);<br />   }<br />}</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
Enter an expression using the digits 8833 that evals to 24: (8/(3-(8/3)))
nice!
Enter an expression using the digits 8833 that evals to 24: (8/(3-(8/9)))
Extra goodies in expression: 9
Enter an expression using the digits 8833 that evals to 24: (8/(3-(8/8)))
You can only use the digits 8833 once each
Enter an expression using the digits 7155 that evals to 24: 7+1+5+5
That evaled to 18, not 24
Enter an expression using the digits 8332 that evals to 24: 8*3*(3-2)
nice!
</pre>
<h2><span class="mw-headline" id="ZX_Spectrum_Basic"><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=24_game&amp;action=edit&amp;section=87" title="Edit section: ZX Spectrum Basic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="zxbasic highlighted_source"><span class="nu0">10</span> <span class="kw1">LET</span> n$=<span class="st0">&quot;&quot;</span><br /><span class="nu0">20</span> <span class="kw1">RANDOMIZE</span> <br /><span class="nu0">30</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">4</span><br /><span class="nu0">40</span> <span class="kw1">LET</span> n$=n$+<span class="kw3">STR</span>$ <span class="br0">&#40;</span><span class="kw3">INT</span> <span class="br0">&#40;</span><span class="kw3">RND</span>*<span class="nu0">9</span><span class="br0">&#41;</span>+<span class="nu0">1</span><span class="br0">&#41;</span><br /><span class="nu0">50</span> <span class="kw1">NEXT</span> i<br /><span class="nu0">60</span> <span class="kw1">LET</span> i$=<span class="st0">&quot;&quot;</span>: <span class="kw1">LET</span> f$=<span class="st0">&quot;&quot;</span>: <span class="kw1">LET</span> p$=<span class="st0">&quot;&quot;</span><br /><span class="nu0">70</span> <span class="kw1">CLS</span> <br /><span class="nu0">80</span> <span class="kw1">PRINT</span> <span class="st0">&quot;24 game&quot;</span><br /><span class="nu0">90</span> <span class="kw1">PRINT</span> <span class="st0">&quot;Allowed characters:&quot;</span><br /><span class="nu0">100</span> <span class="kw1">LET</span> i$=n$+<span class="st0">&quot;+-*/()&quot;</span><br /><span class="nu0">110</span> <span class="kw1">PRINT</span> <span class="kw4">AT</span> <span class="nu0">4</span>,<span class="nu0">0</span>;<br /><span class="nu0">120</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">10</span><br /><span class="nu0">130</span> <span class="kw1">PRINT</span> i$<span class="br0">&#40;</span>i<span class="br0">&#41;</span>;<span class="st0">&quot; &quot;</span>;<br /><span class="nu0">140</span> <span class="kw1">NEXT</span> i<br /><span class="nu0">150</span> <span class="kw1">PRINT</span> <span class="st0">&quot;(0 to end)&quot;</span><br /><span class="nu0">160</span> INPUT <span class="st0">&quot;Enter the formula&quot;</span>;f$<br /><span class="nu0">170</span> <span class="kw1">IF</span> f$=<span class="st0">&quot;0&quot;</span> <span class="kw1">THEN</span> STOP <br /><span class="nu0">180</span> <span class="kw1">PRINT</span> <span class="kw4">AT</span> <span class="nu0">6</span>,<span class="nu0">0</span>;f$;<span class="st0">&quot; = &quot;</span>;<br /><span class="nu0">190</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw3">LEN</span> f$<br /><span class="nu0">200</span> <span class="kw1">LET</span> c$=f$<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br /><span class="nu0">210</span> <span class="kw1">IF</span> c$=<span class="st0">&quot; &quot;</span> <span class="kw1">THEN</span> <span class="kw1">LET</span> f$<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=<span class="st0">&quot;&quot;</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">250</span><br /><span class="nu0">220</span> <span class="kw1">IF</span> c$=<span class="st0">&quot;+&quot;</span> <span class="kw4">OR</span> c$=<span class="st0">&quot;-&quot;</span> <span class="kw4">OR</span> c$=<span class="st0">&quot;*&quot;</span> <span class="kw4">OR</span> c$=<span class="st0">&quot;/&quot;</span> <span class="kw1">THEN</span> <span class="kw1">LET</span> p$=p$+<span class="st0">&quot;o&quot;</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">250</span><br /><span class="nu0">230</span> <span class="kw1">IF</span> c$=<span class="st0">&quot;(&quot;</span> <span class="kw4">OR</span> c$=<span class="st0">&quot;)&quot;</span> <span class="kw1">THEN</span> <span class="kw1">LET</span> p$=p$+c$: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">250</span><br /><span class="nu0">240</span> <span class="kw1">LET</span> p$=p$+<span class="st0">&quot;n&quot;</span><br /><span class="nu0">250</span> <span class="kw1">NEXT</span> i<br /><span class="nu0">260</span> RESTORE <br /><span class="nu0">270</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">11</span><br /><span class="nu0">280</span> READ t$<br /><span class="nu0">290</span> <span class="kw1">IF</span> t$=p$ <span class="kw1">THEN</span> <span class="kw1">LET</span> i=<span class="nu0">11</span><br /><span class="nu0">300</span> <span class="kw1">NEXT</span> i<br /><span class="nu0">310</span> <span class="kw1">IF</span> t$&lt;&gt;p$ <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="kw1">INVERSE</span> <span class="nu0">1</span>;<span class="st0">&quot;Bad construction!&quot;</span>: <span class="kw1">BEEP</span> <span class="nu0">1</span>,.1: <span class="kw1">PAUSE</span> <span class="nu0">0</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">60</span><br /><span class="nu0">320</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw3">LEN</span> f$<br /><span class="nu0">330</span> <span class="kw1">FOR</span> j=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="nu0">10</span><br /><span class="nu0">340</span> <span class="kw1">IF</span> <span class="br0">&#40;</span>f$<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=i$<span class="br0">&#40;</span>j<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw4">AND</span> f$<span class="br0">&#40;</span>i<span class="br0">&#41;</span>&gt;<span class="st0">&quot;0&quot;</span> <span class="kw4">AND</span> f$<span class="br0">&#40;</span>i<span class="br0">&#41;</span>&lt;=<span class="st0">&quot;9&quot;</span> <span class="kw1">THEN</span> <span class="kw1">LET</span> i$<span class="br0">&#40;</span>j<span class="br0">&#41;</span>=<span class="st0">&quot; &quot;</span><br /><span class="nu0">350</span> <span class="kw1">NEXT</span> j<br /><span class="nu0">360</span> <span class="kw1">NEXT</span> i<br /><span class="nu0">370</span> <span class="kw1">IF</span> i$<span class="br0">&#40;</span> <span class="kw1">TO</span> <span class="nu0">4</span><span class="br0">&#41;</span>&lt;&gt;<span class="st0">&quot;    &quot;</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="kw1">FLASH</span> <span class="nu0">1</span>;<span class="st0">&quot;Invalid arguments!&quot;</span>: <span class="kw1">BEEP</span> <span class="nu0">1</span>,.01: <span class="kw1">PAUSE</span> <span class="nu0">0</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">60</span><br /><span class="nu0">380</span> <span class="kw1">LET</span> r=<span class="kw3">VAL</span> f$<br /><span class="nu0">390</span> <span class="kw1">PRINT</span> r;<span class="st0">&quot; &quot;</span>;<br /><span class="nu0">400</span> <span class="kw1">IF</span> r&lt;&gt;<span class="nu0">24</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> <span class="kw1">FLASH</span> <span class="nu0">1</span>;<span class="st0">&quot;Wrong!&quot;</span>: <span class="kw1">BEEP</span> <span class="nu0">1</span>,<span class="nu0">1</span>: <span class="kw1">PAUSE</span> <span class="nu0">0</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">60</span><br /><span class="nu0">410</span> <span class="kw1">PRINT</span> <span class="kw1">FLASH</span> <span class="nu0">1</span>;<span class="st0">&quot;Correct!&quot;</span>: <span class="kw1">PAUSE</span> <span class="nu0">0</span>: <span class="kw1">GO</span> <span class="kw1">TO</span> <span class="nu0">10</span><br /><span class="nu0">420</span> DATA <span class="st0">&quot;nononon&quot;</span><br /><span class="nu0">430</span> DATA <span class="st0">&quot;(non)onon&quot;</span><br /><span class="nu0">440</span> DATA <span class="st0">&quot;nono(non)&quot;</span><br /><span class="nu0">450</span> DATA <span class="st0">&quot;no(no(non))&quot;</span><br /><span class="nu0">460</span> DATA <span class="st0">&quot;((non)on)on&quot;</span><br /><span class="nu0">470</span> DATA <span class="st0">&quot;no(non)on&quot;</span><br /><span class="nu0">480</span> DATA <span class="st0">&quot;(non)o(non)&quot;</span><br /><span class="nu0">485</span> DATA <span class="st0">&quot;no((non)on)&quot;</span><br /><span class="nu0">490</span> DATA <span class="st0">&quot;(nonon)on&quot;</span><br /><span class="nu0">495</span> DATA <span class="st0">&quot;(no(non))on&quot;</span><br /><span class="nu0">500</span> DATA <span class="st0">&quot;no(nonon)&quot;</span></pre>

<!-- 
NewPP limit report
Cached time: 20161215103137
Cache expiry: 86400
Dynamic content: false
CPU time usage: 2.924 seconds
Real time usage: 2.999 seconds
Preprocessor visited node count: 3453/1000000
Preprocessor generated node count: 5747/1000000
Post‐expand include size: 13027/2097152 bytes
Template argument size: 3105/2097152 bytes
Highest expansion depth: 4/40
Expensive parser function count: 0/100
-->

<!-- 
Transclusion expansion time report (%,ms,calls,template)
100.00% 2352.569      1 - -total
 10.63%  250.186     85 - Template:Header
  1.08%   25.335      1 - Template:Task
  0.69%   16.134      2 - Template:Omit_from
  0.67%   15.732     10 - Template:Works_with
  0.51%   11.908      2 - Template:Libheader
  0.42%    9.871      5 - Template:Trans
  0.36%    8.509      1 - Template:Untested
  0.31%    7.295     20 - Template:Out
  0.27%    6.455      1 - Template:Anchor
-->

<!-- Saved in parser cache with key rosettacode:pcache:idhash:4938-0!*!0!!en!5!* and timestamp 20161215103134 and revision id 239256
 -->
</div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://rosettacode.org/mw/index.php?title=24_game&amp;oldid=239256">http://rosettacode.org/mw/index.php?title=24_game&amp;oldid=239256</a>"</div>
</div>
					<!-- category links -->
					<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task">Solutions by Programming Task</a></li><li><a href="/wiki/Category:8th" title="Category:8th">8th</a></li><li><a href="/wiki/Category:ABAP" title="Category:ABAP">ABAP</a></li><li><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="/wiki/Category:Argile" title="Category:Argile">Argile</a></li><li><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></li><li><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></li><li><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li><li><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></li><li><a href="/wiki/Category:C" title="Category:C">C</a></li><li><a href="/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li><li><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li><li><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></li><li><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li><li><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></li><li><a href="/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></li><li><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li><li><a href="/wiki/Category:D" title="Category:D">D</a></li><li><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></li><li><a href="/wiki/Category:Elena" title="Category:Elena">Elena</a></li><li><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></li><li><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F Sharp</a></li><li><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></li><li><a href="/wiki/Category:Falcon" title="Category:Falcon">Falcon</a></li><li><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></li><li><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></li><li><a href="/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="/wiki/Category:Gosu" title="Category:Gosu">Gosu</a></li><li><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></li><li><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li><li><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></li><li><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a></li><li><a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></li><li><a href="/wiki/Category:Icon_Programming_Library" title="Category:Icon Programming Library">Icon Programming Library</a></li><li><a href="/wiki/Category:J" title="Category:J">J</a></li><li><a href="/wiki/Category:Java" title="Category:Java">Java</a></li><li><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li><li><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></li><li><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></li><li><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></li><li><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></li><li><a href="/wiki/Category:LiveCode" title="Category:LiveCode">LiveCode</a></li><li><a href="/wiki/Category:Locomotive_Basic" title="Category:Locomotive Basic">Locomotive Basic</a></li><li><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></li><li><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></li><li><a href="/wiki/Category:Maple" title="Category:Maple">Maple</a></li><li><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></li><li><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></li><li><a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></li><li><a href="/wiki/Category:MIRC_Scripting_Language" title="Category:MIRC Scripting Language">MIRC Scripting Language</a></li><li><a href="/wiki/Category:Modula-2" title="Category:Modula-2">Modula-2</a></li><li><a href="/mw/index.php?title=Category:Ulm%27s_Modula-2_Library&amp;action=edit&amp;redlink=1" class="new" title="Category:Ulm's Modula-2 Library (page does not exist)">Ulm's Modula-2 Library</a></li><li><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></li><li><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li><li><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></li><li><a href="/wiki/Category:OoRexx" title="Category:OoRexx">OoRexx</a></li><li><a href="/wiki/Category:OpenEdge/Progress" title="Category:OpenEdge/Progress">OpenEdge/Progress</a></li><li><a href="/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></li><li><a href="/wiki/Category:Examples_needing_attention" title="Category:Examples needing attention">Examples needing attention</a></li><li><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li><li><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></li><li><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></li><li><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></li><li><a href="/wiki/Category:Potion" title="Category:Potion">Potion</a></li><li><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></li><li><a href="/wiki/Category:ProDOS" title="Category:ProDOS">ProDOS</a></li><li><a href="/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></li><li><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li><li><a href="/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="/wiki/Category:R" title="Category:R">R</a></li><li><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></li><li><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></li><li><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li><li><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></li><li><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></li><li><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li><li><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></li><li><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></li><li><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li><li><a href="/wiki/Category:TorqueScript" title="Category:TorqueScript">TorqueScript</a></li><li><a href="/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></li><li><a href="/wiki/Category:GUISS/Omit" title="Category:GUISS/Omit">GUISS/Omit</a></li><li><a href="/wiki/Category:ML/I/Omit" title="Category:ML/I/Omit">ML/I/Omit</a></li><li><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></li><li><a href="/wiki/Category:VBA" title="Category:VBA">VBA</a></li><li><a href="/wiki/Category:Zkl" title="Category:Zkl">Zkl</a></li><li><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></li><li><a href="/wiki/Category:Puzzles" title="Category:Puzzles">Puzzles</a></li></ul></div></div>
				</div>

			</div>
		</div>
		<div class="row">
			<div class="col-lg-12">
				<!-- Tools-->
				<nav class="navbar navbar-default p-tb " id="p-tb"  >
					<ul class="nav navbar-nav small">
						<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/24_game" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
						<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/24_game" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
						<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
						<li id="t-print"><a href="/mw/index.php?title=24_game&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
						<li id="t-permalink"><a href="/mw/index.php?title=24_game&amp;oldid=239256" title="Permanent link to this revision of the page">Permanent link</a></li>
						<li id="t-info"><a href="/mw/index.php?title=24_game&amp;action=info" title="More information about this page">Page information</a></li>
						<li id="t-smwbrowselink"><a href="/wiki/Special:Browse/24_game" rel="smw-browse">Browse properties</a></li>
						
					</ul>
				</nav>

			</div>
		</div>
		<div class="row">
			<div class="col-lg-12">
				<!-- footer links -->
				<ul class="footer-info list-unstyled small" id="footer-info">
					<!-- info -->
					<li> This page was last modified on 1 December 2016, at 14:09.</li>
					<li>Content is available under <a class="external" rel="nofollow" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a> unless otherwise noted.</li>
				</ul>

			</div>
		</div>
		<div class="row">
			<div class="col-lg-6">
				<!-- places -->
				<ul class="list-inline footer-places " id="footer-places">
					<li><small><a href="/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></small></li>
					<li><small><a href="/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></small></li>
					<li><small><a href="/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></small></li>
				</ul>

			</div>
			<div class="col-lg-6">
				<!-- footer icons -->
				<ul class="list-inline pull-right footer-icons " id="footer-icons" >
					<!-- copyright -->
					<li><a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="/mw/resources/assets/licenses/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31" /></a></li>
					<!-- poweredby -->
					<li><a href="//www.mediawiki.org/"><img src="/mw/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/mw/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /mw/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31" /></a></li>
					<li><a href="https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="/mw/extensions/SemanticMediaWiki/includes/../resources/images/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31" /></a></li>
				</ul>

			</div>
		</div>
	</div><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({"user":"ready","user.groups":"ready"});mw.loader.load(["mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.bootstrap.scripts"]);
} );</script>
<script type="text/javascript">/* CloudFlare analytics upgrade */
</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgBackendResponseTime":711});
} );</script></body>
</html>