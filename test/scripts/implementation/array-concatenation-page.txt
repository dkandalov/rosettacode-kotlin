<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8"/>
<title>Array concatenation - Rosetta Code</title>
<script type="text/javascript">
//<![CDATA[
try{if (!window.CloudFlare) {var CloudFlare=[{verbose:0,p:0,byc:0,owlid:"cf",bag2:1,mirage2:0,oracle:0,paths:{cloudflare:"/cdn-cgi/nexp/dok3v=1613a3a185/"},atok:"a583006972e34980972fddfc4853b1f8",petok:"f6dad0bf8b67aa184eb513bbdfe0d46edb376438-1481837919-1800",zone:"rosettacode.org",rocket:"0",apps:{"ga_key":{"ua":"UA-1219419-1","ga_bs":"2"}}}];!function(a,b){a=document.createElement("script"),b=document.getElementsByTagName("script")[0],a.async=!0,a.src="//ajax.cloudflare.com/cdn-cgi/nexp/dok3v=f2befc48d1/cloudflare.min.js",b.parentNode.insertBefore(a,b)}()}}catch(e){};
//]]>
</script>
<script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":!1,"wgNamespaceNumber":0,"wgPageName":"Array_concatenation","wgTitle":"Array concatenation","wgCurRevisionId":239785,"wgRevisionId":239785,"wgArticleId":4833,"wgIsArticle":!0,"wgIsRedirect":!1,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Data Structures","Simple","ACL2","ActionScript","Ada","ALGOL 68","AntLang","APL","Apex","AppleScript","AutoHotkey","AutoIt","AWK","Babel","Bash","BBC BASIC","Bracmat","Burlesque","C","C++","C sharp","Ceylon","Clojure","COBOL","CoffeeScript","Common Lisp","Component Pascal","D","Delphi","E","EchoLisp","ECL","Efene","EGL","Ela","Elena","Elixir","Elm","Emacs Lisp","Erlang","ERRE","Euphoria","F Sharp","FBSL","Factor","Fantom","Forth","Fortran","FreeBASIC","Frink","FunL","Futhark","GAP","Go","Gosu","Groovy","Haskell","HicEst","I","Icon","Unicon","IDL","Inform 7","Ioke","J","Java","JavaScript","Jq","Julia","K","Kotlin","LabVIEW",
"Lang5","Lasso","LFE","Liberty BASIC","Lingo","Little","Logo","Lua","Maple","Mathematica","Wolfram Language","MATLAB","Octave","Maxima","Mercury","Nemerle","NetRexx","NewLISP","Nim","Oberon-2","Objeck","Objective-C","OCaml","Oforth","Onyx","OoRexx","Order","OxygenBasic","Oz","PARI/GP","Pascal","Perl","Perl 6","Phix","PHP","PicoLisp","PL/I","PostScript","Initlib","PowerShell","Prolog","PureBasic","Python","R","Racket","RapidQ","REBOL","Retro","REXX","Ring","RLaB","Ruby","Rust","S-lang","Scala","Scheme","Seed7","SETL","Sidef","Slate","Smalltalk","SNOBOL4","Standard ML","Swift","Tcl","TI-89 BASIC","Trith","UNIX Shell","Ursa","Vala","VBScript","Visual Basic .NET","Wart","Wren","Yacas","Yorick","Zkl","Zsh","ZX Spectrum Basic"],"wgBreakFrames":!1,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August",
"September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Array_concatenation","wgRelevantArticleId":4833,"wgIsProbablyEditable":!0,"wgRestrictionEdit":[],"wgRestrictionMove":[],"sfgAutocompleteValues":[],"sfgAutocompleteOnAllChars":!1,"sfgFieldProperties":[],"sfgDependentFields":[],"sfgShowOnSelect":[],"sfgScriptPath":"/mw/extensions/SemanticForms","sdgDownArrowImage":"/mw/extensions/SemanticDrilldown/skins/down-arrow.png","sdgRightArrowImage":"/mw/extensions/SemanticDrilldown/skins/right-arrow.png"});mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function($,jQuery){mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\"});});mw.loader.load(["ext.smw.style","ext.smw.tooltips","mediawiki.page.startup","mediawiki.legacy.wikibits"]);
} );</script>
<link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=ext.bootstrap.styles%7Cext.math.desktop.styles%7Cext.math.styles&amp;only=styles&amp;skin=chameleon"/>
<meta name="ResourceLoaderDynamicStyles" content=""/>
<link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=chameleon"/>
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style>
<script async="" src="/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=chameleon"></script>
<meta name="generator" content="MediaWiki 1.26.2"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<link rel="ExportRDF" type="application/rdf+xml" title="Array concatenation" href="/mw/index.php?title=Special:ExportRDF/Array_concatenation&amp;xmlmime=rdf"/>
<link rel="alternate" type="application/x-wiki" title="Edit" href="/mw/index.php?title=Array_concatenation&amp;action=edit"/>
<link rel="edit" title="Edit" href="/mw/index.php?title=Array_concatenation&amp;action=edit"/>
<link rel="shortcut icon" href="/favicon.ico"/>
<link rel="search" type="application/opensearchdescription+xml" href="/mw/opensearch_desc.php" title="Rosetta Code (en)"/>
<link rel="EditURI" type="application/rsd+xml" href="http://rosettacode.org/mw/api.php?action=rsd"/>
<link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html"/>
<link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="/mw/index.php?title=Special:RecentChanges&amp;feed=atom"/>
<script type="text/javascript">
/* <![CDATA[ */
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-1219419-1']);
_gaq.push(['_trackPageview']);

(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

(function(b){(function(a){"__CF"in b&&"DJS"in b.__CF?b.__CF.DJS.push(a):"addEventListener"in b?b.addEventListener("load",a,!1):b.attachEvent("onload",a)})(function(){"FB"in b&&"Event"in FB&&"subscribe"in FB.Event&&(FB.Event.subscribe("edge.create",function(a){_gaq.push(["_trackSocial","facebook","like",a])}),FB.Event.subscribe("edge.remove",function(a){_gaq.push(["_trackSocial","facebook","unlike",a])}),FB.Event.subscribe("message.send",function(a){_gaq.push(["_trackSocial","facebook","send",a])}));"twttr"in b&&"events"in twttr&&"bind"in twttr.events&&twttr.events.bind("tweet",function(a){if(a){var b;if(a.target&&a.target.nodeName=="IFRAME")a:{if(a=a.target.src){a=a.split("#")[0].match(/[^?=&]+=([^&]*)?/g);b=0;for(var c;c=a[b];++b)if(c.indexOf("url")===0){b=unescape(c.split("=")[1]);break a}}b=void 0}_gaq.push(["_trackSocial","twitter","tweet",b])}})})})(window);
/* ]]> */
</script>
</head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Array_concatenation layout-standard skin-chameleon action-view">
<div class="container">
<div class="row">
<div class="col-lg-3">
 
<div id="p-logo" class="p-logo" role="banner">
<a href="/wiki/Rosetta_Code" title="Visit the main page"><img src="/mw/title.png" alt="Rosetta Code"/></a>
</div>
</div>
<div class="col-lg-9">
<div class="row">
<div class="col-lg-12">
 
<div class="p-personal pull-right" id="p-personal">
<ul class="p-personal-tools list-inline pull-right">
<li id="pt-createaccount"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Array+concatenation&amp;type=signup" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li>
<li id="pt-login"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Array+concatenation" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
</ul>
<div class="newtalk-notifier">
</div>
</div>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<div id="p-search" class="p-search pull-right" role="search">
<form id="searchform" class="mw-search form-inline" action="/mw/index.php">
<input type="hidden" name="title" value="Special:Search"/>
<div class="input-group">
<input name="search" placeholder="Search" title="Search Rosetta Code [f]" accesskey="f" id="searchInput" class="form-control"/>
<div class="input-group-btn">
<button value="Go" id="searchGoButton" name="go" title="Go to a page with this exact name if it exists" type="submit" class="searchGoButton btn btn-default"><span class="glyphicon glyphicon-share-alt"></span></button><button value="Search" id="mw-searchButton" name="fulltext" title="Search the pages for this text" type="submit" class="mw-searchButton btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
</div>
</div>
</form>
</div>
</div>
</div>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<nav class="navbar navbar-default p-navbar" role="navigation" id="mw-navigation">
<div class="container-fluid"><div class="navbar-header">
<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#mw-navigation-collapse">
<span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
</button>
</div>
<div class="collapse navbar-collapse" id="mw-navigation-collapse"><ul class="nav navbar-nav">
 
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown">Community <b class="caret"></b></a>
<ul class="dropdown-menu p-Community" id="p-Community">
<li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li>
<li id="n-Chat.2FIRC"><a href="/wiki/Special:WebChat">Chat/IRC</a></li>
<li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li>
<li id="n-The-Village-Pump"><a href="/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li>
<li id="n-Finances"><a href="/wiki/Rosetta_Code:Finances">Finances</a></li>
</ul>
</li>
 
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown">Explore <b class="caret"></b></a>
<ul class="dropdown-menu p-Explore" id="p-Explore">
<li id="n-Languages"><a href="/wiki/Category:Programming_Languages">Languages</a></li>
<li id="n-Tasks"><a href="/wiki/Category:Programming_Tasks">Tasks</a></li>
<li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
<li id="n-Similar-sites"><a href="/wiki/Help:Similar_Sites">Similar sites</a></li>
<li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
</ul>
</li></ul>
</div> 
</div>
</nav>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<ul class="p-contentnavigation list-inline text-center" id="p-contentnavigation">
 
<li id="p-namespaces">
<ul class="list-inline">
<li id="ca-nstab-main" class="selected"><a href="/wiki/Array_concatenation" title="View the content page [c]" accesskey="c" class="selected">Page</a></li>
<li id="ca-talk"><a href="/wiki/Talk:Array_concatenation" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
</ul>
</li>
 
<li id="p-views">
<ul class="list-inline">
<li id="ca-edit"><a href="/mw/index.php?title=Array_concatenation&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></li>
<li id="ca-history"><a href="/mw/index.php?title=Array_concatenation&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>
</ul>
</li>
</ul>
</div>
</div>
<div class="row">
<div class="col-lg-12">
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<div id="content" class="mw-body"><a id="top"></a>
<div id="mw-js-message" style="display:none;"></div>
<div class="contentHeader">
 
<h1 id="firstHeading" class="firstHeading">Array concatenation</h1>
 
<div id="siteSub">From Rosetta Code</div><div id="jump-to-nav" class="mw-jump">Jump to:<a href="#mw-navigation">navigation</a>, <a href="#p-search">search</a></div>
</div><div id="bodyContent">
 
<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="infobox" style="width: 2in"><div class="floatleft"><a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/64px-Rcode-button-task-crushed.png" width="64" height="64" srcset="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/96px-Rcode-button-task-crushed.png 1.5x, /mw/images/thumb/b/ba/Rcode-button-task-crushed.png/128px-Rcode-button-task-crushed.png 2x"/></a></div><b>Array concatenation</b><br/>
You are encouraged to <a href="/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.</div>
<dl><dt>Task</dt>
<dd></dd></dl>
<p>Show how to concatenate two arrays in your language.
</p><p><br/>
If this is as simple as <code><var>array1</var> + <var>array2</var></code>, so be it.
<br/><br/>
</p>
<div id="toc" class="toc"><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#ACL2"><span class="tocnumber">1</span> <span class="toctext">ACL2</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#ActionScript"><span class="tocnumber">2</span> <span class="toctext">ActionScript</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Ada"><span class="tocnumber">3</span> <span class="toctext">Ada</span></a></li>
<li class="toclevel-1 tocsection-4"><a href="#ALGOL_68"><span class="tocnumber">4</span> <span class="toctext">ALGOL 68</span></a></li>
<li class="toclevel-1 tocsection-5"><a href="#AntLang"><span class="tocnumber">5</span> <span class="toctext">AntLang</span></a></li>
<li class="toclevel-1 tocsection-6"><a href="#APL"><span class="tocnumber">6</span> <span class="toctext">APL</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Apex"><span class="tocnumber">7</span> <span class="toctext">Apex</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#AppleScript"><span class="tocnumber">8</span> <span class="toctext">AppleScript</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#AutoHotkey"><span class="tocnumber">9</span> <span class="toctext">AutoHotkey</span></a>
<ul>
<li class="toclevel-2 tocsection-10"><a href="#True_Arrays"><span class="tocnumber">9.1</span> <span class="toctext">True Arrays</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Legacy_versions"><span class="tocnumber">9.2</span> <span class="toctext">Legacy versions</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#AutoIt"><span class="tocnumber">10</span> <span class="toctext">AutoIt</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#AWK"><span class="tocnumber">11</span> <span class="toctext">AWK</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#Babel"><span class="tocnumber">12</span> <span class="toctext">Babel</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#bash"><span class="tocnumber">13</span> <span class="toctext">bash</span></a></li>
<li class="toclevel-1 tocsection-16"><a href="#BBC_BASIC"><span class="tocnumber">14</span> <span class="toctext">BBC BASIC</span></a></li>
<li class="toclevel-1 tocsection-17"><a href="#Bracmat"><span class="tocnumber">15</span> <span class="toctext">Bracmat</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="#Burlesque"><span class="tocnumber">16</span> <span class="toctext">Burlesque</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#C"><span class="tocnumber">17</span> <span class="toctext">C</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#C.2B.2B"><span class="tocnumber">18</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#C.23"><span class="tocnumber">19</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#Ceylon"><span class="tocnumber">20</span> <span class="toctext">Ceylon</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#Clojure"><span class="tocnumber">21</span> <span class="toctext">Clojure</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#COBOL"><span class="tocnumber">22</span> <span class="toctext">COBOL</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="#CoffeeScript"><span class="tocnumber">23</span> <span class="toctext">CoffeeScript</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="#Common_Lisp"><span class="tocnumber">24</span> <span class="toctext">Common Lisp</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="#Component_Pascal"><span class="tocnumber">25</span> <span class="toctext">Component Pascal</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="#D"><span class="tocnumber">26</span> <span class="toctext">D</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="#Delphi"><span class="tocnumber">27</span> <span class="toctext">Delphi</span></a></li>
<li class="toclevel-1 tocsection-30"><a href="#E"><span class="tocnumber">28</span> <span class="toctext">E</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="#EchoLisp"><span class="tocnumber">29</span> <span class="toctext">EchoLisp</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#ECL"><span class="tocnumber">30</span> <span class="toctext">ECL</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#Efene"><span class="tocnumber">31</span> <span class="toctext">Efene</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="#EGL"><span class="tocnumber">32</span> <span class="toctext">EGL</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="#Ela"><span class="tocnumber">33</span> <span class="toctext">Ela</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="#Elena"><span class="tocnumber">34</span> <span class="toctext">Elena</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="#Elixir"><span class="tocnumber">35</span> <span class="toctext">Elixir</span></a></li>
<li class="toclevel-1 tocsection-38"><a href="#Elm"><span class="tocnumber">36</span> <span class="toctext">Elm</span></a></li>
<li class="toclevel-1 tocsection-39"><a href="#Emacs_Lisp"><span class="tocnumber">37</span> <span class="toctext">Emacs Lisp</span></a></li>
<li class="toclevel-1 tocsection-40"><a href="#Erlang"><span class="tocnumber">38</span> <span class="toctext">Erlang</span></a></li>
<li class="toclevel-1 tocsection-41"><a href="#ERRE"><span class="tocnumber">39</span> <span class="toctext">ERRE</span></a></li>
<li class="toclevel-1 tocsection-42"><a href="#Euphoria"><span class="tocnumber">40</span> <span class="toctext">Euphoria</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="#F.23"><span class="tocnumber">41</span> <span class="toctext">F#</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#FBSL"><span class="tocnumber">42</span> <span class="toctext">FBSL</span></a></li>
<li class="toclevel-1 tocsection-45"><a href="#Factor"><span class="tocnumber">43</span> <span class="toctext">Factor</span></a></li>
<li class="toclevel-1 tocsection-46"><a href="#Fantom"><span class="tocnumber">44</span> <span class="toctext">Fantom</span></a></li>
<li class="toclevel-1 tocsection-47"><a href="#Forth"><span class="tocnumber">45</span> <span class="toctext">Forth</span></a></li>
<li class="toclevel-1 tocsection-48"><a href="#Fortran"><span class="tocnumber">46</span> <span class="toctext">Fortran</span></a></li>
<li class="toclevel-1 tocsection-49"><a href="#FreeBASIC"><span class="tocnumber">47</span> <span class="toctext">FreeBASIC</span></a></li>
<li class="toclevel-1 tocsection-50"><a href="#Frink"><span class="tocnumber">48</span> <span class="toctext">Frink</span></a></li>
<li class="toclevel-1 tocsection-51"><a href="#FunL"><span class="tocnumber">49</span> <span class="toctext">FunL</span></a></li>
<li class="toclevel-1 tocsection-52"><a href="#Futhark"><span class="tocnumber">50</span> <span class="toctext">Futhark</span></a></li>
<li class="toclevel-1 tocsection-53"><a href="#GAP"><span class="tocnumber">51</span> <span class="toctext">GAP</span></a></li>
<li class="toclevel-1 tocsection-54"><a href="#Go"><span class="tocnumber">52</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-1 tocsection-55"><a href="#Gosu"><span class="tocnumber">53</span> <span class="toctext">Gosu</span></a></li>
<li class="toclevel-1 tocsection-56"><a href="#Groovy"><span class="tocnumber">54</span> <span class="toctext">Groovy</span></a></li>
<li class="toclevel-1 tocsection-57"><a href="#Haskell"><span class="tocnumber">55</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-1 tocsection-58"><a href="#HicEst"><span class="tocnumber">56</span> <span class="toctext">HicEst</span></a></li>
<li class="toclevel-1 tocsection-59"><a href="#I"><span class="tocnumber">57</span> <span class="toctext">I</span></a></li>
<li class="toclevel-1 tocsection-60"><a href="#Icon_and_Unicon"><span class="tocnumber">58</span> <span class="toctext">Icon and Unicon</span></a></li>
<li class="toclevel-1 tocsection-61"><a href="#IDL"><span class="tocnumber">59</span> <span class="toctext">IDL</span></a></li>
<li class="toclevel-1 tocsection-62"><a href="#Inform_7"><span class="tocnumber">60</span> <span class="toctext">Inform 7</span></a></li>
<li class="toclevel-1 tocsection-63"><a href="#Ioke"><span class="tocnumber">61</span> <span class="toctext">Ioke</span></a></li>
<li class="toclevel-1 tocsection-64"><a href="#J"><span class="tocnumber">62</span> <span class="toctext">J</span></a></li>
<li class="toclevel-1 tocsection-65"><a href="#Java"><span class="tocnumber">63</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-1 tocsection-66"><a href="#JavaScript"><span class="tocnumber">64</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-1 tocsection-67"><a href="#jq"><span class="tocnumber">65</span> <span class="toctext">jq</span></a></li>
<li class="toclevel-1 tocsection-68"><a href="#Julia"><span class="tocnumber">66</span> <span class="toctext">Julia</span></a></li>
<li class="toclevel-1 tocsection-69"><a href="#K"><span class="tocnumber">67</span> <span class="toctext">K</span></a></li>
<li class="toclevel-1 tocsection-70"><a href="#Kotlin"><span class="tocnumber">68</span> <span class="toctext">Kotlin</span></a></li>
<li class="toclevel-1 tocsection-71"><a href="#LabVIEW"><span class="tocnumber">69</span> <span class="toctext">LabVIEW</span></a></li>
<li class="toclevel-1 tocsection-72"><a href="#Lang5"><span class="tocnumber">70</span> <span class="toctext">Lang5</span></a></li>
<li class="toclevel-1 tocsection-73"><a href="#Lasso"><span class="tocnumber">71</span> <span class="toctext">Lasso</span></a></li>
<li class="toclevel-1 tocsection-74"><a href="#LFE"><span class="tocnumber">72</span> <span class="toctext">LFE</span></a></li>
<li class="toclevel-1 tocsection-75"><a href="#Liberty_BASIC"><span class="tocnumber">73</span> <span class="toctext">Liberty BASIC</span></a></li>
<li class="toclevel-1 tocsection-76"><a href="#Lingo"><span class="tocnumber">74</span> <span class="toctext">Lingo</span></a></li>
<li class="toclevel-1 tocsection-77"><a href="#Little"><span class="tocnumber">75</span> <span class="toctext">Little</span></a></li>
<li class="toclevel-1 tocsection-78"><a href="#Logo"><span class="tocnumber">76</span> <span class="toctext">Logo</span></a></li>
<li class="toclevel-1 tocsection-79"><a href="#Lua"><span class="tocnumber">77</span> <span class="toctext">Lua</span></a></li>
<li class="toclevel-1 tocsection-80"><a href="#Maple"><span class="tocnumber">78</span> <span class="toctext">Maple</span></a></li>
<li class="toclevel-1 tocsection-81"><a href="#Mathematica_.2F_Wolfram_Language"><span class="tocnumber">79</span> <span class="toctext">Mathematica / Wolfram Language</span></a></li>
<li class="toclevel-1 tocsection-82"><a href="#MATLAB_.2F_Octave"><span class="tocnumber">80</span> <span class="toctext">MATLAB / Octave</span></a></li>
<li class="toclevel-1 tocsection-83"><a href="#Maxima"><span class="tocnumber">81</span> <span class="toctext">Maxima</span></a></li>
<li class="toclevel-1 tocsection-84"><a href="#Mercury"><span class="tocnumber">82</span> <span class="toctext">Mercury</span></a></li>
<li class="toclevel-1 tocsection-85"><a href="#Nemerle"><span class="tocnumber">83</span> <span class="toctext">Nemerle</span></a></li>
<li class="toclevel-1 tocsection-86"><a href="#NetRexx"><span class="tocnumber">84</span> <span class="toctext">NetRexx</span></a></li>
<li class="toclevel-1 tocsection-87"><a href="#NewLISP"><span class="tocnumber">85</span> <span class="toctext">NewLISP</span></a></li>
<li class="toclevel-1 tocsection-88"><a href="#Nim"><span class="tocnumber">86</span> <span class="toctext">Nim</span></a></li>
<li class="toclevel-1 tocsection-89"><a href="#Oberon-2"><span class="tocnumber">87</span> <span class="toctext">Oberon-2</span></a></li>
<li class="toclevel-1 tocsection-90"><a href="#Objeck"><span class="tocnumber">88</span> <span class="toctext">Objeck</span></a></li>
<li class="toclevel-1 tocsection-91"><a href="#Objective-C"><span class="tocnumber">89</span> <span class="toctext">Objective-C</span></a></li>
<li class="toclevel-1 tocsection-92"><a href="#OCaml"><span class="tocnumber">90</span> <span class="toctext">OCaml</span></a></li>
<li class="toclevel-1 tocsection-93"><a href="#Oforth"><span class="tocnumber">91</span> <span class="toctext">Oforth</span></a></li>
<li class="toclevel-1 tocsection-94"><a href="#Onyx"><span class="tocnumber">92</span> <span class="toctext">Onyx</span></a></li>
<li class="toclevel-1 tocsection-95"><a href="#ooRexx"><span class="tocnumber">93</span> <span class="toctext">ooRexx</span></a></li>
<li class="toclevel-1 tocsection-96"><a href="#Order"><span class="tocnumber">94</span> <span class="toctext">Order</span></a></li>
<li class="toclevel-1 tocsection-97"><a href="#OxygenBasic"><span class="tocnumber">95</span> <span class="toctext">OxygenBasic</span></a></li>
<li class="toclevel-1 tocsection-98"><a href="#Oz"><span class="tocnumber">96</span> <span class="toctext">Oz</span></a></li>
<li class="toclevel-1 tocsection-99"><a href="#PARI.2FGP"><span class="tocnumber">97</span> <span class="toctext">PARI/GP</span></a></li>
<li class="toclevel-1 tocsection-100"><a href="#Pascal"><span class="tocnumber">98</span> <span class="toctext">Pascal</span></a></li>
<li class="toclevel-1 tocsection-101"><a href="#Perl"><span class="tocnumber">99</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-1 tocsection-102"><a href="#Perl_6"><span class="tocnumber">100</span> <span class="toctext">Perl 6</span></a></li>
<li class="toclevel-1 tocsection-103"><a href="#Phix"><span class="tocnumber">101</span> <span class="toctext">Phix</span></a></li>
<li class="toclevel-1 tocsection-104"><a href="#PHP"><span class="tocnumber">102</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-1 tocsection-105"><a href="#PicoLisp"><span class="tocnumber">103</span> <span class="toctext">PicoLisp</span></a></li>
<li class="toclevel-1 tocsection-106"><a href="#PL.2FI"><span class="tocnumber">104</span> <span class="toctext">PL/I</span></a></li>
<li class="toclevel-1 tocsection-107"><a href="#PostScript"><span class="tocnumber">105</span> <span class="toctext">PostScript</span></a></li>
<li class="toclevel-1 tocsection-108"><a href="#PowerShell"><span class="tocnumber">106</span> <span class="toctext">PowerShell</span></a></li>
<li class="toclevel-1 tocsection-109"><a href="#Prolog"><span class="tocnumber">107</span> <span class="toctext">Prolog</span></a></li>
<li class="toclevel-1 tocsection-110"><a href="#PureBasic"><span class="tocnumber">108</span> <span class="toctext">PureBasic</span></a></li>
<li class="toclevel-1 tocsection-111"><a href="#Python"><span class="tocnumber">109</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-1 tocsection-112"><a href="#R"><span class="tocnumber">110</span> <span class="toctext">R</span></a></li>
<li class="toclevel-1 tocsection-113"><a href="#Racket"><span class="tocnumber">111</span> <span class="toctext">Racket</span></a></li>
<li class="toclevel-1 tocsection-114"><a href="#RapidQ"><span class="tocnumber">112</span> <span class="toctext">RapidQ</span></a></li>
<li class="toclevel-1 tocsection-115"><a href="#REBOL"><span class="tocnumber">113</span> <span class="toctext">REBOL</span></a></li>
<li class="toclevel-1 tocsection-116"><a href="#Retro"><span class="tocnumber">114</span> <span class="toctext">Retro</span></a></li>
<li class="toclevel-1 tocsection-117"><a href="#REXX"><span class="tocnumber">115</span> <span class="toctext">REXX</span></a></li>
<li class="toclevel-1 tocsection-118"><a href="#Ring"><span class="tocnumber">116</span> <span class="toctext">Ring</span></a></li>
<li class="toclevel-1 tocsection-119"><a href="#RLaB"><span class="tocnumber">117</span> <span class="toctext">RLaB</span></a></li>
<li class="toclevel-1 tocsection-120"><a href="#Ruby"><span class="tocnumber">118</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-1 tocsection-121"><a href="#Rust"><span class="tocnumber">119</span> <span class="toctext">Rust</span></a></li>
<li class="toclevel-1 tocsection-122"><a href="#S-lang"><span class="tocnumber">120</span> <span class="toctext">S-lang</span></a></li>
<li class="toclevel-1 tocsection-123"><a href="#Scala"><span class="tocnumber">121</span> <span class="toctext">Scala</span></a></li>
<li class="toclevel-1 tocsection-124"><a href="#Scheme"><span class="tocnumber">122</span> <span class="toctext">Scheme</span></a></li>
<li class="toclevel-1 tocsection-125"><a href="#Seed7"><span class="tocnumber">123</span> <span class="toctext">Seed7</span></a></li>
<li class="toclevel-1 tocsection-126"><a href="#SETL"><span class="tocnumber">124</span> <span class="toctext">SETL</span></a></li>
<li class="toclevel-1 tocsection-127"><a href="#Sidef"><span class="tocnumber">125</span> <span class="toctext">Sidef</span></a></li>
<li class="toclevel-1 tocsection-128"><a href="#Slate"><span class="tocnumber">126</span> <span class="toctext">Slate</span></a></li>
<li class="toclevel-1 tocsection-129"><a href="#Smalltalk"><span class="tocnumber">127</span> <span class="toctext">Smalltalk</span></a></li>
<li class="toclevel-1 tocsection-130"><a href="#SNOBOL4"><span class="tocnumber">128</span> <span class="toctext">SNOBOL4</span></a></li>
<li class="toclevel-1 tocsection-131"><a href="#Standard_ML"><span class="tocnumber">129</span> <span class="toctext">Standard ML</span></a></li>
<li class="toclevel-1 tocsection-132"><a href="#Swift"><span class="tocnumber">130</span> <span class="toctext">Swift</span></a></li>
<li class="toclevel-1 tocsection-133"><a href="#Tcl"><span class="tocnumber">131</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-1 tocsection-134"><a href="#TI-89_BASIC"><span class="tocnumber">132</span> <span class="toctext">TI-89 BASIC</span></a></li>
<li class="toclevel-1 tocsection-135"><a href="#Trith"><span class="tocnumber">133</span> <span class="toctext">Trith</span></a></li>
<li class="toclevel-1 tocsection-136"><a href="#UNIX_Shell"><span class="tocnumber">134</span> <span class="toctext">UNIX Shell</span></a></li>
<li class="toclevel-1 tocsection-137"><a href="#Ursa"><span class="tocnumber">135</span> <span class="toctext">Ursa</span></a></li>
<li class="toclevel-1 tocsection-138"><a href="#Vala"><span class="tocnumber">136</span> <span class="toctext">Vala</span></a></li>
<li class="toclevel-1 tocsection-139"><a href="#VBScript"><span class="tocnumber">137</span> <span class="toctext">VBScript</span></a></li>
<li class="toclevel-1 tocsection-140"><a href="#Visual_Basic_.NET"><span class="tocnumber">138</span> <span class="toctext">Visual Basic .NET</span></a></li>
<li class="toclevel-1 tocsection-141"><a href="#Wart"><span class="tocnumber">139</span> <span class="toctext">Wart</span></a></li>
<li class="toclevel-1 tocsection-142"><a href="#Wren"><span class="tocnumber">140</span> <span class="toctext">Wren</span></a></li>
<li class="toclevel-1 tocsection-143"><a href="#Yacas"><span class="tocnumber">141</span> <span class="toctext">Yacas</span></a></li>
<li class="toclevel-1 tocsection-144"><a href="#Yorick"><span class="tocnumber">142</span> <span class="toctext">Yorick</span></a></li>
<li class="toclevel-1 tocsection-145"><a href="#zkl"><span class="tocnumber">143</span> <span class="toctext">zkl</span></a></li>
<li class="toclevel-1 tocsection-146"><a href="#Zsh"><span class="tocnumber">144</span> <span class="toctext">Zsh</span></a></li>
<li class="toclevel-1 tocsection-147"><a href="#ZX_Spectrum_Basic"><span class="tocnumber">145</span> <span class="toctext">ZX Spectrum Basic</span></a></li>
</ul>
</div>
<h2><span class="mw-headline" id="ACL2"><a href="/wiki/Category:ACL2" title="Category:ACL2">ACL2</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=1" title="Edit section: ACL2">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>This is for lists, not arrays; ACL2's array support is limited.
</p>
<pre class="lisp highlighted_source"><span class="br0">&#40;</span><span class="kw1">append</span> xs ys<span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="ActionScript"><a href="/wiki/Category:ActionScript" title="Category:ActionScript">ActionScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=2" title="Edit section: ActionScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="actionscript highlighted_source"><span class="kw2">var</span> array1:<span class="kw3">Array</span> = <span class="kw2">new</span> <span class="kw3">Array</span><span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#41;</span>;<br/><span class="kw2">var</span> array2:<span class="kw3">Array</span> = <span class="kw2">new</span> <span class="kw3">Array</span><span class="br0">&#40;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#41;</span>;<br/><span class="kw2">var</span> array3:<span class="kw3">Array</span> = array1.<span class="kw3">concat</span><span class="br0">&#40;</span>array2<span class="br0">&#41;</span>; <span class="co1">//[1, 2, 3, 4, 5, 6]</span></pre>
<h2><span class="mw-headline" id="Ada"><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=3" title="Edit section: Ada">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In <a href="/wiki/Ada" title="Ada" class="mw-redirect">Ada</a> arrays are concatenated using the operation &amp;. It works with any one dimensioned array:
</p>
<pre class="ada highlighted_source"><span class="kw3">type</span> T <span class="kw1">is</span> <span class="kw3">array</span> <span class="br0">&#40;</span>Positive <span class="kw3">range</span> &lt;&gt;<span class="br0">&#41;</span> <span class="kw3">of</span> Integer;<br/>X&#160;: T&#160;:= <span class="br0">&#40;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#41;</span>;<br/>Y&#160;: T&#160;:= X &amp; <span class="br0">&#40;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#41;</span>; <span class="co1">-- Concatenate X and (4, 5, 6)</span></pre>
<h2><span class="mw-headline" id="ALGOL_68"><a href="/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=4" title="Edit section: ALGOL 68">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/ALGOL_68" title="ALGOL 68" class="mw-redirect">ALGOL 68</a> version Standard - no extensions to language used</div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/ALGOL_68G" title="ALGOL 68G" class="mw-redirect">ALGOL 68G</a> version Any - tested with release <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/algol68/files/algol68g/algol68g-1.18.0/algol68g-1.18.0-9h.tiny.el5.centos.fc11.i386.rpm/download">1.18.0-9h.tiny</a></div>
<p>Includes operators for <i>appending</i> and <i>prefixing</i> an array to an existing flexible array:
</p>
<pre class="algol68 highlighted_source"><span class="kw4">MODE</span> ARGTYPE <span class="sy1">=</span> <span class="kw3">INT</span><span class="sy1">;</span><br/><span class="kw4">MODE</span> ARGLIST <span class="sy1">=</span> <span class="kw4">FLEX</span><span class="br0">&#91;</span>0<span class="br0">&#93;</span>ARGTYPE<span class="sy1">;</span><br/>&#160;<br/><span class="kw4">OP</span> <span class="sy1">+</span> <span class="sy1">=</span> <span class="br0">&#40;</span>ARGLIST a<span class="sy1">,</span> b<span class="br0">&#41;</span>ARGLIST<span class="sy1">:</span> <span class="br0">&#40;</span><br/>  <span class="br0">&#91;</span><span class="kw8">LWB</span> a<span class="sy1">:</span><span class="kw8">UPB</span> a <span class="sy1">-</span> <span class="kw8">LWB</span> a <span class="sy1">+</span> 1 <span class="sy1">+</span> <span class="kw8">UPB</span> b <span class="sy1">-</span> <span class="kw8">LWB</span> b <span class="sy1">+</span> 1 <span class="br0">&#93;</span>ARGTYPE out<span class="sy1">;</span><br/>  <span class="br0">&#40;</span> <br/>    out<span class="br0">&#91;</span><span class="kw8">LWB</span> a<span class="sy1">:</span><span class="kw8">UPB</span> a<span class="br0">&#93;</span><span class="sy1">:=</span>a<span class="sy1">,</span><br/>    out<span class="br0">&#91;</span><span class="kw8">UPB</span> a<span class="sy1">+</span>1<span class="sy1">:</span><span class="br0">&#93;</span><span class="sy1">:=</span>b<br/>  <span class="br0">&#41;</span><span class="sy1">;</span><br/>  out<br/><span class="br0">&#41;</span><span class="sy1">;</span><br/>&#160;<br/><span class="coMULTI"># Append #</span><br/><span class="kw4">OP</span> <span class="sy1">+:=</span>    <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">REF</span> ARGLIST lhs<span class="sy1">,</span> ARGLIST rhs<span class="br0">&#41;</span>ARGLIST<span class="sy1">:</span> lhs <span class="sy1">:=</span> lhs <span class="sy1">+</span> rhs<span class="sy1">;</span><br/><span class="kw4">OP</span> <span class="kw17">PLUSAB</span> <span class="sy1">=</span> <span class="br0">&#40;</span><span class="kw4">REF</span> ARGLIST lhs<span class="sy1">,</span> ARGLIST rhs<span class="br0">&#41;</span>ARGLIST<span class="sy1">:</span> lhs <span class="sy1">:=</span> lhs <span class="sy1">+</span> rhs<span class="sy1">;</span><br/>&#160;<br/><span class="coMULTI"># Prefix #</span><br/><span class="kw4">OP</span> <span class="sy1">+=:</span>    <span class="sy1">=</span> <span class="br0">&#40;</span>ARGLIST lhs<span class="sy1">,</span> <span class="kw4">REF</span> ARGLIST rhs<span class="br0">&#41;</span>ARGLIST<span class="sy1">:</span> rhs <span class="sy1">:=</span> lhs <span class="sy1">+</span> rhs<span class="sy1">;</span><br/><span class="kw4">OP</span> <span class="kw17">PLUSTO</span> <span class="sy1">=</span> <span class="br0">&#40;</span>ARGLIST lhs<span class="sy1">,</span> <span class="kw4">REF</span> ARGLIST rhs<span class="br0">&#41;</span>ARGLIST<span class="sy1">:</span> rhs <span class="sy1">:=</span> lhs <span class="sy1">+</span> rhs<span class="sy1">;</span><br/>&#160;<br/>ARGLIST a <span class="sy1">:=</span> <span class="br0">&#40;</span>1<span class="sy1">,</span>2<span class="br0">&#41;</span><span class="sy1">,</span><br/>        b <span class="sy1">:=</span> <span class="br0">&#40;</span>3<span class="sy1">,</span>4<span class="sy1">,</span>5<span class="br0">&#41;</span><span class="sy1">;</span><br/>&#160;<br/><span class="kw22">print</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="st0">&quot;a + b&quot;</span><span class="sy1">,</span>a <span class="sy1">+</span> b<span class="sy1">,</span> <span class="kw22">new line</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>&#160;<br/><span class="kw3">VOID</span><span class="br0">&#40;</span>a <span class="sy1">+:=</span> b<span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="kw22">print</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="st0">&quot;a +:= b&quot;</span><span class="sy1">,</span> a<span class="sy1">,</span> <span class="kw22">new line</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>&#160;<br/><span class="kw3">VOID</span><span class="br0">&#40;</span>a <span class="sy1">+=:</span> b<span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="kw22">print</span><span class="br0">&#40;</span><span class="br0">&#40;</span><span class="st0">&quot;a +=: b&quot;</span><span class="sy1">,</span> b<span class="sy1">,</span> <span class="kw22">new line</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre>
<pre>
a + b         +1         +2         +3         +4         +5
a +:= b         +1         +2         +3         +4         +5
a +=: b         +1         +2         +3         +4         +5         +3         +4         +5
</pre>
<h2><span class="mw-headline" id="AntLang"><a href="/wiki/Category:AntLang" title="Category:AntLang">AntLang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=5" title="Edit section: AntLang">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">a:&lt;1; &lt;2; 3&gt;&gt;<br/>b: &lt;&quot;Hello&quot;; 42&gt;<br/>c: a,b</pre>
<h2><span class="mw-headline" id="APL"><a href="/wiki/Category:APL" title="Category:APL">APL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=6" title="Edit section: APL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>    1 2 3 , 4 5 6<br/>1 2 3 4 5 6<br/>&#160;</pre>
<h2><span class="mw-headline" id="Apex"><a href="/wiki/Category:Apex" title="Category:Apex">Apex</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=7" title="Edit section: Apex">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">List&lt;String&gt; listA = new List&lt;String&gt; { 'apple' };<br/>List&lt;String&gt; listB = new List&lt;String&gt; { 'banana' };<br/>listA.addAll(listB);<br/>System.debug(listA); // Prints (apple, banana)</pre>
<h2><span class="mw-headline" id="AppleScript"><a href="/wiki/Category:AppleScript" title="Category:AppleScript">AppleScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=8" title="Edit section: AppleScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="applescript highlighted_source">&#160;<br/><span class="kw3">set</span> listA <span class="kw3">to</span> <span class="br0">&#123;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#125;</span><br/><span class="kw3">set</span> listB <span class="kw3">to</span> <span class="br0">&#123;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#125;</span><br/><span class="kw3">return</span> listA <span class="sy0">&amp;</span> listB<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
{1, 2, 3, 4, 5, 6}
</pre>
<p><br/>
Or, if we treat the concatenation of two lists as a special case of the more general problem of concatenating N lists, we can write:
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#JavaScript">JavaScript</a></div>
<pre class="applescript highlighted_source"><span class="kw3">on</span> <span class="kw1">run</span><br/>&#160;<br/>  concat<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#91;</span><span class="st0">&quot;alpha&quot;</span>, <span class="st0">&quot;beta&quot;</span>, <span class="st0">&quot;gamma&quot;</span><span class="br0">&#93;</span>, ¬<br/>    <span class="br0">&#91;</span><span class="st0">&quot;delta&quot;</span>, <span class="st0">&quot;epsilon&quot;</span>, <span class="st0">&quot;zeta&quot;</span><span class="br0">&#93;</span>, ¬<br/>    <span class="br0">&#91;</span><span class="st0">&quot;eta&quot;</span>, <span class="st0">&quot;theta&quot;</span>, <span class="st0">&quot;iota&quot;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="kw3">end</span> <span class="kw1">run</span><br/>&#160;<br/>&#160;<br/><span class="co1">-- concat&#160;:: [[a]] -&gt; [a]</span><br/><span class="kw3">on</span> concat<span class="br0">&#40;</span>xxs<span class="br0">&#41;</span><br/>  <span class="kw3">set</span> lst <span class="kw3">to</span> <span class="br0">&#123;</span><span class="br0">&#125;</span><br/>  <span class="kw3">repeat</span> <span class="kw3">with</span> xs <span class="kw3">in</span> xxs<br/>    <span class="kw3">set</span> lst <span class="kw3">to</span> lst <span class="sy0">&amp;</span> xs<br/>  <span class="kw3">end</span> <span class="kw3">repeat</span><br/>  <span class="kw3">return</span> lst<br/><span class="kw3">end</span> concat<br/>&#160;<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>{&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;delta&quot;, &quot;epsilon&quot;, &quot;zeta&quot;, &quot;eta&quot;, &quot;theta&quot;, &quot;iota&quot;}</pre>
<h2><span class="mw-headline" id="AutoHotkey"><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=9" title="Edit section: AutoHotkey">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="True_Arrays">True Arrays</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=10" title="Edit section: True Arrays">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/AutoHotkey_L" title="AutoHotkey L" class="mw-redirect">AutoHotkey_L</a></div>
<pre class="ahk highlighted_source">List1 <span class="sy0">:=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/>List2 <span class="sy0">:=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>cList <span class="sy0">:=</span> Arr_concatenate<span class="br0">&#40;</span>List1<span class="sy0">,</span> List2<span class="br0">&#41;</span><br/><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&#160;% Arr_disp<span class="br0">&#40;</span>cList<span class="br0">&#41;</span> <span class="co1">; [1, 2, 3, 4, 5, 6]</span><br/>&#160;<br/>Arr_concatenate<span class="br0">&#40;</span>p<span class="sy0">*</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    res <span class="sy0">:=</span> Object<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>    For each<span class="sy0">,</span> obj in p<br/>        For each<span class="sy0">,</span> value in obj<br/>            res<span class="sy0">.</span><span class="kw6">Insert</span><span class="br0">&#40;</span>value<span class="br0">&#41;</span><br/>    <span class="kw1">return</span> res<br/><span class="br0">&#125;</span><br/>&#160;<br/>Arr_disp<span class="br0">&#40;</span>arr<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    for each<span class="sy0">,</span> value in arr<br/>        res <span class="sy0">.=</span> <span class="st0">&quot;, &quot;</span> value<br/>    <span class="kw1">return</span> <span class="st0">&quot;[&quot;</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">SubStr</span></a><span class="br0">&#40;</span>res<span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span> <span class="st0">&quot;]&quot;</span><br/><span class="br0">&#125;</span></pre>
<h3><span class="mw-headline" id="Legacy_versions">Legacy versions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=11" title="Edit section: Legacy versions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="/wiki/AutoHotkey_Basic" title="AutoHotkey Basic">AutoHotkey_Basic</a> does not have real Arrays, but the user can implement them quite easily. For example:
</p>
<pre class="autohotkey highlighted_source">List1 <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><br/>List2 <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><br/>&#160;<br/>List2Array<span class="br0">&#40;</span>List1 <span class="sy0">,</span> <span class="st0">&quot;Array1_&quot;</span><span class="br0">&#41;</span><br/>List2Array<span class="br0">&#40;</span>List2 <span class="sy0">,</span> <span class="st0">&quot;Array2_&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>ConcatArrays<span class="br0">&#40;</span><span class="st0">&quot;Array1_&quot;</span><span class="sy0">,</span> <span class="st0">&quot;Array2_&quot;</span><span class="sy0">,</span> <span class="st0">&quot;MyArray&quot;</span><span class="br0">&#41;</span><br/><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a><span class="sy0">,</span>&#160;% Array2List<span class="br0">&#40;</span><span class="st0">&quot;MyArray&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>&#160;<br/><span class="co1">;---------------------------------------------------------------------------</span><br/>ConcatArrays<span class="br0">&#40;</span>A1<span class="sy0">,</span> A2<span class="sy0">,</span> A3<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">; concatenates the arrays A1 and A2 to A3</span><br/><span class="co1">;---------------------------------------------------------------------------</span><br/>    local i <span class="sy0">:=</span> <span class="nu0">0</span><br/>    <span class="re0">%A3%</span><span class="nu0">0</span> <span class="sy0">:=</span> <span class="re0">%A1%</span><span class="nu0">0</span> <span class="sy0">+</span> <span class="re0">%A2%</span><span class="nu0">0</span><br/>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span>&#160;% <span class="re0">%A1%</span><span class="nu0">0</span><br/>        i<span class="sy0">++,</span> <span class="re0">%A3%</span><span class="re0">%i%</span> <span class="sy0">:=</span> <span class="re0">%A1%</span><span class="re0">%A_Index%</span><br/>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span>&#160;% <span class="re0">%A2%</span><span class="nu0">0</span><br/>        i<span class="sy0">++,</span> <span class="re0">%A3%</span><span class="re0">%i%</span> <span class="sy0">:=</span> <span class="re0">%A2%</span><span class="re0">%A_Index%</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>&#160;<br/><span class="co1">;---------------------------------------------------------------------------</span><br/>List2Array<span class="br0">&#40;</span>List<span class="sy0">,</span> Array<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">; creates an array from a comma separated list</span><br/><span class="co1">;---------------------------------------------------------------------------</span><br/>    global<br/>    <a href="http://www.autohotkey.com/docs/commands/StringSplit.htm"><span class="kw3">StringSplit</span></a><span class="sy0">,</span> <span class="re0">%Array%</span><span class="sy0">,</span> List<span class="sy0">,</span> `<span class="sy0">,</span><br/><span class="br0">&#125;</span><br/>&#160;<br/>&#160;<br/><span class="co1">;---------------------------------------------------------------------------</span><br/>Array2List<span class="br0">&#40;</span>Array<span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="co1">; returns a comma separated list from an array</span><br/><span class="co1">;---------------------------------------------------------------------------</span><br/>    <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span>&#160;% <span class="re0">%Array%</span><span class="nu0">0</span><br/>        List <span class="sy0">.=</span> <span class="br0">&#40;</span><a href="http://www.autohotkey.com/docs/Variables.htm#A_Index"><span class="kw2">A_Index</span></a> <span class="sy0">=</span> <span class="nu0">1</span>&#160;? <span class="st0">&quot;&quot;</span>&#160;: <span class="st0">&quot;,&quot;</span><span class="br0">&#41;</span> <span class="re0">%Array%</span><span class="re0">%A_Index%</span><br/>    <span class="kw1">Return</span><span class="sy0">,</span> List<br/><span class="br0">&#125;</span></pre>
<p>Message box shows:
</p>
<pre>1,2,3,4,5,6</pre>
<h2><span class="mw-headline" id="AutoIt"><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=12" title="Edit section: AutoIt">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>_ArrayConcatenate is a standard function in Autoit, there´s no need to write it on your own
</p><p><br/>
</p>
<pre class="autoit highlighted_source">&#160;<br/><span class="kw4">_ArrayConcatenate</span><span class="br0">&#40;</span><span class="re0">$avArray</span><span class="sy0">,</span> <span class="re0">$avArray2</span><span class="br0">&#41;</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Func</span></a> <span class="kw4">_ArrayConcatenate</span><span class="br0">&#40;</span><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">ByRef</span></a> <span class="re0">$avArrayTarget</span><span class="sy0">,</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Const</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">ByRef</span></a> <span class="re0">$avArraySource</span><span class="sy0">,</span> <span class="re0">$iStart</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Not</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/IsArray.htm"><span class="kw3">IsArray</span></a><span class="br0">&#40;</span><span class="re0">$avArrayTarget</span><span class="br0">&#41;</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/SetError.htm"><span class="kw3">SetError</span></a><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Not</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/IsArray.htm"><span class="kw3">IsArray</span></a><span class="br0">&#40;</span><span class="re0">$avArraySource</span><span class="br0">&#41;</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/SetError.htm"><span class="kw3">SetError</span></a><span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/UBound.htm"><span class="kw3">UBound</span></a><span class="br0">&#40;</span><span class="re0">$avArrayTarget</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/UBound.htm"><span class="kw3">UBound</span></a><span class="br0">&#40;</span><span class="re0">$avArraySource</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/SetError.htm"><span class="kw3">SetError</span></a><span class="br0">&#40;</span><span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/SetError.htm"><span class="kw3">SetError</span></a><span class="br0">&#40;</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">EndIf</span></a><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/UBound.htm"><span class="kw3">UBound</span></a><span class="br0">&#40;</span><span class="re0">$avArraySource</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/SetError.htm"><span class="kw3">SetError</span></a><span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span><span class="br0">&#41;</span><br/>&#160;<br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Local</span></a> <span class="re0">$iUBoundTarget</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/UBound.htm"><span class="kw3">UBound</span></a><span class="br0">&#40;</span><span class="re0">$avArrayTarget</span><span class="br0">&#41;</span> <span class="sy0">-</span> <span class="re0">$iStart</span><span class="sy0">,</span> <span class="re0">$iUBoundSource</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/UBound.htm"><span class="kw3">UBound</span></a><span class="br0">&#40;</span><span class="re0">$avArraySource</span><span class="br0">&#41;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">ReDim</span></a> <span class="re0">$avArrayTarget</span><span class="br0">&#91;</span><span class="re0">$iUBoundTarget</span> <span class="sy0">+</span> <span class="re0">$iUBoundSource</span><span class="br0">&#93;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="re0">$iStart</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <span class="re0">$iUBoundSource</span> <span class="sy0">-</span> <span class="nu0">1</span><br/>		<span class="re0">$avArrayTarget</span><span class="br0">&#91;</span><span class="re0">$iUBoundTarget</span> <span class="sy0">+</span> <span class="re0">$i</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="re0">$avArraySource</span><span class="br0">&#91;</span><span class="re0">$i</span><span class="br0">&#93;</span><br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br/>&#160;<br/>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <span class="re0">$iUBoundTarget</span> <span class="sy0">+</span> <span class="re0">$iUBoundSource</span><br/><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">EndFunc</span></a>   <span class="co0">;==&gt;_ArrayConcatenate</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="AWK"><a href="/wiki/Category:AWK" title="Category:AWK">AWK</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=13" title="Edit section: AWK">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="awk highlighted_source"><span class="co1">#!/usr/bin/awk -f</span><br/><span class="kw2">BEGIN</span> <span class="br0">&#123;</span><br/>    <span class="kw4">split</span><span class="br0">&#40;</span><span class="st0">&quot;cul-de-sac&quot;</span>,a,<span class="st0">&quot;-&quot;</span><span class="br0">&#41;</span><br/>    <span class="kw4">split</span><span class="br0">&#40;</span><span class="st0">&quot;1-2-3&quot;</span>,b,<span class="st0">&quot;-&quot;</span><span class="br0">&#41;</span><br/>    concat_array<span class="br0">&#40;</span>a,b,c<span class="br0">&#41;</span><br/>&#160;<br/>    <span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="kw1">in</span> c<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        <span class="kw5">print</span> i,c<span class="br0">&#91;</span>i<span class="br0">&#93;</span><br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw6">function</span> concat_array<span class="br0">&#40;</span>a,b,c<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="kw1">in</span> a<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        c<span class="br0">&#91;</span><span class="sy3">++</span>nc<span class="br0">&#93;</span>=a<span class="br0">&#91;</span>i<span class="br0">&#93;</span>	<br/>    <span class="br0">&#125;</span><br/>    <span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="kw1">in</span> b<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>       c<span class="br0">&#91;</span><span class="sy3">++</span>nc<span class="br0">&#93;</span>=b<span class="br0">&#91;</span>i<span class="br0">&#93;</span>	<br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="Babel"><a href="/wiki/Category:Babel" title="Category:Babel">Babel</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=14" title="Edit section: Babel">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">[1 2 3] [4 5 6] cat&#160;;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>[val 0x1 0x2 0x3 0x4 0x5 0x6 ]</pre>
<h2><span class="mw-headline" id="bash"><a href="/wiki/Category:Bash" title="Category:Bash" class="mw-redirect">bash</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=15" title="Edit section: bash">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="bash highlighted_source"><span class="re2">x</span>=<span class="br0">&#40;</span><span class="st0">&quot;1  2&quot;</span> <span class="st0">&quot;3  4&quot;</span><span class="br0">&#41;</span><br/><span class="re2">y</span>=<span class="br0">&#40;</span><span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#41;</span><br/><span class="re2">sum</span>=<span class="br0">&#40;</span> <span class="st0">&quot;<span class="es3">${x[@]}</span>&quot;</span> <span class="st0">&quot;<span class="es3">${y[@]}</span>&quot;</span> <span class="br0">&#41;</span><br/>&#160;<br/><span class="kw1">for</span> i <span class="kw1">in</span> <span class="st0">&quot;<span class="es3">${sum[@]}</span>&quot;</span>&#160;; <span class="kw1">do</span> <span class="kw3">echo</span> <span class="st0">&quot;<span class="es2">$i</span>&quot;</span>&#160;; <span class="kw1">done</span><br/><span class="nu0">1</span>  <span class="nu0">2</span><br/><span class="nu0">3</span>  <span class="nu0">4</span><br/><span class="nu0">5</span><br/><span class="nu0">6</span></pre>
<h2><span class="mw-headline" id="BBC_BASIC"><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=16" title="Edit section: BBC BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/BBC_BASIC_for_Windows" title="BBC BASIC for Windows">BBC BASIC for Windows</a></div>
<pre class="text highlighted_source">      DIM a(3), b(4)<br/>      a() = 1, 2, 3, 4<br/>      b() = 5, 6, 7, 8, 9<br/>      PROCconcat(a(), b(), c())<br/>&#160;<br/>      FOR i% = 0 TO DIM(c(),1)<br/>        PRINT c(i%)<br/>      NEXT<br/>      END<br/>&#160;<br/>      DEF PROCconcat(a(), b(), RETURN c())<br/>      LOCAL s%, na%, nb%<br/>      s% = ^a(1) - ^a(0)&#160;: REM Size of each array element<br/>      na% = DIM(a(),1)+1&#160;: REM Number of elements in a()<br/>      nb% = DIM(b(),1)+1&#160;: REM Number of elements in b()<br/>      DIM c(na%+nb%-1)<br/>      SYS &quot;RtlMoveMemory&quot;, ^c(0), ^a(0), s%*na%<br/>      SYS &quot;RtlMoveMemory&quot;, ^c(na%), ^b(0), s%*nb%<br/>      ENDPROC</pre>
<h2><span class="mw-headline" id="Bracmat"><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=17" title="Edit section: Bracmat">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Bracmat concatenates lists composed with the comma, space, addition and multiplication operators. Furthermore, lists composed with the addition and multiplication operators are canonically sorted and like terms or factors are combined algebraically. Lists composed with the space operator automatically delete any elements with zero-length atoms and no prefixes. All these lists except the comma-separated list support a notion of 'array index', but as the underlying datastructure is a linked list and not an array, accessing, say, the millionth element can be slow. Examples of concatenation (entered on the Bracmat command line):
</p>
<pre>{?} (a,b,c,d,e),(n,m)
{!} a,b,c,d,e,n,m
{?} (a,m,y),(b,n,y,z)
{!} a,m,y,b,n,y,z
{?} (a m y) (b n y z)
{!} a m y b n y z
{?} (a+m+y)+(b+n+y+z)
{!} a+b+m+n+2*y+z
{?} (a*m*y)*(b*n*y*z)
{!} a*b*m*n*y^2*z</pre>
<p>Concatenate three lists and split the concatenated list using a position operator:
</p>
<pre>{?} (a b c d) (e f g h) (i j k):?A [7&#160;?Z
{!} a b c d e f g h i j k
{?}&#160;!A
{!} a b c d e f g
{?}&#160;!Z
{!} h i j k</pre>
<h2><span class="mw-headline" id="Burlesque"><a href="/wiki/Category:Burlesque" title="Category:Burlesque">Burlesque</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=18" title="Edit section: Burlesque">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>blsq ) {1 2 3}{4 5 6}_+<br/>{1 2 3 4 5 6}<br/>&#160;</pre>
<h2><span class="mw-headline" id="C"><a href="/wiki/Category:C" title="Category:C">C</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=19" title="Edit section: C">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A way to concatenate two C arrays when you know their size (and usually so it is)
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;stdlib.h&gt;</span><br/><span class="co2">#include &lt;stdio.h&gt;</span><br/><span class="co2">#include &lt;string.h&gt;</span><br/>&#160;<br/><span class="co2">#define ARRAY_CONCAT(TYPE, A, An, B, Bn) \<br/>  (TYPE *)array_concat((const void *)(A), (An), (const void *)(B), (Bn), sizeof(TYPE));</span><br/>&#160;<br/><span class="kw4">void</span> <span class="sy0">*</span>array_concat<span class="br0">&#40;</span><span class="kw4">const</span> <span class="kw4">void</span> <span class="sy0">*</span>a<span class="sy0">,</span> <span class="kw4">size_t</span> an<span class="sy0">,</span><br/>                   <span class="kw4">const</span> <span class="kw4">void</span> <span class="sy0">*</span>b<span class="sy0">,</span> <span class="kw4">size_t</span> bn<span class="sy0">,</span> <span class="kw4">size_t</span> s<span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>  <span class="kw4">char</span> <span class="sy0">*</span>p <span class="sy0">=</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/malloc.html"><span class="kw3">malloc</span></a><span class="br0">&#40;</span>s <span class="sy0">*</span> <span class="br0">&#40;</span>an <span class="sy0">+</span> bn<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>  <a href="http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html"><span class="kw3">memcpy</span></a><span class="br0">&#40;</span>p<span class="sy0">,</span> a<span class="sy0">,</span> an<span class="sy0">*</span>s<span class="br0">&#41;</span><span class="sy0">;</span><br/>  <a href="http://www.opengroup.org/onlinepubs/009695399/functions/memcpy.html"><span class="kw3">memcpy</span></a><span class="br0">&#40;</span>p <span class="sy0">+</span> an<span class="sy0">*</span>s<span class="sy0">,</span> b<span class="sy0">,</span> bn<span class="sy0">*</span>s<span class="br0">&#41;</span><span class="sy0">;</span><br/>  <span class="kw1">return</span> p<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="co1">// testing</span><br/><span class="kw4">const</span> <span class="kw4">int</span> a<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/><span class="kw4">const</span> <span class="kw4">int</span> b<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="kw4">void</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>  <span class="kw4">unsigned</span> <span class="kw4">int</span> i<span class="sy0">;</span><br/>&#160;<br/>  <span class="kw4">int</span> <span class="sy0">*</span>c <span class="sy0">=</span> ARRAY_CONCAT<span class="br0">&#40;</span><span class="kw4">int</span><span class="sy0">,</span> a<span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> b<span class="sy0">,</span> <span class="nu0">5</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>  <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span><br/>    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> c<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>  <a href="http://www.opengroup.org/onlinepubs/009695399/functions/free.html"><span class="kw3">free</span></a><span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="sy0">;</span><br/>  <span class="kw1">return</span> EXIT_SUCCCESS<span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="C.2B.2B"><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=20" title="Edit section: C++">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;vector&gt;</span><br/><span class="co2">#include &lt;iostream&gt;</span><br/>&#160;<br/><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> a<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span>, b<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>  a<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">11</span><span class="sy4">;</span> a<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">12</span><span class="sy4">;</span> a<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">13</span><span class="sy4">;</span><br/>  b<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">21</span><span class="sy4">;</span> b<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">22</span><span class="sy4">;</span> b<span class="br0">&#91;</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">23</span><span class="sy4">;</span> b<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy1">=</span> <span class="nu0">24</span><span class="sy4">;</span><br/>&#160;<br/>  a.<span class="me1">insert</span><span class="br0">&#40;</span>a.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, b.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, b.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>&#160;<br/>  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span> i <span class="sy1">&lt;</span> a.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy4">;</span> <span class="sy2">++</span>i<span class="br0">&#41;</span><br/>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;a[&quot;</span> <span class="sy1">&lt;&lt;</span> i <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;] = &quot;</span> <span class="sy1">&lt;&lt;</span> a<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy1">&lt;&lt;</span> <span class="st0">&quot;<span class="es1">\n</span>&quot;</span><span class="sy4">;</span><br/><span class="br0">&#125;</span></pre>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/C%2B%2B11" title="C++11" class="mw-redirect">C++11</a></div>
<p>Similar to above but using initialization schematics.
</p>
<pre class="cpp highlighted_source"><span class="co2">#include &lt;vector&gt;                                                                                                       </span><br/><span class="co2">#include &lt;iostream&gt;</span><br/>&#160;<br/><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> a <span class="br0">&#123;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span>, <span class="nu0">4</span><span class="br0">&#125;</span><span class="sy4">;</span><br/>  std<span class="sy4">::</span><span class="me2">vector</span><span class="sy1">&lt;</span><span class="kw4">int</span><span class="sy1">&gt;</span> b <span class="br0">&#123;</span><span class="nu0">5</span>, <span class="nu0">6</span>, <span class="nu0">7</span>, <span class="nu0">8</span>, <span class="nu0">9</span><span class="br0">&#125;</span><span class="sy4">;</span><br/>&#160;<br/>  a.<span class="me1">insert</span><span class="br0">&#40;</span>a.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, b.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>, b.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy4">;</span><br/>&#160;<br/>  <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="sy3">&amp;</span> i<span class="sy4">:</span> a<span class="br0">&#41;</span> std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> i <span class="sy1">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy4">;</span><br/>  std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br/>  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="C.23"><a href="/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=21" title="Edit section: C#">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="csharp highlighted_source"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw1">namespace</span> RosettaCode<br/><span class="br0">&#123;</span><br/>    <span class="kw4">class</span> Program<br/>    <span class="br0">&#123;</span><br/>        <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span><br/>        <span class="br0">&#123;</span><br/>            <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>            <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> b <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/>            <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> c <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> <span class="kw4">int</span><span class="br0">&#91;</span>a<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">+</span> b<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>            a<span class="sy0">.</span><span class="me1">CopyTo</span><span class="br0">&#40;</span>c, <span class="nu0">0</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>            b<span class="sy0">.</span><span class="me1">CopyTo</span><span class="br0">&#40;</span>c, a<span class="sy0">.</span><span class="me1">Length</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>            <span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw4">int</span> n <span class="kw1">in</span> c<span class="br0">&#41;</span><br/>            <span class="br0">&#123;</span><br/>                Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">&#40;</span>n<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>            <span class="br0">&#125;</span><br/>        <span class="br0">&#125;</span><br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span></pre>
<p>Alternatively, using LINQ extension methods:
</p>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/C_sharp" title="C sharp" class="mw-redirect">C#</a> version 3</div>
<pre class="csharp highlighted_source"><span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span><br/>&#160;<br/><span class="kw4">class</span> Program<br/><span class="br0">&#123;</span><br/>    <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">&#40;</span><span class="kw4">string</span><span class="br0">&#91;</span><span class="br0">&#93;</span> args<span class="br0">&#41;</span><br/>    <span class="br0">&#123;</span><br/>        <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>        <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> b <span class="sy0">=</span> <span class="br0">&#123;</span> <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span> <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/>        <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> c <span class="sy0">=</span> a<span class="sy0">.</span><span class="me1">Concat</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="Ceylon"><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=22" title="Edit section: Ceylon">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">shared void arrayConcatenation() {<br/>	value a = Array {1, 2, 3};<br/>	value b = Array {4, 5, 6};<br/>	value c = concatenate(a, b);<br/>	print(c);<br/>}</pre>
<h2><span class="mw-headline" id="Clojure"><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=23" title="Edit section: Clojure">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="clojure highlighted_source"><span class="br0">&#40;</span><span class="kw1">concat</span> <span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre>
<p>The inputs can be any collection, including Java arrays, and returns a lazy sequence of the elements.
</p><p>A vector is the closest Clojure thing to an array. If a vector is wanted, then use
</p>
<pre class="clojure highlighted_source"><span class="br0">&#40;</span><span class="kw1">into</span> <span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="COBOL"><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=24" title="Edit section: COBOL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="cobol highlighted_source">       <span class="kw3">identification</span> <span class="kw3">division</span><span class="sy0">.</span><br/>       <span class="kw3">program-id</span><span class="sy0">.</span> array-concat<span class="sy0">.</span><br/>&#160;<br/>       environment <span class="kw3">division</span><span class="sy0">.</span><br/>       <span class="kw3">configuration</span> <span class="kw1">section</span><span class="sy0">.</span><br/>       repository<span class="sy0">.</span><br/>           <span class="kw3">function</span> <span class="kw3">all</span> intrinsic<span class="sy0">.</span><br/>&#160;<br/>       <span class="kw3">data</span> <span class="kw3">division</span><span class="sy0">.</span><br/>       <span class="kw3">working-storage</span> <span class="kw1">section</span><span class="sy0">.</span><br/>       <span class="nu0">01</span> table-one<span class="sy0">.</span><br/>          <span class="nu0">05</span> int-field <span class="kw3">pic</span> <span class="nu0">999</span> <span class="kw3">occurs</span> <span class="nu0">0</span> <span class="kw2">to</span> <span class="nu0">5</span> <span class="kw3">depending</span> <span class="kw3">on</span> t1<span class="sy0">.</span><br/>       <span class="nu0">01</span> table-two<span class="sy0">.</span><br/>          <span class="nu0">05</span> int-field <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw3">occurs</span> <span class="nu0">0</span> <span class="kw2">to</span> <span class="nu0">10</span> <span class="kw3">depending</span> <span class="kw3">on</span> t2<span class="sy0">.</span><br/>&#160;<br/>       <span class="nu0">77</span> t1           <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>       <span class="nu0">77</span> t2           <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br/>&#160;<br/>       <span class="nu0">77</span> show         <span class="kw3">pic</span> z<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">.</span><br/>&#160;<br/>       <span class="kw3">procedure</span> <span class="kw3">division</span><span class="sy0">.</span><br/>       array-concat-<span class="kw1">main</span><span class="sy0">.</span><br/>       <span class="kw2">perform</span> initialize-tables<br/>       <span class="kw2">perform</span> concatenate-tables<br/>       <span class="kw2">perform</span> display-result<br/>       goback<span class="sy0">.</span><br/>&#160;<br/>       initialize-tables<span class="sy0">.</span><br/>           <span class="kw2">move</span> <span class="nu0">4</span> <span class="kw2">to</span> t1<br/>           <span class="kw2">perform</span> <span class="kw2">varying</span> tally <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> tally &gt; t1<br/>               <span class="kw2">compute</span> int-field <span class="kw3">of</span> table-one<span class="br0">&#40;</span>tally<span class="br0">&#41;</span> <span class="sy0">=</span> tally<span class="sy0"> * </span><span class="nu0">3</span><br/>           end-<span class="kw2">perform</span><br/>&#160;<br/>           <span class="kw2">move</span> <span class="nu0">3</span> <span class="kw2">to</span> t2<br/>           <span class="kw2">perform</span> <span class="kw2">varying</span> tally <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> tally &gt; t2<br/>               <span class="kw2">compute</span> int-field <span class="kw3">of</span> table-two<span class="br0">&#40;</span>tally<span class="br0">&#41;</span> <span class="sy0">=</span> tally<span class="sy0"> * </span><span class="nu0">6</span><br/>           end-<span class="kw2">perform</span><br/>       <span class="sy0">.</span><br/>&#160;<br/>       concatenate-tables<span class="sy0">.</span><br/>           <span class="kw2">perform</span> <span class="kw2">varying</span> tally <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> tally &gt; t1<br/>               <span class="kw2">add</span> <span class="nu0">1</span> <span class="kw2">to</span> t2<br/>               <span class="kw2">move</span> int-field <span class="kw3">of</span> table-one<span class="br0">&#40;</span>tally<span class="br0">&#41;</span><br/>                 <span class="kw2">to</span> int-field <span class="kw3">of</span> table-two<span class="br0">&#40;</span>t2<span class="br0">&#41;</span><br/>           end-<span class="kw2">perform</span><br/>       <span class="sy0">.</span><br/>&#160;<br/>       display-result<span class="sy0">.</span><br/>           <span class="kw2">perform</span> <span class="kw2">varying</span> tally <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> <span class="nu0">1</span> <span class="kw2">until</span> tally <span class="sy0">=</span> t2<br/>               <span class="kw2">move</span> int-field <span class="kw3">of</span> table-two<span class="br0">&#40;</span>tally<span class="br0">&#41;</span> <span class="kw2">to</span> show<br/>               <span class="kw2">display</span> trim<span class="br0">&#40;</span>show<span class="br0">&#41;</span> <span class="st0">&quot;, &quot;</span> <span class="kw3">with</span> <span class="kw3">no</span> <span class="kw3">advancing</span><br/>           end-<span class="kw2">perform</span><br/>           <span class="kw2">move</span> int-field <span class="kw3">of</span> table-two<span class="br0">&#40;</span>tally<span class="br0">&#41;</span> <span class="kw2">to</span> show<br/>           <span class="kw2">display</span> trim<span class="br0">&#40;</span>show<span class="br0">&#41;</span><br/>       <span class="sy0">.</span><br/>&#160;<br/>       <span class="kw3">end</span> <span class="kw3">program</span> array-concat<span class="sy0">.</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>prompt$ cobc -xjd array-concatenation.cob
6, 12, 18, 3, 6, 9, 12
</pre>
<h2><span class="mw-headline" id="CoffeeScript"><a href="/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=25" title="Edit section: CoffeeScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="coffeescript highlighted_source">&#160;<br/><span class="co1"># like in JavaScript</span><br/>a = <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/>b = <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>c = a.<span class="me1">concat</span> b<br/>&#160;</pre>
<h2><span class="mw-headline" id="Common_Lisp"><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=26" title="Edit section: Common Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p><code><a rel="nofollow" class="external text" href="http://www.lispworks.com/documentation/HyperSpec/Body/f_concat.htm">concatenate</a></code> is a general function for concatenating any type of sequence. It takes the type of sequence to produce, followed by any number of sequences of any type.
</p>
<pre class="lisp highlighted_source"><span class="br0">&#40;</span>concatenate 'vector #<span class="br0">&#40;</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#41;</span> #<span class="br0">&#40;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  <span class="sy0">=&gt;</span> #<span class="br0">&#40;</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span><span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="Component_Pascal"><a href="/wiki/Category:Component_Pascal" title="Category:Component Pascal">Component Pascal</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=27" title="Edit section: Component Pascal">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>BlackBox Component Builder
</p>
<pre class="oberon2 highlighted_source">&#160;<br/><span class="kw1">MODULE</span> ArrayConcat;<br/><span class="kw1">IMPORT</span> StdLog;<br/>&#160;<br/><span class="kw1">PROCEDURE</span> Concat<span class="br0">&#40;</span>x<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>; y<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>; OUT z<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span><span class="br0">&#41;</span>;<br/><span class="kw1">VAR</span><br/>	i<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">BEGIN</span><br/>	<span class="kw3">ASSERT</span><span class="br0">&#40;</span><span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span> &lt;<span class="sy0">=</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>z<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> x<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span>;<br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">:=</span> y<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span><br/><span class="kw1">END</span> Concat;<br/>&#160;<br/><span class="kw1">PROCEDURE</span> Concat2<span class="br0">&#40;</span>x<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;y<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span><span class="br0">&#41;</span><span class="sy0">:</span> <span class="kw1">POINTER</span> <span class="kw1">TO</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">VAR</span><br/>	z<span class="sy0">:</span> <span class="kw1">POINTER</span> <span class="kw1">TO</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/>	i<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">BEGIN</span><br/>	<span class="kw3">NEW</span><span class="br0">&#40;</span>z<span class="sy0">,</span><span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> x<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span>;<br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">:=</span> y<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span>;<br/>	<span class="kw1">RETURN</span> z;<br/><span class="kw1">END</span> Concat2;<br/>&#160;<br/><span class="kw1">PROCEDURE</span> ShowArray<span class="br0">&#40;</span>x<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span><span class="br0">&#41;</span>;<br/><span class="kw1">VAR</span><br/>	i<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">BEGIN</span><br/>	i <span class="sy0">:=</span> <span class="nu0">0</span>;<br/>	StdLog.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">'['</span><span class="br0">&#41;</span>;<br/>	<span class="kw1">WHILE</span> <span class="br0">&#40;</span>i &lt; <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">DO</span><br/>		StdLog.<span class="me1">Int</span><span class="br0">&#40;</span>x<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span>;<span class="kw1">IF</span> i &lt; <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">THEN</span> StdLog.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">','</span><span class="br0">&#41;</span> <span class="kw1">END</span>;<br/>		<span class="kw3">INC</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>	<span class="kw1">END</span>;<br/>	StdLog.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">']'</span><span class="br0">&#41;</span>;StdLog.<span class="me1">Ln</span>;<br/><span class="kw1">END</span> ShowArray;<br/>&#160;<br/><span class="kw1">PROCEDURE</span> Do<span class="sy0">*</span>;<br/><span class="kw1">VAR</span><br/>	x<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="nu0">10</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/>	y<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="nu0">15</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/>	z<span class="sy0">:</span> <span class="kw1">ARRAY</span> <span class="nu0">25</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/>	w<span class="sy0">:</span> <span class="kw1">POINTER</span> <span class="kw1">TO</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/>	i<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">BEGIN</span><br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> x<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> i <span class="kw1">END</span>;<br/>	<span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> y<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> i <span class="kw1">END</span>;<br/>	Concat<span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">,</span>z<span class="br0">&#41;</span>;StdLog.<span class="me1">String</span><span class="br0">&#40;</span><span class="st0">&quot;1&gt; &quot;</span><span class="br0">&#41;</span>;ShowArray<span class="br0">&#40;</span>z<span class="br0">&#41;</span>;<br/>&#160;<br/>	<span class="kw3">NEW</span><span class="br0">&#40;</span>w<span class="sy0">,</span><span class="kw3">LEN</span><span class="br0">&#40;</span>x<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>	Concat<span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">,</span>z<span class="br0">&#41;</span>;StdLog.<span class="me1">String</span><span class="br0">&#40;</span><span class="st0">&quot;2:&gt; &quot;</span><span class="br0">&#41;</span>;ShowArray<span class="br0">&#40;</span>z<span class="br0">&#41;</span>;<br/>&#160;<br/>	StdLog.<span class="me1">String</span><span class="br0">&#40;</span><span class="st0">&quot;3:&gt; &quot;</span><span class="br0">&#41;</span>;ShowArray<span class="br0">&#40;</span>Concat2<span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/><span class="kw1">END</span> Do;<br/>&#160;<br/><span class="kw1">END</span> ArrayConcat.<br/>&#160;</pre>
<p>Execute: ^Q ArrayConcat.Do <br/>
</p>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
1&gt; [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
2:&gt; [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
3:&gt; [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

</pre>
<h2><span class="mw-headline" id="D"><a href="/wiki/Category:D" title="Category:D">D</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=28" title="Edit section: D">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">:</span> writeln<span class="sy0">;</span><br/>&#160;<br/><span class="kw4">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>    <span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> b <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>    writeln<span class="br0">&#40;</span>a<span class="sy0">,</span> <span class="st0">&quot; ~ &quot;</span><span class="sy0">,</span> b<span class="sy0">,</span> <span class="st0">&quot; = &quot;</span><span class="sy0">,</span> a <span class="sy0">~</span> b<span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>[1, 2] ~ [4, 5, 6] = [1, 2, 4, 5, 6]</pre>
<h2><span class="mw-headline" id="Delphi"><a href="/wiki/Category:Delphi" title="Category:Delphi">Delphi</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=29" title="Edit section: Delphi">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="delphi highlighted_source"><span class="kw1">type</span><br/>  TReturnArray <span class="sy3">=</span> <span class="kw1">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span> <span class="co1">//you need to define a type to be able to return it</span><br/>&#160;<br/><span class="kw1">function</span> ConcatArray<span class="br0">&#40;</span>a1<span class="sy1">,</span>a2<span class="sy1">:</span><span class="kw1">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="br0">&#41;</span><span class="sy1">:</span>TReturnArray<span class="sy1">;</span><br/><span class="kw1">var</span><br/>  i<span class="sy1">,</span>r<span class="sy1">:</span><span class="kw4">integer</span><span class="sy1">;</span><br/><span class="kw1">begin</span><br/>  <span class="coMULTI">{ Low(array) is not necessarily 0 }</span><br/>  <span class="kw3">SetLength</span><span class="br0">&#40;</span>result<span class="sy1">,</span><span class="kw3">High</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span><span class="sy3">-</span><span class="kw3">Low</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span><span class="sy3">+</span><span class="kw3">High</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span><span class="sy3">-</span><span class="kw3">Low</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span><span class="sy3">+</span><span class="nu0">2</span><span class="br0">&#41;</span><span class="sy1">;</span> <span class="co1">//BAD idea to set a length you won't release, just to show the idea!</span><br/>  r<span class="sy1">:</span><span class="sy3">=</span><span class="nu0">0</span><span class="sy1">;</span> <span class="co1">//index on the result may be different to indexes on the sources</span><br/>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">Low</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span> <span class="kw1">to</span> <span class="kw3">High</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span> <span class="kw1">do</span> <span class="kw1">begin</span><br/>    result<span class="br0">&#91;</span>r<span class="br0">&#93;</span> <span class="sy1">:</span><span class="sy3">=</span> a1<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy1">;</span><br/>    <span class="kw3">Inc</span><span class="br0">&#40;</span>r<span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw1">end</span><span class="sy1">;</span><br/>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">Low</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span> <span class="kw1">to</span> <span class="kw3">High</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span> <span class="kw1">do</span> <span class="kw1">begin</span><br/>    result<span class="br0">&#91;</span>r<span class="br0">&#93;</span> <span class="sy1">:</span><span class="sy3">=</span> a2<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy1">;</span><br/>    <span class="kw3">Inc</span><span class="br0">&#40;</span>r<span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw1">end</span><span class="sy1">;</span><br/><span class="kw1">end</span><span class="sy1">;</span><br/>&#160;<br/><span class="kw1">procedure</span> TForm1<span class="sy1">.</span><span class="me1">Button1Click</span><span class="br0">&#40;</span>Sender<span class="sy1">:</span> <span class="kw4">TObject</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="kw1">var</span><br/>  a1<span class="sy1">,</span>a2<span class="sy1">:</span><span class="kw1">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span><br/>  r1<span class="sy1">:</span><span class="kw1">array</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span><br/>  i<span class="sy1">:</span><span class="kw4">integer</span><span class="sy1">;</span><br/><span class="kw1">begin</span><br/>  <span class="kw3">SetLength</span><span class="br0">&#40;</span>a1<span class="sy1">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw3">SetLength</span><span class="br0">&#40;</span>a2<span class="sy1">,</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">Low</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span> <span class="kw1">to</span> <span class="kw3">High</span><span class="br0">&#40;</span>a1<span class="br0">&#41;</span> <span class="kw1">do</span><br/>    a1<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy1">:</span><span class="sy3">=</span> i<span class="sy1">;</span><br/>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">Low</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span> <span class="kw1">to</span> <span class="kw3">High</span><span class="br0">&#40;</span>a2<span class="br0">&#41;</span> <span class="kw1">do</span><br/>    a2<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy1">:</span><span class="sy3">=</span> i<span class="sy1">;</span><br/>  TReturnArray<span class="br0">&#40;</span>r1<span class="br0">&#41;</span> <span class="sy1">:</span><span class="sy3">=</span> ConcatArray<span class="br0">&#40;</span>a1<span class="sy1">,</span>a2<span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">Low</span><span class="br0">&#40;</span>r1<span class="br0">&#41;</span> <span class="kw1">to</span> <span class="kw3">High</span><span class="br0">&#40;</span>r1<span class="br0">&#41;</span> <span class="kw1">do</span><br/>    showMessage<span class="br0">&#40;</span><span class="kw3">IntToStr</span><span class="br0">&#40;</span>r1<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/>  <span class="kw3">Finalize</span><span class="br0">&#40;</span>r1<span class="br0">&#41;</span><span class="sy1">;</span> <span class="co1">//IMPORTANT!</span><br/>  ShowMessage<span class="br0">&#40;</span><span class="kw3">IntToStr</span><span class="br0">&#40;</span><span class="kw3">High</span><span class="br0">&#40;</span>r1<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy1">;</span><br/><span class="kw1">end</span><span class="sy1">;</span></pre>
<h2><span class="mw-headline" id="E"><a href="/wiki/Category:E" title="Category:E">E</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=30" title="Edit section: E">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="e highlighted_source"><span class="sy0">?</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">&#93;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#93;</span><br/><span class="co1"># value: [1, 2, 3, 4]</span></pre>
<h2><span class="mw-headline" id="EchoLisp"><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=31" title="Edit section: EchoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The native operators are <b>append</b> for lists, and <b>vector-append</b> for vectors (1-dim arrays).
</p>
<pre class="scheme highlighted_source">&#160;<br/><span class="co1">;;;; VECTORS</span><br/><span class="br0">&#40;</span>vector<span class="sy0">-</span><span class="kw1">append</span> <span class="br0">&#40;</span><span class="kw1">make-vector</span> <span class="nu0">6</span> <span class="nu0">42</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><span class="kw1">make-vector</span> <span class="nu0">4</span> <span class="nu0">666</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    → #<span class="br0">&#40;</span> <span class="nu0">42</span> <span class="nu0">42</span> <span class="nu0">42</span> <span class="nu0">42</span> <span class="nu0">42</span> <span class="nu0">42</span> <span class="nu0">666</span> <span class="nu0">666</span> <span class="nu0">666</span> <span class="nu0">666</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">;;;; LISTS</span><br/><span class="br0">&#40;</span><span class="kw1">append</span> <span class="br0">&#40;</span>iota <span class="nu0">5</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>iota <span class="nu0">6</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>   → <span class="br0">&#40;</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="co1">;; NB - append may also be used with sequences (lazy lists)</span><br/><span class="br0">&#40;</span>lib 'sequences<span class="br0">&#41;</span><br/>   <span class="br0">&#40;</span>take <span class="br0">&#40;</span><span class="kw1">append</span> <span class="br0">&#91;</span><span class="nu0">1</span> .. <span class="nu0">7</span><span class="br0">&#93;</span> <span class="br0">&#91;</span><span class="nu0">7</span> <span class="nu0">6</span> .. <span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span> #:all<span class="br0">&#41;</span><br/>   → <span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">6</span> <span class="nu0">5</span> <span class="nu0">4</span> <span class="nu0">3</span> <span class="nu0">2</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>&#160;<br/>&#160;<br/>&#160;</pre>
<h2><span class="mw-headline" id="ECL"><a href="/wiki/Category:ECL" title="Category:ECL">ECL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=32" title="Edit section: ECL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>   A&#160;:= [1, 2, 3, 4];<br/>   B&#160;:= [5, 6, 7, 8];<br/>&#160;<br/>   C&#160;:= A + B;</pre>
<h2><span class="mw-headline" id="Efene"><a href="/wiki/Category:Efene" title="Category:Efene">Efene</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=33" title="Edit section: Efene">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>using the ++ operator and the lists.append function
</p>
<pre class="text highlighted_source">&#160;<br/>@public<br/>run = fn () {<br/>    A = [1, 2, 3, 4]<br/>    B = [5, 6, 7, 8]<br/>&#160;<br/>    C = A ++ B<br/>    D = lists.append([A, B])<br/>&#160;<br/>    io.format(&quot;~p~n&quot;, [C])<br/>    io.format(&quot;~p~n&quot;, [D])<br/>}</pre>
<h2><span class="mw-headline" id="EGL"><a href="/wiki/Category:EGL" title="Category:EGL">EGL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=34" title="Edit section: EGL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/EDT" title="EDT">EDT</a></div>
<pre class="text highlighted_source">&#160;<br/>program ArrayConcatenation<br/>    function main()<br/>        a int[] = [ 1, 2, 3 ];<br/>	b int[] = [ 4, 5, 6 ];<br/>	c int[];<br/>	c.appendAll(a);<br/>	c.appendAll(b);<br/>&#160;<br/>	for (i int from 1 to c.getSize())<br/>	    SysLib.writeStdout(&quot;Element &quot;&#160;:: i&#160;:: &quot; = &quot;&#160;:: c[i]);<br/>	end<br/>    end<br/>end<br/>&#160;</pre>
<h2><span class="mw-headline" id="Ela"><a href="/wiki/Category:Ela" title="Category:Ela">Ela</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=35" title="Edit section: Ela">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">xs = [1,2,3]<br/>ys = [4,5,6]<br/>xs ++ ys</pre>
<div>
<dl><dt>Output:</div><pre>[1,2,3,4,5,6]</pre></dt></dl>
<h2><span class="mw-headline" id="Elena"><a href="/wiki/Category:Elena" title="Category:Elena">Elena</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=36" title="Edit section: Elena">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">#define system.<br/>#define extensions.<br/>&#160;<br/>#symbol program =<br/>[<br/>    #var a&#160;:= (1,2,3).<br/>    #var b&#160;:= (4,5).<br/>&#160;<br/>    console writeLine:&quot;(&quot;:a:&quot;) + (&quot;:b:&quot;) = (&quot;:(a + b):&quot;)&quot;.<br/>].</pre>
<h2><span class="mw-headline" id="Elixir"><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=37" title="Edit section: Elixir">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">iex(1)&gt; [1, 2, 3] ++ [4, 5, 6]<br/>[1, 2, 3, 4, 5, 6]<br/>iex(2)&gt; Enum.concat([[1, [2], 3], [4], [5, 6]])<br/>[1, [2], 3, 4, 5, 6]<br/>iex(3)&gt; Enum.concat([1..3, [4,5,6], 7..9])<br/>[1, 2, 3, 4, 5, 6, 7, 8, 9]</pre>
<h2><span class="mw-headline" id="Elm"><a href="/wiki/Category:Elm" title="Category:Elm">Elm</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=38" title="Edit section: Elm">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">import Element exposing (show, toHtml)  -- elm-package install evancz/elm-graphics<br/>import Html.App exposing (beginnerProgram)<br/>import Array exposing (Array, append, initialize)<br/>&#160;<br/>&#160;<br/>xs&#160;: Array Int<br/>xs =<br/>  initialize 3 identity  -- [0, 1, 2]<br/>&#160;<br/>ys&#160;: Array Int<br/>ys =<br/>  initialize 3 &lt;| (+) 3  -- [3, 4, 5]<br/>&#160;<br/>main = beginnerProgram { model = () <br/>                       , view = \_ -&gt; toHtml (show (append xs ys))<br/>                       , update = \_ _ -&gt; ()<br/>                       }<br/>&#160;<br/>-- Array.fromList [0,1,2,3,4,5]</pre>
<h2><span class="mw-headline" id="Emacs_Lisp"><a href="/wiki/Category:Emacs_Lisp" title="Category:Emacs Lisp">Emacs Lisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=39" title="Edit section: Emacs Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The <i>vconcat</i> function returns a new array containing all the elements of it's arguments.
</p>
<pre class="lisp highlighted_source"><span class="br0">&#40;</span>vconcat '<span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#93;</span> '<span class="br0">&#91;</span><span class="nu0">4</span> <span class="nu0">5</span><span class="br0">&#93;</span> '<span class="br0">&#91;</span><span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><span class="br0">&#93;</span><span class="br0">&#41;</span><br/><span class="sy0">=&gt;</span> <span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><span class="br0">&#93;</span></pre>
<h2><span class="mw-headline" id="Erlang"><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=40" title="Edit section: Erlang">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In erlang, you can use the ++ operator or lists:append, which is implemented via ++.
</p><p>On the shell,
</p>
<pre class="erlang highlighted_source">&#160;<br/><span class="nu0">1</span><span class="sy3">&gt;</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy3">++</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy1">,</span> <span class="nu0">5</span><span class="sy1">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="sy1">.</span><br/><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy1">,</span><span class="nu0">2</span><span class="sy1">,</span><span class="nu0">3</span><span class="sy1">,</span><span class="nu0">4</span><span class="sy1">,</span><span class="nu0">5</span><span class="sy1">,</span><span class="nu0">6</span><span class="br0">&#93;</span><br/><span class="nu0">2</span><span class="sy3">&gt;</span> <a href="http://erlang.org/doc/man/lists.html"><span class="kw5">lists</span></a>:<span class="re3">append</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="br0">&#93;</span><span class="sy1">,</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy1">,</span> <span class="nu0">5</span><span class="sy1">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy1">.</span><br/><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy1">,</span><span class="nu0">2</span><span class="sy1">,</span><span class="nu0">3</span><span class="sy1">,</span><span class="nu0">4</span><span class="sy1">,</span><span class="nu0">5</span><span class="sy1">,</span><span class="nu0">6</span><span class="br0">&#93;</span><br/><span class="nu0">3</span><span class="sy3">&gt;</span> <br/>&#160;</pre>
<h2><span class="mw-headline" id="ERRE"><a href="/wiki/Category:ERRE" title="Category:ERRE">ERRE</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=41" title="Edit section: ERRE">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>PROGRAM ARRAY_CONCAT<br/>&#160;<br/>DIM A[5],B[5],C[10]<br/>&#160;<br/>!<br/>! for rosettacode.org<br/>!<br/>&#160;<br/>BEGIN<br/>  DATA(1,2,3,4,5)<br/>  DATA(6,7,8,9,0)<br/>&#160;<br/>  FOR I=1 TO 5 DO &#160;! read array A[.]<br/>    READ(A[I])<br/>  END FOR<br/>  FOR I=1 TO 5 DO &#160;! read array B[.]<br/>    READ(B[I])<br/>  END FOR<br/>&#160;<br/>  FOR I=1 TO 10 DO&#160;! append B[.] to A[.]<br/>    IF I&gt;5 THEN<br/>       C[I]=B[I-5]<br/>     ELSE<br/>       C[I]=A[I]<br/>    END IF<br/>    PRINT(C[I];)  &#160;! print single C value<br/>  END FOR<br/>&#160;<br/>  PRINT<br/>&#160;<br/>END PROGRAM<br/>&#160;</pre>
<h2><span class="mw-headline" id="Euphoria"><a href="/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=42" title="Edit section: Euphoria">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="euphoria highlighted_source"><span class="kw2">sequence</span> s1<span class="sy2">,</span>s2<span class="sy2">,</span>s3<br/>s1 <span class="sy1">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy2">,</span><span class="nu0">2</span><span class="sy2">,</span><span class="nu0">3</span><span class="br0">&#125;</span><br/>s2 <span class="sy1">=</span> <span class="br0">&#123;</span><span class="nu0">4</span><span class="sy2">,</span><span class="nu0">5</span><span class="sy2">,</span><span class="nu0">6</span><span class="br0">&#125;</span><br/>s3 <span class="sy1">=</span> s1 <span class="sy1">&amp;</span> s2<br/><span class="sy2">?</span> s3</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>{1,2,3,4,5,6}
</pre>
<h2><span class="mw-headline" id="F.23"><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=43" title="Edit section: F#">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Array concatenation.
</p>
<pre class="fsharp highlighted_source"><span class="kw1">let</span> a <span class="sy0">=</span> <span class="br0">&#91;</span>|<span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span>|<span class="br0">&#93;</span><br/><span class="kw1">let</span> b <span class="sy0">=</span> <span class="br0">&#91;</span>|<span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="sy0">;</span>|<span class="br0">&#93;</span><br/><span class="kw1">let</span> c <span class="sy0">=</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">Array</span></a>.<span class="me1">append</span> a b</pre>
<p>List concatenation (@ and List.append are equivalent).
</p>
<pre class="fsharp highlighted_source"><span class="kw1">let</span> x <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/><span class="kw1">let</span> y <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/><span class="kw1">let</span> z1 <span class="sy0">=</span> x @ y<br/><span class="kw1">let</span> z2 <span class="sy0">=</span> <a href="http://research.microsoft.com/en-us/um/cambridge/projects/fsharp/manual/namespaces.html"><span class="kw2">List</span></a>.<span class="me1">append</span> x y</pre>
<h2><span class="mw-headline" id="FBSL"><a href="/wiki/Category:FBSL" title="Category:FBSL">FBSL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=44" title="Edit section: FBSL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Array concatenation:
</p>
<pre class="qbasic highlighted_source">#APPTYPE CONSOLE<br/>&#160;<br/><a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> aint<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span><span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#125;</span><span class="sy0">,</span> astr<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span><span class="br0">&#123;</span><span class="st0">&quot;one&quot;</span><span class="sy0">,</span> <span class="st0">&quot;two&quot;</span><span class="sy0">,</span> <span class="st0">&quot;three&quot;</span><span class="br0">&#125;</span><span class="sy0">,</span> asng<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span><span class="br0">&#123;</span>!<span class="nu0">1</span><span class="sy0">,</span>&#160;!<span class="nu0">2</span><span class="sy0">,</span>&#160;!<span class="nu0">3</span><span class="br0">&#125;</span><br/>&#160;<br/>FOREACH <a href="http://www.qbasicnews.com/qboho/qckdim.shtml"><span class="kw3">DIM</span></a> e IN ARRAYMERGE<span class="br0">&#40;</span>aint<span class="sy0">,</span> astr<span class="sy0">,</span> asng<span class="br0">&#41;</span><br/>	<a href="http://www.qbasicnews.com/qboho/qckprint.shtml"><span class="kw3">PRINT</span></a> e<span class="sy0">,</span> <span class="st0">&quot; &quot;</span>;<br/><span class="kw1">NEXT</span><br/>&#160;<br/>PAUSE</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>1 2 3 one two three 1.000000 2.000000 3.000000
Press any key to continue...</pre>
<h2><span class="mw-headline" id="Factor"><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=45" title="Edit section: Factor">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">append</pre>
<p><b>Example</b>:
</p>
<pre class="text highlighted_source">( scratchpad ) USE: sequences<br/>( scratchpad ) { 1 2 } { 3 4 } append .<br/>{ 1 2 3 4 }</pre>
<h2><span class="mw-headline" id="Fantom"><a href="/wiki/Category:Fantom" title="Category:Fantom">Fantom</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=46" title="Edit section: Fantom">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In fansh:
</p>
<pre class="text highlighted_source">&#160;<br/>&gt; a&#160;:= [1,2,3]<br/>&gt; b&#160;:= [4,5,6]<br/>&gt; a.addAll(b)<br/>&gt; a<br/>[1,2,3,4,5,6]<br/>&#160;</pre>
<p>Note 'addAll' is destructive. Write 'a.dup.addAll(b)' to create a fresh list.
</p>
<h2><span class="mw-headline" id="Forth"><a href="/wiki/Category:Forth" title="Category:Forth">Forth</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=47" title="Edit section: Forth">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">: $!+   ( a u a' -- a'+u )  <br/>  2dup + &gt;r swap move r&gt;&#160;;<br/>: cat   ( a2 u2 a1 u1 -- a3 u1+u2 )<br/>  align here dup &gt;r $!+ $!+ r&gt; tuck - dup allot&#160;;<br/>&#160;<br/>\ TEST<br/>create a1 1 , 2 , 3 ,<br/>create a2 4 , 5 ,<br/>a2 2 cells a1 3 cells cat dump<br/>&#160;<br/>8018425F0: 01 00 00 00  00 00 00 00 - 02 00 00 00  00 00 00 00  ................<br/>801842600: 03 00 00 00  00 00 00 00 - 04 00 00 00  00 00 00 00  ................<br/>801842610: 05 00 00 00  00 00 00 00 -                           ........<br/>&#160;</pre>
<h2><span class="mw-headline" id="Fortran"><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=48" title="Edit section: Fortran">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Fortran" title="Fortran" class="mw-redirect">Fortran</a> version 90 and later</div>
<pre class="fortran highlighted_source"><span class="kw1">program</span> Concat_Arrays<br/><span class="kw3">implicit</span> <span class="kw3">none</span><br/>&#160;<br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">a</span> <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#93;</span><br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">b</span> <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span> <span class="br0">&#93;</span><br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="sy0">:</span><span class="br0">&#41;</span>, <span class="kw3">allocatable</span> <span class="sy0">::</span> <span class="me2">c</span><br/>&#160;<br/>  <span class="kw1">allocate</span><span class="br0">&#40;</span>c<span class="br0">&#40;</span><span class="kw4">size</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">+</span><span class="kw4">size</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  c<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">:</span><span class="kw4">size</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> a<br/>  c<span class="br0">&#40;</span><span class="kw4">size</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">+</span><span class="nu0">1</span><span class="sy0">:</span><span class="kw4">size</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="sy0">+</span><span class="kw4">size</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">=</span> b<br/>&#160;<br/>  write<span class="br0">&#40;</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">&#41;</span> c<br/>&#160;<br/><span class="kw1">end</span> <span class="kw1">program</span> Concat_Arrays</pre>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Fortran" title="Fortran" class="mw-redirect">Fortran</a> version 2003 and later</div>
<pre class="fortran highlighted_source"><span class="kw1">program</span> Concat_Arrays<br/><span class="kw3">implicit</span> <span class="kw3">none</span><br/>&#160;<br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">a</span> <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#93;</span><br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="me2">b</span> <span class="sy0">=</span> <span class="br0">&#91;</span> <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span> <span class="br0">&#93;</span><br/>  <span class="kw3">integer</span>, <span class="kw3">dimension</span><span class="br0">&#40;</span><span class="sy0">:</span><span class="br0">&#41;</span>, <span class="kw3">allocatable</span> <span class="sy0">::</span> <span class="me2">c</span><br/>&#160;<br/>  c <span class="sy0">=</span> <span class="br0">&#91;</span>a, b<span class="br0">&#93;</span><br/>&#160;<br/>  write<span class="br0">&#40;</span><span class="sy0">*</span>,<span class="sy0">*</span><span class="br0">&#41;</span> c<br/>&#160;<br/><span class="kw1">end</span> <span class="kw1">program</span> Concat_Arrays</pre>
<h2><span class="mw-headline" id="FreeBASIC"><a href="/wiki/Category:FreeBASIC" title="Category:FreeBASIC">FreeBASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=49" title="Edit section: FreeBASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="freebasic highlighted_source">&#160;<br/><span class="co1">' FB 1.05.0 Win64</span><br/>&#160;<br/><span class="kw1">Sub</span> ConcatArrays<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span>, b<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span>, c<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span><span class="br0">&#41;</span><br/>   <span class="kw1">Dim</span> aSize <span class="kw1">As</span> <span class="kw1">Integer</span> = <span class="kw1">UBound</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> - <span class="kw1">LBound</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> + <span class="nu0">1</span><br/>   <span class="kw1">Dim</span> bSize <span class="kw1">As</span> <span class="kw1">Integer</span> = <span class="kw1">UBound</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span> - <span class="kw1">LBound</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span> + <span class="nu0">1</span><br/>   <span class="kw1">Dim</span> cSize <span class="kw1">As</span> <span class="kw1">Integer</span> = aSize + bSize<br/>   <span class="kw1">Redim</span> c<span class="br0">&#40;</span><span class="nu0">0</span> <span class="kw1">To</span> cSize - <span class="nu0">1</span><span class="br0">&#41;</span><br/>   <span class="kw1">Dim</span> i <span class="kw1">As</span> <span class="kw1">Integer</span><br/>   <span class="kw1">For</span> i = <span class="nu0">0</span> <span class="kw1">To</span> aSize - <span class="nu0">1</span><br/>     c<span class="br0">&#40;</span>i<span class="br0">&#41;</span> = a<span class="br0">&#40;</span><span class="kw1">LBound</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> + i<span class="br0">&#41;</span><br/>   <span class="kw1">Next</span><br/>   <span class="kw1">For</span> i = <span class="nu0">0</span> <span class="kw1">To</span> bSize - <span class="nu0">1</span><br/>     c<span class="br0">&#40;</span><span class="kw1">UBound</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span> + i + <span class="nu0">1</span><span class="br0">&#41;</span> = b<span class="br0">&#40;</span><span class="kw1">LBound</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span> + i<span class="br0">&#41;</span><br/>   <span class="kw1">Next</span> <br/><span class="kw1">End</span> <span class="kw1">Sub</span><br/>&#160;<br/><span class="kw1">Dim</span> a<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span> = <span class="br0">&#123;</span><span class="st0">&quot;The&quot;</span>, <span class="st0">&quot;quick&quot;</span>, <span class="st0">&quot;brown&quot;</span>, <span class="st0">&quot;fox&quot;</span><span class="br0">&#125;</span><br/><span class="kw1">Dim</span> b<span class="br0">&#40;</span><span class="nu0">4</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span> = <span class="br0">&#123;</span><span class="st0">&quot;jumped&quot;</span>, <span class="st0">&quot;over&quot;</span>, <span class="st0">&quot;the&quot;</span>, <span class="st0">&quot;lazy&quot;</span>, <span class="st0">&quot;dog&quot;</span><span class="br0">&#125;</span><br/><span class="kw1">Dim</span> c<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw1">String</span><br/>ConcatArrays<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span>, b<span class="br0">&#40;</span><span class="br0">&#41;</span>, c<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="kw1">For</span> i <span class="kw1">As</span> <span class="kw1">Integer</span> = <span class="kw1">LBound</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span> <span class="kw1">To</span> <span class="kw1">UBound</span><span class="br0">&#40;</span>c<span class="br0">&#41;</span><br/>  <span class="kw1">Print</span> c<span class="br0">&#40;</span>i<span class="br0">&#41;</span>; <span class="st0">&quot; &quot;</span>;<br/><span class="kw1">Next</span><br/><span class="kw1">Print</span>&#160;: <span class="kw1">Print</span><br/><span class="kw1">Print</span> <span class="st0">&quot;Press any key to quit the program&quot;</span><br/><span class="kw1">Sleep</span><br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
The quick brown fox jumped over the lazy dog
</pre>
<h2><span class="mw-headline" id="Frink"><a href="/wiki/Category:Frink" title="Category:Frink">Frink</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=50" title="Edit section: Frink">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>a = [1,2]<br/>b = [3,4]<br/>a.pushAll[b]<br/>&#160;</pre>
<h2><span class="mw-headline" id="FunL"><a href="/wiki/Category:FunL" title="Category:FunL">FunL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=51" title="Edit section: FunL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">arr1 = array( [1, 2, 3] )<br/>arr2 = array( [4, 5, 6] )<br/>arr3 = array( [7, 8, 9] )<br/>&#160;<br/>println( arr1 + arr2 + arr3 )</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
ArraySeq(1, 2, 3, 4, 5, 6, 7, 8, 9)
</pre>
<h2><span class="mw-headline" id="Futhark"><a href="/wiki/Category:Futhark" title="Category:Futhark">Futhark</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=52" title="Edit section: Futhark">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Array concatenation is done with the built-in function <code>concat</code>, which can take any number of arguments:
</p>
<pre class="text highlighted_source">&#160;<br/>concat as bs cd<br/>&#160;</pre>
<h2><span class="mw-headline" id="GAP"><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=53" title="Edit section: GAP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source"># Concatenate arrays<br/>Concatenation([1, 2, 3], [4, 5, 6], [7, 8, 9]);<br/># [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]<br/>&#160;<br/># Append to a variable<br/>a&#160;:= [1, 2, 3];<br/>Append(a, [4, 5, 6);<br/>Append(a, [7, 8, 9]);<br/>a;<br/># [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</pre>
<h2><span class="mw-headline" id="Go"><a href="/wiki/Category:Go" title="Category:Go">Go</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=54" title="Edit section: Go">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br/>&#160;<br/><span class="kw1">import</span> <span class="st0">&quot;fmt&quot;</span><br/>&#160;<br/><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br/>    <span class="co1">// Example 1:  Idiomatic in Go is use of the append function.</span><br/>    <span class="co1">// Elements must be of identical type.</span><br/>    a <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">}</span><br/>    b <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">7</span><span class="sy1">,</span> <span class="nu0">12</span><span class="sy1">,</span> <span class="nu0">60</span><span class="sy1">}</span> <span class="co1">// these are technically slices, not arrays</span><br/>    c <span class="sy2">:=</span> append<span class="sy1">(</span>a<span class="sy1">,</span> b<span class="sy4">...</span><span class="sy1">)</span><br/>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span>c<span class="sy1">)</span><br/>&#160;<br/>    <span class="co1">// Example 2:  Polymorphism.</span><br/>    <span class="co1">// interface{} is a type too, one that can reference values of any type.</span><br/>    <span class="co1">// This allows a sort of polymorphic list.</span><br/>    <span class="nu2">i</span> <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">interface</span><span class="sy1">{}{</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">}</span><br/>    j <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">interface</span><span class="sy1">{}{</span><span class="st0">&quot;Crosby&quot;</span><span class="sy1">,</span> <span class="st0">&quot;Stills&quot;</span><span class="sy1">,</span> <span class="st0">&quot;Nash&quot;</span><span class="sy1">,</span> <span class="st0">&quot;Young&quot;</span><span class="sy1">}</span><br/>    k <span class="sy2">:=</span> append<span class="sy1">(</span>i<span class="sy1">,</span> j<span class="sy4">...</span><span class="sy1">)</span> <span class="co1">// append will allocate as needed</span><br/>    fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span>k<span class="sy1">)</span><br/>&#160;<br/>    <span class="co1">// Example 3:  Arrays, not slices.</span><br/>    <span class="co1">// A word like &quot;array&quot; on RC often means &quot;whatever array means in your</span><br/>    <span class="co1">// language.&quot;  In Go, the common role of &quot;array&quot; is usually filled by</span><br/>    <span class="co1">// Go slices, as in examples 1 and 2.  If by &quot;array&quot; you really mean</span><br/>    <span class="co1">// &quot;Go array,&quot; then you have to do a little extra work.  The best</span><br/>    <span class="co1">// technique is almost always to create slices on the arrays and then</span><br/>    <span class="co1">// use the copy function.</span><br/>    l <span class="sy2">:=</span> <span class="sy1">[</span><span class="sy4">...</span><span class="sy1">]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">}</span><br/>    m <span class="sy2">:=</span> <span class="sy1">[</span><span class="sy4">...</span><span class="sy1">]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">7</span><span class="sy1">,</span> <span class="nu0">12</span><span class="sy1">,</span> <span class="nu0">60</span><span class="sy1">}</span> <span class="co1">// arrays have constant size set at compile time</span><br/>    <span class="kw1">var</span> n <span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>l<span class="sy1">)</span> <span class="sy3">+</span> <span class="kw3">len</span><span class="sy1">(</span>m<span class="sy1">)]</span><span class="kw4">int</span><br/>    <span class="kw3">copy</span><span class="sy1">(</span>n<span class="sy1">[:],</span> l<span class="sy1">[:])</span> <span class="co1">// [:] creates a slice that references the entire array</span><br/>    <span class="kw3">copy</span><span class="sy1">(</span>n<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>l<span class="sy1">):],</span> m<span class="sy1">[:])</span><br/>    fmt<span class="sy3">.</span>Println<span class="sy1">(</span>n<span class="sy1">)</span><br/>&#160;<br/><span class="sy1">}</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
[1 2 3 7 12 60]
[1 2 3 Crosby Stills Nash Young]
[1 2 3 7 12 60]
</pre>
<p>Array concatenation needs can vary. Here is another set of examples that illustrate different techniques.
</p>
<pre class="go highlighted_source"><span class="kw1">package</span> main<br/>&#160;<br/><span class="kw1">import</span> <span class="sy1">(</span><br/>  <span class="st0">&quot;reflect&quot;</span><br/>  <span class="st0">&quot;fmt&quot;</span><br/><span class="sy1">)</span><br/>&#160;<br/><span class="co1">// Generic version</span><br/><span class="co1">// Easier to make the generic version accept any number of arguments,</span><br/><span class="co1">// and loop trough them. Otherwise there will be lots of code duplication.</span><br/><span class="kw4">func</span> ArrayConcat<span class="sy1">(</span>arrays <span class="sy4">...</span><span class="kw4">interface</span><span class="sy1">{})</span> <span class="kw4">interface</span><span class="sy1">{}</span> <span class="sy1">{</span><br/>  <span class="kw1">if</span> <span class="kw3">len</span><span class="sy1">(</span>arrays<span class="sy1">)</span> <span class="sy3">==</span> <span class="nu0">0</span> <span class="sy1">{</span><br/>    <span class="kw3">panic</span><span class="sy1">(</span><span class="st0">&quot;Need at least one arguemnt&quot;</span><span class="sy1">)</span><br/>  <span class="sy1">}</span><br/>  <span class="kw1">var</span> vals <span class="sy2">=</span> <span class="kw3">make</span><span class="sy1">([]</span><span class="sy3">*</span><a href="http://golang.org/search?q=reflect.SliceValue"><span class="kw5">reflect.<span class="me1">SliceValue</span></span></a><span class="sy1">,</span> <span class="kw3">len</span><span class="sy1">(</span>arrays<span class="sy1">))</span><br/>  <span class="kw1">var</span> arrtype <span class="sy3">*</span><a href="http://golang.org/search?q=reflect.SliceType"><span class="kw5">reflect.<span class="me1">SliceType</span></span></a><br/>  <span class="kw1">var</span> totalsize <span class="kw4">int</span><br/>  <span class="kw1">for</span> <span class="nu2">i</span><span class="sy1">,</span>a <span class="sy2">:=</span> <span class="kw1">range</span> arrays <span class="sy1">{</span><br/>    v <span class="sy2">:=</span> reflect<span class="sy3">.</span>NewValue<span class="sy1">(</span>a<span class="sy1">)</span><br/>    <span class="kw1">switch</span> t <span class="sy2">:=</span> v<span class="sy3">.</span>Type<span class="sy1">()</span><span class="sy3">.</span><span class="sy1">(</span><span class="kw1">type</span><span class="sy1">)</span> <span class="sy1">{</span><br/>    <span class="kw1">case</span> <span class="sy3">*</span><a href="http://golang.org/search?q=reflect.SliceType"><span class="kw5">reflect.<span class="me1">SliceType</span></span></a><span class="sy1">:</span><br/>      <span class="kw1">if</span> arrtype <span class="sy3">==</span> <span class="kw2">nil</span> <span class="sy1">{</span><br/>        arrtype <span class="sy2">=</span> t<br/>      <span class="sy1">}</span> <span class="kw1">else</span> <span class="kw1">if</span> t <span class="sy2">!=</span> arrtype <span class="sy1">{</span><br/>        <span class="kw3">panic</span><span class="sy1">(</span><span class="st0">&quot;Unequal types&quot;</span><span class="sy1">)</span><br/>      <span class="sy1">}</span><br/>      vals<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span> <span class="sy2">=</span> v<span class="sy3">.</span><span class="sy1">(</span><span class="sy3">*</span><a href="http://golang.org/search?q=reflect.SliceValue"><span class="kw5">reflect.<span class="me1">SliceValue</span></span></a><span class="sy1">)</span><br/>      totalsize <span class="sy2">+=</span> vals<span class="sy1">[</span><span class="nu2">i</span><span class="sy1">]</span><span class="sy3">.</span>Len<span class="sy1">()</span><br/>    <span class="kw1">default</span><span class="sy1">:</span> <span class="kw3">panic</span><span class="sy1">(</span><span class="st0">&quot;not a slice&quot;</span><span class="sy1">)</span><br/>    <span class="sy1">}</span><br/>  <span class="sy1">}</span><br/>  ret <span class="sy2">:=</span> reflect<span class="sy3">.</span>MakeSlice<span class="sy1">(</span>arrtype<span class="sy1">,</span>totalsize<span class="sy1">,</span>totalsize<span class="sy1">)</span><br/>  targ <span class="sy2">:=</span> ret<br/>  <span class="kw1">for</span> _<span class="sy1">,</span>v <span class="sy2">:=</span> <span class="kw1">range</span> vals <span class="sy1">{</span><br/>    reflect<span class="sy3">.</span>Copy<span class="sy1">(</span>targ<span class="sy1">,</span> v<span class="sy1">)</span><br/>    targ <span class="sy2">=</span> targ<span class="sy3">.</span>Slice<span class="sy1">(</span>v<span class="sy3">.</span>Len<span class="sy1">(),</span>targ<span class="sy3">.</span>Len<span class="sy1">())</span><br/>  <span class="sy1">}</span><br/>  <span class="kw1">return</span> ret<span class="sy3">.</span>Interface<span class="sy1">()</span><br/><span class="sy1">}</span><br/>&#160;<br/><span class="co1">// Type specific version</span><br/><span class="kw4">func</span> ArrayConcatInts<span class="sy1">(</span>a<span class="sy1">,</span> b <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">)</span> <span class="sy1">[]</span><span class="kw4">int</span> <span class="sy1">{</span><br/>  ret <span class="sy2">:=</span> <span class="kw3">make</span><span class="sy1">([]</span><span class="kw4">int</span><span class="sy1">,</span> <span class="kw3">len</span><span class="sy1">(</span>a<span class="sy1">)</span> <span class="sy3">+</span> <span class="kw3">len</span><span class="sy1">(</span>b<span class="sy1">))</span><br/>  <span class="kw3">copy</span><span class="sy1">(</span>ret<span class="sy1">,</span> a<span class="sy1">)</span><br/>  <span class="kw3">copy</span><span class="sy1">(</span>ret<span class="sy1">[</span><span class="kw3">len</span><span class="sy1">(</span>a<span class="sy1">):],</span> b<span class="sy1">)</span><br/>  <span class="kw1">return</span> ret<br/><span class="sy1">}</span><br/>&#160;<br/><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br/>  test1_a<span class="sy1">,</span> test1_b <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">1</span><span class="sy1">,</span><span class="nu0">2</span><span class="sy1">,</span><span class="nu0">3</span><span class="sy1">},</span> <span class="sy1">[]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">4</span><span class="sy1">,</span><span class="nu0">5</span><span class="sy1">,</span><span class="nu0">6</span><span class="sy1">}</span><br/>  test1_c <span class="sy2">:=</span> ArrayConcatInts<span class="sy1">(</span>test1_a<span class="sy1">,</span> test1_b<span class="sy1">)</span><br/>  fmt<span class="sy3">.</span>Println<span class="sy1">(</span>test1_a<span class="sy1">,</span> <span class="st0">&quot; + &quot;</span><span class="sy1">,</span> test1_b<span class="sy1">,</span> <span class="st0">&quot; = &quot;</span><span class="sy1">,</span> test1_c<span class="sy1">)</span><br/>&#160;<br/>  test2_a<span class="sy1">,</span> test2_b <span class="sy2">:=</span> <span class="sy1">[]</span><span class="kw4">string</span><span class="sy1">{</span><span class="st0">&quot;a&quot;</span><span class="sy1">,</span><span class="st0">&quot;b&quot;</span><span class="sy1">,</span><span class="st0">&quot;c&quot;</span><span class="sy1">},</span> <span class="sy1">[]</span><span class="kw4">string</span><span class="sy1">{</span><span class="st0">&quot;d&quot;</span><span class="sy1">,</span><span class="st0">&quot;e&quot;</span><span class="sy1">,</span><span class="st0">&quot;f&quot;</span><span class="sy1">}</span><br/>  test2_c <span class="sy2">:=</span> ArrayConcat<span class="sy1">(</span>test2_a<span class="sy1">,</span> test2_b<span class="sy1">)</span><span class="sy3">.</span><span class="sy1">([]</span><span class="kw4">string</span><span class="sy1">)</span><br/>  fmt<span class="sy3">.</span>Println<span class="sy1">(</span>test2_a<span class="sy1">,</span> <span class="st0">&quot; + &quot;</span><span class="sy1">,</span> test2_b<span class="sy1">,</span> <span class="st0">&quot; = &quot;</span><span class="sy1">,</span> test2_c<span class="sy1">)</span><br/><span class="sy1">}</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
[1 2 3]  +  [4 5 6]  =  [1 2 3 4 5 6]
[a b c]  +  [d e f]  =  [a b c d e f]
</pre>
<h2><span class="mw-headline" id="Gosu"><a href="/wiki/Category:Gosu" title="Category:Gosu">Gosu</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=55" title="Edit section: Gosu">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>var listA = { 1, 2, 3 }<br/>var listB = { 4, 5, 6 }<br/>&#160;<br/>var listC = listA.concat( listB )<br/>&#160;<br/>print( listC ) // prints [1, 2, 3, 4, 5, 6]<br/>&#160;</pre>
<h2><span class="mw-headline" id="Groovy"><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=56" title="Edit section: Groovy">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Solution:
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> list <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#93;</span> <span class="sy0">+</span> <span class="br0">&#91;</span><span class="st0">&quot;Crosby&quot;</span>, <span class="st0">&quot;Stills&quot;</span>, <span class="st0">&quot;Nash&quot;</span>, <span class="st0">&quot;Young&quot;</span><span class="br0">&#93;</span></pre>
<p>Test:
</p>
<pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> list</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>[1, 2, 3, Crosby, Stills, Nash, Young]</pre>
<h2><span class="mw-headline" id="Haskell"><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=57" title="Edit section: Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A list is in Haskell one of the most common composite data types (constructed from other types). In the documentation we read for the append operation ++:
</p>
<pre class="haskell highlighted_source"><span class="br0">&#40;</span><span class="sy0">++</span><span class="br0">&#41;</span> <span class="sy0">::</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span> <span class="sy0">-&gt;</span> <span class="br0">&#91;</span>a<span class="br0">&#93;</span></pre>
Append two lists, i.e.:<pre> 
[x1, ..., xm] ++ [y1, ..., yn] == [x1, ..., xm, y1, ..., yn]
[x1, ..., xm] ++ [y1, ...] == [x1, ..., xm, y1, ...]</pre>
<p>If the first list is not finite, the result is the first list.
</p>
<h2><span class="mw-headline" id="HicEst"><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=58" title="Edit section: HicEst">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="hicest highlighted_source"><span class="kw1">REAL</span> <span class="sy1">::</span> a<span class="br0">&#40;</span><span class="nu0">7</span><span class="br0">&#41;</span><span class="sy1">,</span> b<span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy1">,</span> c<span class="br0">&#40;</span><span class="nu0">10</span><span class="br0">&#41;</span><br/>&#160;<br/>c <span class="sy1">=</span> a<br/><span class="kw1">DO</span> i <span class="sy1">=</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="kw1">LEN</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span><br/>   c<span class="br0">&#40;</span>i <span class="sy1">+</span> <span class="kw1">LEN</span><span class="br0">&#40;</span>a<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy1">=</span> b<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/><span class="kw1">ENDDO</span></pre>
<h2><span class="mw-headline" id="I"><a href="/wiki/Category:I" title="Category:I">I</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=59" title="Edit section: I">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">software {<br/>	var a = [1, 2, 3]<br/>	var b = [4, 5, 6]<br/>&#160;<br/>	print(a + b)<br/>}</pre>
<h2><span class="mw-headline" id="Icon_and_Unicon"><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a> and <a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=60" title="Edit section: Icon and Unicon">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Both languages have list concatenation built in. Lists are fully dynamic arrays which can be truncated or extended at either end.
</p>
<pre class="icon highlighted_source">&#160;<br/><span class="kw1">procedure</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>    L1 <span class="sy1">:=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">,</span> <span class="nu0">4</span><span class="br0">&#93;</span><br/>    L2 <span class="sy1">:=</span> <span class="br0">&#91;</span><span class="nu0">11</span><span class="sy1">,</span> <span class="nu0">12</span><span class="sy1">,</span> <span class="nu0">13</span><span class="sy1">,</span> <span class="nu0">14</span><span class="br0">&#93;</span><br/>    L3 <span class="sy1">:=</span> L1 <span class="sy1">|||</span> L2<br/>&#160;<br/>    sep <span class="sy1">:=</span> <span class="st0">&quot;&quot;</span><br/>    <span class="kw1">every</span> <span class="kw4">writes</span><span class="br0">&#40;</span>sep<span class="sy1">,</span> <span class="sy1">!</span>L3<span class="br0">&#41;</span> <span class="kw1">do</span><br/>        sep <span class="sy1">:=</span> <span class="st0">&quot;, &quot;</span><br/>    <span class="kw4">write</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="kw1">end</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="IDL"><a href="/wiki/Category:IDL" title="Category:IDL">IDL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=61" title="Edit section: IDL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Array concatenation can mean different things, depending on the number of dimensions of the arguments and the result. In the simplest case, with 1-dimensional arrays to begin with, there are two obvious ways to concatenate them. If my arrays are these:
</p>
<pre class="idl highlighted_source">&#160;<br/> &gt; a <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">&#93;</span><br/> &gt; b <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span>,<span class="nu0">5</span>,<span class="nu0">6</span><span class="br0">&#93;</span><br/> &gt; help,a<br/>      A               INT       <span class="sy0">=</span> Array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><br/> &gt; help,b<br/>      B               INT       <span class="sy0">=</span> Array<span class="br0">&#91;</span><span class="nu0">3</span><span class="br0">&#93;</span><br/> &gt; print,a<br/>      <span class="nu0">1</span>       <span class="nu0">2</span>       <span class="nu0">3</span><br/> &gt; print,b<br/>      <span class="nu0">4</span>       <span class="nu0">5</span>       <span class="nu0">6</span><br/>&#160;</pre>
<p>Then they can be concatenated "at the ends":
</p>
<pre class="idl highlighted_source">&#160;<br/> &gt; help,<span class="br0">&#91;</span>a,b<span class="br0">&#93;</span><br/>      &lt;Expression&gt;    INT       <span class="sy0">=</span> Array<span class="br0">&#91;</span><span class="nu0">6</span><span class="br0">&#93;</span><br/> &gt; print,<span class="br0">&#91;</span>a,b<span class="br0">&#93;</span><br/>       <span class="nu0">1</span>       <span class="nu0">2</span>       <span class="nu0">3</span>       <span class="nu0">4</span>       <span class="nu0">5</span>       <span class="nu0">6</span><br/>&#160;</pre>
<p>or "at the sides":
</p>
<pre class="idl highlighted_source">&#160;<br/> &gt; help,<span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span>,<span class="br0">&#91;</span>b<span class="br0">&#93;</span><span class="br0">&#93;</span><br/>      &lt;Expression&gt;    INT       <span class="sy0">=</span> Array<span class="br0">&#91;</span><span class="nu0">3</span>, <span class="nu0">2</span><span class="br0">&#93;</span><br/> &gt; print,<span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span>,<span class="br0">&#91;</span>b<span class="br0">&#93;</span><span class="br0">&#93;</span><br/>       <span class="nu0">1</span>       <span class="nu0">2</span>       <span class="nu0">3</span><br/>       <span class="nu0">4</span>       <span class="nu0">5</span>       <span class="nu0">6</span><br/>&#160;</pre>
<p>Note that this requires that the arrays have the same size at the side at which they are concatenated:
</p>
<pre class="idl highlighted_source">&#160;<br/> &gt; b <span class="sy0">=</span> transpose<span class="br0">&#40;</span>b<span class="br0">&#41;</span><br/> &gt; help,b<br/>      B               INT       <span class="sy0">=</span> Array<span class="br0">&#91;</span><span class="nu0">1</span>, <span class="nu0">3</span><span class="br0">&#93;</span><br/> &gt; print,b<br/>       <span class="nu0">4</span><br/>       <span class="nu0">5</span><br/>       <span class="nu0">6</span><br/> &gt; print,<span class="br0">&#91;</span>a,b<span class="br0">&#93;</span><br/> Unable to concatenate variables because the dimensions do not agree<span class="sy0">:</span> B.<br/> Execution halted at<span class="sy0">:</span> $MAIN$          <br/> &gt; print,<span class="br0">&#91;</span><span class="br0">&#91;</span>a<span class="br0">&#93;</span>,<span class="br0">&#91;</span>b<span class="br0">&#93;</span><span class="br0">&#93;</span><br/> Unable to concatenate variables because the dimensions do not agree<span class="sy0">:</span> B.<br/> Execution halted at<span class="sy0">:</span> $MAIN$    <br/>&#160;</pre>
<p>This can get a lot more complicated as a 3x4x5-element three-dimensional array can be concatenated with a 5x2x3-element array at exactly two "surfaces".
</p>
<h2><span class="mw-headline" id="Inform_7"><a href="/wiki/Category:Inform_7" title="Category:Inform 7">Inform 7</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=62" title="Edit section: Inform 7">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">let A be {1, 2, 3};<br/>let B be {4, 5, 6};<br/>add B to A;</pre>
<h2><span class="mw-headline" id="Ioke"><a href="/wiki/Category:Ioke" title="Category:Ioke">Ioke</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=63" title="Edit section: Ioke">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">iik&gt; [1,2,3] + [3,2,1]<br/>[1,2,3] + [3,2,1]<br/>+&gt; [1, 2, 3, 3, 2, 1]</pre>
<h2><span class="mw-headline" id="J"><a href="/wiki/Category:J" title="Category:J">J</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=64" title="Edit section: J">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p><b>Solution</b>: <code> , </code>
</p><p><b>Example</b>:
</p>
<pre class="j highlighted_source">   array1 =: <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><br/>   array2 =: <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><br/>   array1 , array2<br/><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span></pre>
<p>Of course, in J, array concatenation works (consistently) on arrays of any rank or dimension.
</p><p>The verb <code>,</code> concatenates by treating the argument array with the largest number of dimensions as a list. Other primary verbs concatenate along other axes.
</p>
<pre class="j highlighted_source">   ]ab=: <span class="nu0">3</span> <span class="nu0">3</span> $ <span class="st_h">'aaabbbccc'</span><br/>aaa<br/>bbb<br/>ccc<br/>   ]wx=: <span class="nu0">3</span> <span class="nu0">3</span> $ <span class="st_h">'wxyz'</span><br/>wxy<br/>zwx<br/>yzw<br/>   ab , wx<br/>aaa<br/>bbb<br/>ccc<br/>wxy<br/>zwx<br/>yzw<br/>   ab ,. wx<br/>aaawxy<br/>bbbzwx<br/>cccyzw<br/>   ab ,: wx<br/>aaa<br/>bbb<br/>ccc<br/>&#160;<br/>wxy<br/>zwx<br/>yzw<br/>   $ ab , wx    <span class="co1">NB. applies to first (highest) axis</span><br/><span class="nu0">6</span> <span class="nu0">3</span><br/>   $ ab ,. wx   <span class="co1">NB. applies to last (atomic) axis</span><br/><span class="nu0">3</span> <span class="nu0">6</span><br/>   $ ab ,: wx   <span class="co1">NB. applies to new (higher) axis</span><br/><span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">3</span></pre>
<h2><span class="mw-headline" id="Java"><a href="/wiki/Category:Java" title="Category:Java">Java</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=65" title="Edit section: Java">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>From <a rel="nofollow" class="external autonumber" href="http://forums.sun.com/thread.jspa?messageID=1762690#1762690">[1]</a>:
</p>
<pre class="java5 highlighted_source"><span class="kw2">public</span> <span class="kw2">static</span> <a href="http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object"><span class="kw166">Object</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> objArrayConcat<span class="br0">&#40;</span><a href="http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object"><span class="kw166">Object</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> o1, <a href="http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object"><span class="kw166">Object</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> o2<span class="br0">&#41;</span><br/><span class="br0">&#123;</span><br/>  <a href="http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object"><span class="kw166">Object</span></a><span class="br0">&#91;</span><span class="br0">&#93;</span> ret = <span class="kw2">new</span> <a href="http://www.google.com/search?sitesearch=java.sun.com&amp;q=allinurl%3Aj2se%2F1+5+0%2Fdocs%2Fapi+Object"><span class="kw166">Object</span></a><span class="br0">&#91;</span>o1.<span class="me1">length</span> + o2.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>  <a href="http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html"><span class="kw21">System</span></a>.<span class="me1">arraycopy</span><span class="br0">&#40;</span>o1, <span class="nu0">0</span>, ret, <span class="nu0">0</span>, o1.<span class="me1">length</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>  <a href="http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/lang/System.html"><span class="kw21">System</span></a>.<span class="me1">arraycopy</span><span class="br0">&#40;</span>o2, <span class="nu0">0</span>, ret, o1.<span class="me1">length</span>, o2.<span class="me1">length</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/>  <span class="kw2">return</span> ret<span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<p>Or with <code>Collection</code>s simply call <code>addAll</code>:
</p>
<pre class="java5 highlighted_source"><a href="http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/Collection.html"><span class="kw46">Collection</span></a> list1, list2, list1And2<span class="sy0">;</span><br/><span class="co1">//...list1 and list2 are instantiated...</span><br/>list1And2 = <span class="kw2">new</span> <a href="http://java.sun.com/j2se/1%2E5%2E0/docs/api/java/util/ArrayList.html"><span class="kw46">ArrayList</span></a><span class="br0">&#40;</span>list1<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//or any other Collection you want</span><br/>list1And2.<span class="me1">addAll</span><span class="br0">&#40;</span>list2<span class="br0">&#41;</span><span class="sy0">;</span></pre>
<h2><span class="mw-headline" id="JavaScript"><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=66" title="Edit section: JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The <code>Array.concat()</code> method returns a new array comprised of this array joined with other array(s) and/or value(s).
</p>
<pre class="javascript highlighted_source"><span class="kw1">var</span> a <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">,</span><br/>    b <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">,</span><br/>    c <span class="sy0">=</span> a.<span class="me1">concat</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span><span class="sy0">;</span> <span class="co1">//=&gt; [1,2,3,4,5,6]</span></pre>
<p><br/>
Or, if we consider the concatenation of two arrays as a particular instance of the more general problem of concatenating 2 or more arrays, we can write a generic function:
</p>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Haskell">Haskell</a></div>
<p>See, for a function with an analogous type signature, <b>concat</b> in the Haskell Prelude.
</p>
<pre class="javascript highlighted_source"><span class="br0">&#40;</span><span class="kw1">function</span> <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="st0">'use strict'</span><span class="sy0">;</span><br/>&#160;<br/>    <span class="co1">// concat&#160;:: [[a]] -&gt; [a]</span><br/>    <span class="kw1">function</span> concat<span class="br0">&#40;</span>xs<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>        <span class="kw1">return</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>.<span class="me1">concat</span>.<span class="me1">apply</span><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">,</span> xs<span class="br0">&#41;</span><span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>&#160;<br/>&#160;<br/>   <span class="kw1">return</span> concat<span class="br0">&#40;</span><br/>      <span class="br0">&#91;</span><span class="br0">&#91;</span><span class="st0">&quot;alpha&quot;</span><span class="sy0">,</span> <span class="st0">&quot;beta&quot;</span><span class="sy0">,</span> <span class="st0">&quot;gamma&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> <br/>      <span class="br0">&#91;</span><span class="st0">&quot;delta&quot;</span><span class="sy0">,</span> <span class="st0">&quot;epsilon&quot;</span><span class="sy0">,</span> <span class="st0">&quot;zeta&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> <br/>      <span class="br0">&#91;</span><span class="st0">&quot;eta&quot;</span><span class="sy0">,</span> <span class="st0">&quot;theta&quot;</span><span class="sy0">,</span> <span class="st0">&quot;iota&quot;</span><span class="br0">&#93;</span><span class="br0">&#93;</span><br/>  <span class="br0">&#41;</span><span class="sy0">;</span><br/>&#160;<br/><span class="br0">&#125;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>[&quot;alpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;delta&quot;, &quot;epsilon&quot;, &quot;zeta&quot;, &quot;eta&quot;, &quot;theta&quot;, &quot;iota&quot;]</pre>
<h2><span class="mw-headline" id="jq"><a href="/wiki/Category:Jq" title="Category:Jq">jq</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=67" title="Edit section: jq">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>If a and b are two arrays, then a+b is their concatenation.
Similarly for a+b+c. To concatenate the component arrays of an array, A, the <tt>flatten</tt> filter is available in recent versions of jq. If your jq does not have flatten, then the task can be accomplished by:
</p>
<pre>   reduce A[] as $a ([]; . + $a)
</pre>
jq also supports streams, which are somewhat array-like, so it may be worth mentioning that the concatenation of two or more streams can be accomplished using "," instead of "+". <pre class="text highlighted_source">[1,2] + [3] + [null] # =&gt; [1,2,3,null]<br/>&#160;<br/>[range(1;3), 3, null] # =&gt; [1,2,3,null] <br/>&#160;</pre>
<h2><span class="mw-headline" id="Julia"><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=68" title="Edit section: Julia">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">a = [1,2,3]<br/>b = [4,5,6]<br/>ab = [a;b]<br/># the above bracket notation simply generates a call to vcat<br/>ab = vcat(a,b)<br/># hcat is short for `horizontal concatenation`<br/>ab = hcat(a,b) 	#ab -&gt; 3x2 matrix<br/># the append!(a,b) method is mutating, appending `b` to `a`<br/>append!(a,b)	# a now equals [1,2,3,4,5,6]</pre>
<h2><span class="mw-headline" id="K"><a href="/wiki/Category:K" title="Category:K">K</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=69" title="Edit section: K">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>    a: 1 2 3<br/>    b: 4 5 6<br/>    a,b<br/>1 2 3 4 5 6</pre>
<p>Concatenations on larger dimensions also use ",", often combined with other operations.
</p>
<pre class="text highlighted_source">&#160;<br/>   ab:3 3#&quot;abcdefghi&quot;<br/>(&quot;abc&quot;<br/> &quot;def&quot;<br/> &quot;ghi&quot;)<br/>&#160;<br/>   dd:3 3#&quot;012345678&quot;<br/>(&quot;012&quot;<br/> &quot;345&quot;<br/> &quot;678&quot;)<br/>&#160;<br/>   ab,dd   <br/>(&quot;abc&quot;<br/> &quot;def&quot;<br/> &quot;ghi&quot;<br/> &quot;012&quot;<br/> &quot;345&quot;<br/> &quot;678&quot;)<br/>&#160;<br/>   +ab,dd   / flip (transpose) join<br/>(&quot;adg036&quot;<br/> &quot;beh147&quot;<br/> &quot;cfi258&quot;)<br/>&#160;<br/>   ab,'dd   / eachpair join<br/>(&quot;abc012&quot;<br/> &quot;def345&quot;<br/> &quot;ghi678&quot;)<br/>&#160;<br/>   +(+ab),dd<br/>(&quot;abc036&quot;<br/> &quot;def147&quot;<br/> &quot;ghi258&quot;)</pre>
<h2><span class="mw-headline" id="Kotlin"><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=70" title="Edit section: Kotlin">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>There is no operator or standard library function for concatenating <code>Array</code> types. One option is to convert to <code>Collection</code>s, concatenate, and convert back:
</p>
<pre class="text highlighted_source">fun main(args: Array&lt;String&gt;) {<br/>    val a: Array&lt;Int&gt; = arrayOf(1, 2, 3) // initialise a<br/>    val b: Array&lt;Int&gt; = arrayOf(4, 5, 6) // initialise b<br/>    val c: Array&lt;Int&gt; = (a.toList() + b.toList()).toTypedArray()<br/>    println(c)<br/>}</pre>
<p>Alternatively, we can write our own concatenation function:
</p>
<pre class="text highlighted_source">fun arrayConcat(a: Array&lt;Any&gt;, b: Array&lt;Any&gt;): Array&lt;Any&gt; {<br/>    return Array(a.size + b.size, { if (it in a.indices) a[it] else b[it - a.size] })<br/>}</pre>
<p>When working directly with <code>Collection</code>s, we can simply use the <code>+</code> operator:
</p>
<pre class="text highlighted_source">fun main(args: Array&lt;String&gt;) {<br/>    val a: Collection&lt;Int&gt; = listOf(1, 2, 3) // initialise a<br/>    val b: Collection&lt;Int&gt; = listOf(4, 5, 6) // initialise b<br/>    val c: Collection&lt;Int&gt; = a + b<br/>    println(c)<br/>}</pre>
<h2><span class="mw-headline" id="LabVIEW"><a href="/wiki/Category:LabVIEW" title="Category:LabVIEW">LabVIEW</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=71" title="Edit section: LabVIEW">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Use the Build Array function.<br/>This image is a <a rel="nofollow" class="external text" href="http://zone.ni.com/devzone/cda/tut/p/id/9330">VI Snippet</a>, an executable image of <a href="/wiki/LabVIEW" title="LabVIEW" class="mw-redirect">LabVIEW</a> code. The LabVIEW version is shown on the top-right hand corner. You can download it, then drag-and-drop it onto the LabVIEW block diagram from a file browser, and it will appear as runnable, editable code.<br/>
<a href="/wiki/File:LabVIEW_Array_concatenation.png" class="image"><img alt="LabVIEW Array concatenation.png" src="/mw/images/0/0e/LabVIEW_Array_concatenation.png" width="222" height="211"/></a>
</p>
<h2><span class="mw-headline" id="Lang5"><a href="/wiki/Category:Lang5" title="Category:Lang5">Lang5</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=72" title="Edit section: Lang5">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">[1 2] [3 4] append collapse .</pre>
<p><br/>
</p>
<h2><span class="mw-headline" id="Lasso"><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=73" title="Edit section: Lasso">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>local(arr1 = array(1, 2, 3))<br/>local(arr2 = array(4, 5, 6))<br/>local(arr3 = #arr1-&gt;asCopy)	//	make arr3 a copy of arr2<br/>#arr3-&gt;merge(#arr2)		//	concatenate 2 arrays<br/>&#160;<br/>&#160;<br/>Result:<br/>&#160;<br/>arr1 = array(1, 2, 3)<br/>arr2 = array(4, 5, 6)<br/>arr3 = array(4, 5, 6)<br/>arr3 = array(1, 2, 3, 4, 5, 6)</pre>
<h2><span class="mw-headline" id="LFE"><a href="/wiki/Category:LFE" title="Category:LFE">LFE</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=74" title="Edit section: LFE">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lisp highlighted_source">&#160;<br/><span class="sy0">&gt;</span> <span class="br0">&#40;</span>++ '<span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#41;</span> '<span class="br0">&#40;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#41;</span><br/><span class="sy0">&gt;</span> <span class="br0">&#40;</span><span class="sy0">:</span> <span class="me1">lists</span> <span class="kw1">append</span> '<span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#41;</span> '<span class="br0">&#40;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#41;</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Liberty_BASIC"><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=75" title="Edit section: Liberty BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lb highlighted_source">    x<span class="sy0">=</span><span class="nu0">10</span><br/>    y<span class="sy0">=</span><span class="nu0">20</span><br/>    <span class="kw1">dim</span> array1<span class="br0">&#40;</span>x<span class="br0">&#41;</span><br/>    <span class="kw1">dim</span> array2<span class="br0">&#40;</span>y<span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#91;</span>concatenate<span class="br0">&#93;</span><br/>    <span class="kw1">dim</span> array3<span class="br0">&#40;</span>x <span class="sy0">+</span> y<span class="br0">&#41;</span><br/>    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> x<br/>        array3<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> array1<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>    <span class="kw1">next</span><br/>    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> y<br/>        array3<span class="br0">&#40;</span>i <span class="sy0">+</span> x<span class="br0">&#41;</span> <span class="sy0">=</span> array2<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>    <span class="kw1">next</span><br/>&#160;<br/><span class="br0">&#91;</span><span class="kw1">print</span><span class="br0">&#93;</span><br/>    <span class="kw1">for</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> x <span class="sy0">+</span> y<br/>        <span class="kw1">print</span> array3<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>    <span class="kw1">next</span></pre>
<h2><span class="mw-headline" id="Lingo"><a href="/wiki/Category:Lingo" title="Category:Lingo">Lingo</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=76" title="Edit section: Lingo">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">a = [1,2]<br/>b = [3,4,5]<br/>&#160;<br/>repeat with v in b<br/>  a.append(v)<br/>end repeat<br/>&#160;<br/>put a<br/>-- [1, 2, 3, 4, 5]</pre>
<h2><span class="mw-headline" id="Little"><a href="/wiki/Category:Little" title="Category:Little">Little</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=77" title="Edit section: Little">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="c highlighted_source"><span class="kw4">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>    <span class="kw4">int</span> a<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="br0">&#125;</span><span class="sy0">;</span><br/>    <span class="kw4">int</span> b<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">&#125;</span><span class="sy0">;</span><br/>    <span class="kw4">int</span> c<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="br0">&#40;</span>expand<span class="br0">&#41;</span>a<span class="sy0">,</span> <span class="br0">&#40;</span>expand<span class="br0">&#41;</span>b<span class="br0">&#125;</span><span class="sy0">;</span><br/>    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/puts.html"><span class="kw3">puts</span></a><span class="br0">&#40;</span>c<span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="Logo"><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=78" title="Edit section: Logo">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>COMBINE is used to combine lists or words. SENTENCE is used to combine lists and words into a single list.
</p>
<pre class="text highlighted_source">&#160;<br/>to combine-arrays&#160;:a1&#160;:a2        <br/>  output listtoarray sentence arraytolist&#160;:a1 arraytolist&#160;:a2<br/>end<br/>show combine-arrays {1 2 3} {4 5 6}  &#160;; {1 2 3 4 5 6}<br/>&#160;</pre>
<h2><span class="mw-headline" id="Lua"><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=79" title="Edit section: Lua">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="lua highlighted_source">a <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#125;</span><br/>b <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw1">for</span> _<span class="sy0">,</span> v <span class="kw2">in</span> <span class="kw3">pairs</span><span class="br0">&#40;</span>b<span class="br0">&#41;</span> <span class="kw1">do</span><br/>    <span class="kw3">table.insert</span><span class="br0">&#40;</span>a<span class="sy0">,</span> v<span class="br0">&#41;</span><br/><span class="kw1">end</span><br/>&#160;<br/><span class="kw3">print</span><span class="br0">&#40;</span><span class="kw3">table.concat</span><span class="br0">&#40;</span>a<span class="sy0">,</span> <span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
1, 2, 3, 4, 5, 6
</pre>
<h2><span class="mw-headline" id="Maple"><a href="/wiki/Category:Maple" title="Category:Maple">Maple</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=80" title="Edit section: Maple">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>There is a built-in procedure for concatenating arrays (and similar objects such as matrices or vectors). Arrays can be concatenated along any given dimension, which is specified as the first argument.
</p>
<pre class="text highlighted_source">&#160;<br/>&gt; A&#160;:= Array( [ 1, 2, 3 ] );<br/>                             A&#160;:= [1, 2, 3]<br/>&#160;<br/>&gt; B&#160;:= Vector['row']( [ sin( x ), cos( x ), tan( x ) ] );<br/>                     B&#160;:= [sin(x), cos(x), tan(x)]<br/>&#160;<br/>&gt; ArrayTools:-Concatenate( 1, A, B ); # stack vertically<br/>                      [  1         2         3   ]<br/>                      [                          ]<br/>                      [sin(x)    cos(x)    tan(x)]<br/>&#160;<br/>&gt; ArrayTools:-Concatenate( 2, A, B ); # stack horizontally<br/>                   [1, 2, 3, sin(x), cos(x), tan(x)]<br/>&#160;<br/>&gt; M&#160;:= &lt;&lt; a, b, c&#160;; d, e, f &gt;&gt;; # a matrix<br/>                                [a    b    c]<br/>                           M&#160;:= [           ]<br/>                                [d    e    f]<br/>&#160;<br/>&gt; ArrayTools:-Concatenate( 1, M, A );<br/>                             [a    b    c]<br/>                             [           ]<br/>                             [d    e    f]<br/>                             [           ]<br/>                             [1    2    3]<br/>&#160;</pre>
<p>Of course, the order of the arguments is important.
</p>
<pre class="text highlighted_source">&#160;<br/>&gt; ArrayTools:-Concatenate( 1, A, M );<br/>                             [1    2    3]<br/>                             [           ]<br/>                             [a    b    c]<br/>                             [           ]<br/>                             [d    e    f]<br/>&#160;</pre>
<p>Lists, in Maple, might be considered to be a kind of "array" (in the sense that they look like arrays in memory), though they are actually immutable objects. However, they can be concatenated as follows.
</p>
<pre class="text highlighted_source">&#160;<br/>&gt; L1&#160;:= [ 1, 2, 3 ];<br/>                            L1&#160;:= [1, 2, 3]<br/>&#160;<br/>&gt; L2&#160;:= [ a, b, c ];<br/>                            L2&#160;:= [a, b, c]<br/>&#160;<br/>&gt; [ op( L1 ), op( L2 ) ];<br/>                           [1, 2, 3, a, b, c]<br/>&#160;<br/>&gt; [ L1[], L2[] ]; # equivalent, just different syntax<br/>                           [1, 2, 3, a, b, c]<br/>&#160;</pre>
<h2><span class="mw-headline" id="Mathematica_.2F_Wolfram_Language"><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a> / <a href="/wiki/Category:Wolfram_Language" title="Category:Wolfram Language">Wolfram Language</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=81" title="Edit section: Mathematica / Wolfram Language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">Join[{1,2,3}, {4,5,6}]<br/>&#160;<br/>-&gt; {1, 2, 3, 4, 5, 6}</pre>
<h2><span class="mw-headline" id="MATLAB_.2F_Octave"><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a> / <a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=82" title="Edit section: MATLAB / Octave">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Two arrays are concatenated by placing the two arrays between a pair of square brackets. A space between the two array names will concatenate them horizontally, and a semi-colon between array names will concatenate vertically.
</p>
<pre class="matlab highlighted_source">&gt;&gt; a = <span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/>&#160;<br/>a =<br/>&#160;<br/>     <span class="nu0">1</span>     <span class="nu0">2</span>     <span class="nu0">3</span><br/>&#160;<br/>&gt;&gt; b = <span class="br0">&#91;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>&#160;<br/>b =<br/>&#160;<br/>     <span class="nu0">4</span>     <span class="nu0">5</span>     <span class="nu0">6</span><br/>&#160;<br/>&gt;&gt; concat = <span class="br0">&#91;</span>a b<span class="br0">&#93;</span><br/>&#160;<br/>concat =<br/>&#160;<br/>     <span class="nu0">1</span>     <span class="nu0">2</span>     <span class="nu0">3</span>     <span class="nu0">4</span>     <span class="nu0">5</span>     <span class="nu0">6</span><br/>&#160;<br/>&gt;&gt; concat = <span class="br0">&#91;</span>a;b<span class="br0">&#93;</span><br/>&#160;<br/>concat =<br/>&#160;<br/>     <span class="nu0">1</span>     <span class="nu0">2</span>     <span class="nu0">3</span><br/>     <span class="nu0">4</span>     <span class="nu0">5</span>     <span class="nu0">6</span></pre>
<p>For multi-dimensional arrays, there is also the function cat():
</p>
<pre class="matlab highlighted_source">&gt;&gt; c = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randn.html"><span class="kw2">randn</span></a><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="nu0">3</span>,<span class="nu0">4</span>,<span class="nu0">5</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br/>&gt;&gt; d = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/randn.html"><span class="kw2">randn</span></a><span class="br0">&#40;</span><span class="br0">&#91;</span><span class="nu0">3</span>,<span class="nu0">4</span>,<span class="nu0">7</span><span class="br0">&#93;</span><span class="br0">&#41;</span>;<br/>&gt;&gt; e = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/cat.html"><span class="kw2">cat</span></a><span class="br0">&#40;</span><span class="nu0">3</span>,c,d<span class="br0">&#41;</span>;<br/>&gt;&gt; <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/size.html"><span class="kw2">size</span></a><span class="br0">&#40;</span>e<span class="br0">&#41;</span> <br/>   <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/ans.html"><span class="kw2">ans</span></a> =<br/>&#160;<br/>    <span class="nu0">3</span>    <span class="nu0">4</span>   <span class="nu0">12</span><br/>&#160;<br/>&#160;</pre>
<h2><span class="mw-headline" id="Maxima"><a href="/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=83" title="Edit section: Maxima">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">u: [1, 2, 3, 4]$<br/>v: [5, 6, 7, 8, 9, 10]$<br/>append(u, v);<br/>/* [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] */<br/>&#160;<br/>/* There are also functions for matrices */<br/>&#160;<br/>a: matrix([6, 1, 8],<br/>          [7, 5, 3],<br/>          [2, 9, 4])$<br/>&#160;<br/>addcol(a, ident(3));<br/>/* matrix([6, 1, 8, 1, 0, 0],<br/>          [7, 5, 3, 0, 1, 0],<br/>          [2, 9, 4, 0, 0, 1]) */<br/>&#160;<br/>addrow(a, ident(3));<br/>/* matrix([6, 1, 8],<br/>          [7, 5, 3],<br/>          [2, 9, 4],<br/>          [1, 0, 0],<br/>          [0, 1, 0],<br/>          [0, 0, 1]) */</pre>
<h2><span class="mw-headline" id="Mercury"><a href="/wiki/Category:Mercury" title="Category:Mercury">Mercury</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=84" title="Edit section: Mercury">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">A `append` B = C</pre>
<p>It <i>could</i> be "as simple as array1 + array2", but the 'array' module names the operation 'append' rather than '+'. It's tempting to just say that Mercury supports ad-hoc polymorphism - it can infer that a bare '+' refers to 'float.+' or 'int.+' (or that the 'append' above is array.append, rather than list.append), by the types involved - but it also handles other ambiguities in the same way. For instance, Mercury (like Prolog and Erlang) treats the arity of a function as part of its name, where <i>a(1, 2)</i> and <i>a(1)</i> involve the distinct functions a/2 and a/1. But Mercury also (unlike Prolog and Erlang) supports <a href="/wiki/Currying" title="Currying">currying</a>, where <i>a(1)</i> is a function that accepts a/2's second argument. So, is <i>[a(X), a(Y), a(Z)]</i> a list of whatever type a/1 evaluates to, or is it a list of curried a/2?
</p>
<h2><span class="mw-headline" id="Nemerle"><a href="/wiki/Category:Nemerle" title="Category:Nemerle">Nemerle</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=85" title="Edit section: Nemerle">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">using System.Console;<br/>using Nemerle.Collections;<br/>&#160;<br/>module ArrayCat<br/>{<br/>    Main()&#160;: void<br/>    {<br/>        def arr1 = array[1, 2, 3]; def arr2 = array[4, 5, 6];<br/>        def arr12 = arr1.Append(arr2);                       // &lt;----<br/>        foreach (i in arr12) Write($&quot;$i  &quot;);<br/>    }<br/>}</pre>
<h2><span class="mw-headline" id="NetRexx"><a href="/wiki/Category:NetRexx" title="Category:NetRexx">NetRexx</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=86" title="Edit section: NetRexx">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>NetRexx arrays are identical to <a href="/wiki/Java" title="Java" class="mw-redirect">Java's</a> so all the techniques described in the <a href="#Java">Java</a> section apply to NetRexx too. This example uses the <tt>Collection</tt> classes to merge two arrays.
</p>
<pre class="netrexx highlighted_source"><span class="coMULTI">/* NetRexx */</span><br/>options replace format comments java crossref nobinary<br/>&#160;<br/>cymru =  <span class="br0">&#91;</span> <span class="st0">'Ogof Ffynnon Ddu'</span>, <span class="st0">'Ogof Draenen'</span> <span class="br0">&#93;</span><br/>&#160;<br/>dlm = <span class="st0">'-'</span>.<span class="kw6">copies</span><span class="br0">&#40;</span><span class="nu0">40</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="kw1">say</span> dlm<br/><span class="kw1">loop</span> c_ = <span class="nu0">0</span> to cymru.<span class="me0">length</span> - <span class="nu0">1</span><br/>  <span class="kw1">say</span> c_ cymru<span class="br0">&#91;</span>c_<span class="br0">&#93;</span><br/>  <span class="kw3">end</span> c_<br/>&#160;<br/>yorks = <span class="br0">&#91;</span> <span class="st0">'Malham Tarn Pot'</span>, <span class="st0">'Greygill Hole'</span> <span class="br0">&#93;</span><br/>&#160;<br/><span class="kw1">say</span> dlm<br/><span class="kw1">loop</span> y_ = <span class="nu0">0</span> to yorks.<span class="me0">length</span> - <span class="nu0">1</span><br/>  <span class="kw1">say</span> y_ yorks<span class="br0">&#91;</span>y_<span class="br0">&#93;</span><br/>  <span class="kw3">end</span> y_<br/>&#160;<br/>merge = ArrayList<span class="br0">&#40;</span><span class="br0">&#41;</span><br/>merge.<span class="me0">addAll</span><span class="br0">&#40;</span>Arrays.<span class="me0">asList</span><span class="br0">&#40;</span>cymru<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>merge.<span class="me0">addAll</span><span class="br0">&#40;</span>Arrays.<span class="me0">asList</span><span class="br0">&#40;</span>yorks<span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="kw1">say</span> dlm<br/>merged = merge.<span class="me0">toArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="kw1">loop</span> m_ = <span class="nu0">0</span> to merged.<span class="me0">length</span> - <span class="nu0">1</span><br/>  <span class="kw1">say</span> m_ merged<span class="br0">&#91;</span>m_<span class="br0">&#93;</span><br/>  <span class="kw3">end</span> m_</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
---------------------------------------- 
0 Ogof Ffynnon Ddu 
1 Ogof Draenen 
---------------------------------------- 
0 Malham Tarn Pot 
1 Greygill Hole 
---------------------------------------- 
0 Ogof Ffynnon Ddu 
1 Ogof Draenen 
2 Malham Tarn Pot 
3 Greygill Hole 
</pre>
<h2><span class="mw-headline" id="NewLISP"><a href="/wiki/Category:NewLISP" title="Category:NewLISP">NewLISP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=87" title="Edit section: NewLISP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="newlisp highlighted_source"><span class="co1">; file:   arraycon.lsp</span><br/><span class="co1">; url:    http://rosettacode.org/wiki/Array_concatenation</span><br/><span class="co1">; author: oofoe 2012-01-28</span><br/>&#160;<br/><span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#println"><span class="kw1">println</span></a> <span class="st0">&quot;Append lists:  &quot;</span> <span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#append"><span class="kw1">append</span></a> <span class="sy0">'</span><span class="br0">&#40;</span><span class="nu0">3</span> a <span class="nu0">5</span> <span class="nu0">3</span><span class="br0">&#41;</span> <span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#sequence"><span class="kw1">sequence</span></a> <span class="nu0">1</span> <span class="nu0">9</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#println"><span class="kw1">println</span></a> <span class="st0">&quot;Multi append:  &quot;</span> <br/>         <span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#append"><span class="kw1">append</span></a> <span class="sy0">'</span><span class="br0">&#40;</span>this is<span class="br0">&#41;</span><br/>                 <span class="sy0">'</span><span class="br0">&#40;</span>a test<span class="br0">&#41;</span><br/>                 <span class="sy0">'</span><span class="br0">&#40;</span>of the emergency<span class="br0">&#41;</span><br/>                 <span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#sequence"><span class="kw1">sequence</span></a> <span class="nu0">3</span> <span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#println"><span class="kw1">println</span></a> <span class="st0">&quot;Append arrays: &quot;</span> <br/>         <span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#append"><span class="kw1">append</span></a> <span class="sy0">'</span><span class="br0">&#40;</span><span class="br0">&#40;</span>x <span class="nu0">56</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>b <span class="nu0">99</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">'</span><span class="br0">&#40;</span><span class="br0">&#40;</span>z <span class="nu0">34</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>c <span class="nu0">23</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>r <span class="nu0">88</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span><a href="http://www.newlisp.org/downloads/newlisp_manual.html#exit"><span class="kw1">exit</span></a><span class="br0">&#41;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>Append lists:  (3 a 5 3 1 2 3 4 5 6 7 8 9)
Multi append:  (this is a test of the emergency 3 2 1)
Append arrays: ((x 56) (b 99) (z 34) (c 23) (r 88))
</pre>
<h2><span class="mw-headline" id="Nim"><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=88" title="Edit section: Nim">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Dynamic sized Sequences can simply be concatenated:
</p>
<pre class="text highlighted_source">var<br/>  x = @[1,2,3,4,5,6]<br/>  y = @[7,8,9,10,11]<br/>  z = x &amp; y</pre>
<p>Static sized Arrays:
</p>
<pre class="text highlighted_source">var<br/>  a = [1,2,3,4,5,6]<br/>  b = [7,8,9,10,11]<br/>  c: array[11, int]<br/>&#160;<br/>c[0..5] = a<br/>c[6..10] = b</pre>
<h2><span class="mw-headline" id="Oberon-2"><a href="/wiki/Category:Oberon-2" title="Category:Oberon-2">Oberon-2</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=89" title="Edit section: Oberon-2">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="oberon2 highlighted_source">&#160;<br/><span class="kw1">MODULE</span> ArrayConcat;<br/><span class="kw1">IMPORT</span><br/>  Out;<br/><span class="kw1">TYPE</span><br/>  IntArray <span class="sy0">=</span> <span class="kw1">POINTER</span> <span class="kw1">TO</span> <span class="kw1">ARRAY</span> <span class="kw1">OF</span> <span class="kw4">INTEGER</span>;<br/><span class="kw1">VAR</span><br/>  x<span class="sy0">,</span> y<span class="sy0">,</span> z<span class="sy0">:</span> IntArray;<br/>&#160;<br/>  <span class="kw1">PROCEDURE</span> InitArray<span class="br0">&#40;</span><span class="kw1">VAR</span> x<span class="sy0">:</span> IntArray;from<span class="sy0">:</span> <span class="kw4">INTEGER</span><span class="br0">&#41;</span>;<br/>  <span class="kw1">VAR</span><br/>    i<span class="sy0">:</span> <span class="kw4">LONGINT</span>;<br/>  <span class="kw1">BEGIN</span><br/>    <span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span><br/>      x<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> from;<br/>      <span class="kw3">INC</span><span class="br0">&#40;</span>from<span class="br0">&#41;</span><br/>    <span class="kw1">END</span><br/>  <span class="kw1">END</span> InitArray;<br/>&#160;<br/>  <span class="kw1">PROCEDURE</span> Concat<span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">:</span> IntArray; <span class="kw1">VAR</span> z<span class="sy0">:</span> IntArray<span class="br0">&#41;</span>;<br/>  <span class="kw1">VAR</span><br/>    i<span class="sy0">:</span> <span class="kw4">LONGINT</span>;<br/>  <span class="kw1">BEGIN</span><br/>    <span class="kw3">ASSERT</span><span class="br0">&#40;</span><span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y^<span class="br0">&#41;</span> &lt;<span class="sy0">=</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>z^<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>    <span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> x<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span>;<br/>    <span class="kw1">FOR</span> i <span class="sy0">:=</span> <span class="nu0">0</span> <span class="kw1">TO</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y^<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">DO</span> z<span class="br0">&#91;</span>i <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span><span class="br0">&#93;</span> <span class="sy0">:=</span> y<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="kw1">END</span><br/>  <span class="kw1">END</span> Concat;<br/>&#160;<br/>  <span class="kw1">PROCEDURE</span> Show<span class="br0">&#40;</span>x<span class="sy0">:</span> IntArray<span class="br0">&#41;</span>;<br/>  <span class="kw1">VAR</span><br/>    i<span class="sy0">:</span> <span class="kw4">INTEGER</span>;<br/>  <span class="kw1">BEGIN</span><br/>    i <span class="sy0">:=</span> <span class="nu0">0</span>;<br/>    Out.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">'['</span><span class="br0">&#41;</span>;<br/>    <span class="kw1">WHILE</span> <span class="br0">&#40;</span>i &lt; <span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="kw1">DO</span><br/>      Out.<span class="me1">LongInt</span><span class="br0">&#40;</span>x<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#41;</span>;<span class="kw1">IF</span> i &lt; <span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span> <span class="sy0">-</span> <span class="nu0">1</span> <span class="kw1">THEN</span> Out.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">','</span><span class="br0">&#41;</span> <span class="kw1">END</span>;<br/>      <span class="kw3">INC</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>    <span class="kw1">END</span>;<br/>    Out.<span class="me1">Char</span><span class="br0">&#40;</span><span class="st_h">']'</span><span class="br0">&#41;</span>;Out.<span class="me1">Ln</span><br/>  <span class="kw1">END</span> Show;<br/>&#160;<br/><span class="kw1">BEGIN</span><br/>  <span class="coMULTI">(* Standard types *)</span><br/>  <span class="kw3">NEW</span><span class="br0">&#40;</span>x<span class="sy0">,</span><span class="nu0">5</span><span class="br0">&#41;</span>;InitArray<span class="br0">&#40;</span>x<span class="sy0">,</span><span class="nu0">1</span><span class="br0">&#41;</span>;<br/>  <span class="kw3">NEW</span><span class="br0">&#40;</span>y<span class="sy0">,</span><span class="nu0">10</span><span class="br0">&#41;</span>;InitArray<span class="br0">&#40;</span>y<span class="sy0">,</span><span class="nu0">6</span><span class="br0">&#41;</span>;<br/>  <span class="kw3">NEW</span><span class="br0">&#40;</span>z<span class="sy0">,</span><span class="kw3">LEN</span><span class="br0">&#40;</span>x^<span class="br0">&#41;</span> <span class="sy0">+</span> <span class="kw3">LEN</span><span class="br0">&#40;</span>y^<span class="br0">&#41;</span><span class="br0">&#41;</span>;<br/>&#160;<br/>  Concat<span class="br0">&#40;</span>x<span class="sy0">,</span>y<span class="sy0">,</span>z<span class="br0">&#41;</span>;<br/>  Show<span class="br0">&#40;</span>z<span class="br0">&#41;</span><br/>&#160;<br/><span class="kw1">END</span> ArrayConcat.<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
[  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15]
</pre>
<h2><span class="mw-headline" id="Objeck"><a href="/wiki/Category:Objeck" title="Category:Objeck">Objeck</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=90" title="Edit section: Objeck">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="objeck highlighted_source">&#160;<br/><span class="kw1">bundle</span> Default <span class="br0">&#123;</span><br/>  <span class="kw1">class</span> Arithmetic <span class="br0">&#123;</span><br/>     <span class="kw1">function</span> <span class="sy0">:</span> Main<span class="br0">&#40;</span>args <span class="sy0">:</span> <span class="kw2">String</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> ~ <span class="kw2">Nil</span> <span class="br0">&#123;</span><br/>       array1 <span class="sy0">:=</span> <span class="br0">&#91;</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">7</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>       array2 <span class="sy0">:=</span> <span class="br0">&#91;</span><span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>       array3 <span class="sy0">:=</span> Copy<span class="br0">&#40;</span>array1<span class="sy0">,</span> array2<span class="br0">&#41;</span><span class="sy0">;</span><br/>       <span class="kw1">each</span><span class="br0">&#40;</span>i <span class="sy0">:</span> array3<span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>         array3<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">-&gt;</span><span class="me1">PrintLine</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>       <span class="br0">&#125;</span><span class="sy0">;</span><br/>  <span class="br0">&#125;</span><br/>&#160;<br/>  <span class="kw1">function</span> <span class="sy0">:</span> <span class="kw1">native</span> <span class="sy0">:</span> Copy<span class="br0">&#40;</span>array1 <span class="sy0">:</span> <span class="kw2">Int</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">,</span> array2 <span class="sy0">:</span> <span class="kw2">Int</span><span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#41;</span> ~ <span class="kw2">Int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="br0">&#123;</span><br/>     max <span class="sy0">:=</span> array1<span class="sy0">-&gt;</span><span class="me1">Size</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">+</span> array2<span class="sy0">-&gt;</span><span class="me1">Size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>     array3 <span class="sy0">:=</span> Int<span class="sy0">-&gt;</span><span class="me1">New</span><span class="br0">&#91;</span>max<span class="br0">&#93;</span><span class="sy0">;</span><br/>&#160;<br/>     i <span class="sy0">:=</span> <span class="nu0">0</span><span class="sy0">;</span><br/>     <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy0">:=</span> i<span class="sy0">;</span> i <span class="sy0">&lt;</span> array1<span class="sy0">-&gt;</span><span class="me1">Size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="sy0">;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>       array3<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> array1<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span><br/>     <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/>     j <span class="sy0">:=</span> <span class="nu0">0</span><span class="sy0">;</span><br/>     <span class="kw1">for</span><span class="br0">&#40;</span>i <span class="sy0">:=</span> i<span class="sy0">;</span> i <span class="sy0">&lt;</span> max<span class="sy0">;</span> i <span class="sy0">+=</span> <span class="nu0">1</span><span class="sy0">;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span><br/>       array3<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">:=</span> array2<span class="br0">&#91;</span>j<span class="br0">&#93;</span><span class="sy0">;</span><br/>       j <span class="sy0">+=</span> <span class="nu0">1</span><span class="sy0">;</span><br/>     <span class="br0">&#125;</span><span class="sy0">;</span><br/>&#160;<br/>      <span class="kw1">return</span> array3<span class="sy0">;</span><br/>    <span class="br0">&#125;</span><br/>  <span class="br0">&#125;</span><br/><span class="br0">&#125;</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Objective-C"><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=91" title="Edit section: Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>with immutable arrays:
</p>
<pre class="objc highlighted_source"><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>arr1 <span class="sy0">=</span> @<span class="br0">&#91;</span>@1, @2, @3<span class="br0">&#93;</span>;<br/><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>arr2 <span class="sy0">=</span> @<span class="br0">&#91;</span>@4, @5, @6<span class="br0">&#93;</span>;<br/><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>arr3 <span class="sy0">=</span> <span class="br0">&#91;</span>arr1 arrayByAddingObjectsFromArray<span class="sy0">:</span>arr2<span class="br0">&#93;</span>;</pre>
<p>or adding onto a mutable array:
</p>
<pre class="objc highlighted_source"><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>arr1 <span class="sy0">=</span> @<span class="br0">&#91;</span>@1, @2, @3<span class="br0">&#93;</span>;<br/><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>arr2 <span class="sy0">=</span> @<span class="br0">&#91;</span>@4, @5, @6<span class="br0">&#93;</span>;<br/><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span>arr3 <span class="sy0">=</span> <span class="br0">&#91;</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> arrayWithArray<span class="sy0">:</span>arr1<span class="br0">&#93;</span>;<br/><span class="br0">&#91;</span>arr3 addObjectsFromArray<span class="sy0">:</span>arr2<span class="br0">&#93;</span>;</pre>
<h2><span class="mw-headline" id="OCaml"><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=92" title="Edit section: OCaml">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>It is more natural in OCaml to use lists instead of arrays:
</p>
<pre class="ocaml highlighted_source"><span class="sy0">#</span> <span class="kw1">let</span> list1 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="br0">&#93;</span><span class="sy0">;;</span><br/><span class="kw1">val</span> list1 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/><span class="sy0">#</span> <span class="kw1">let</span> list2 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="sy0">;;</span><br/><span class="kw1">val</span> list2 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/><span class="sy0">#</span> <span class="kw1">let</span> list1and2 <span class="sy0">=</span> list1 @ list2<span class="sy0">;;</span><br/><span class="kw1">val</span> list1and2 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="sy0">;</span> <span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="br0">&#93;</span></pre>
<p>If you want to use arrays:
</p>
<pre class="ocaml highlighted_source"><span class="sy0">#</span> <span class="kw1">let</span> array1 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="sy0">|</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="sy0">|</span><span class="br0">&#93;</span><span class="sy0">;;</span><br/><span class="kw1">val</span> array1 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray"><span class="kw4">array</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="sy0">|</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="sy0">|</span><span class="br0">&#93;</span><br/><span class="sy0">#</span> <span class="kw1">let</span> array2 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="sy0">|</span><span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="sy0">|</span><span class="br0">&#93;</span><span class="sy0">;;</span><br/><span class="kw1">val</span> array2 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray"><span class="kw4">array</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="sy0">|</span><span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="sy0">|</span><span class="br0">&#93;</span><br/><span class="sy0">#</span> <span class="kw1">let</span> array1and2 <span class="sy0">=</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Array.html"><span class="kw2">Array</span></a><span class="sy0">.</span>append array1 array2<span class="sy0">;;</span><br/><span class="kw1">val</span> array1and2 <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEint"><span class="kw4">int</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEarray"><span class="kw4">array</span></a> <span class="sy0">=</span> <span class="br0">&#91;</span><span class="sy0">|</span><span class="nu0">1</span><span class="sy0">;</span> <span class="nu0">2</span><span class="sy0">;</span> <span class="nu0">3</span><span class="sy0">;</span> <span class="nu0">4</span><span class="sy0">;</span> <span class="nu0">5</span><span class="sy0">;</span> <span class="nu0">6</span><span class="sy0">|</span><span class="br0">&#93;</span></pre>
<h2><span class="mw-headline" id="Oforth"><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=93" title="Edit section: Oforth">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">[1, 2, 3 ] [ 4, 5, 6, 7 ] + </pre>
<h2><span class="mw-headline" id="Onyx"><a href="/wiki/Category:Onyx" title="Category:Onyx">Onyx</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=94" title="Edit section: Onyx">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source"># With two arrays on the stack, cat pops<br/># them, concatenates them, and pushes the result back<br/># on the stack. This works with arrays of integers,<br/># strings, or whatever. For example,<br/>&#160;<br/>[1 2 3] [4 5 6] cat # result: [1 2 3 4 5 6]<br/>[`abc' `def'] [`ghi' `jkl'] cat # result: [`abc' `def' `ghi' `jkl']<br/>&#160;<br/># To concatenate more than two arrays, push the number of arrays<br/># to concatenate onto the stack and use ncat. For example,<br/>&#160;<br/>[1 true `a'] [2 false `b'] [`3rd array'] 3 ncat<br/># leaves [1 true `a' 2 false `b' `3rd array'] on the stack</pre>
<h2><span class="mw-headline" id="ooRexx"><a href="/wiki/Category:OoRexx" title="Category:OoRexx">ooRexx</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=95" title="Edit section: ooRexx">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="oorexx highlighted_source">&#160;<br/>a = <span class="sy0">.</span>array~of<span class="br0">&#40;</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span><span class="br0">&#41;</span><br/><span class="kw1">say</span> <span class="st0">&quot;Array a has &quot;</span> a~items <span class="st0">&quot;items&quot;</span><br/>b = <span class="sy0">.</span>array~of<span class="br0">&#40;</span><span class="nu0">4</span>,<span class="nu0">5</span>,<span class="nu0">6</span><span class="br0">&#41;</span><br/><span class="kw1">say</span> <span class="st0">&quot;Array b has &quot;</span> b~items <span class="st0">&quot;items&quot;</span><br/>a~appendall<span class="br0">&#40;</span>b<span class="br0">&#41;</span>        <span class="co1">-- adds all items from b to a</span><br/><span class="kw1">say</span> <span class="st0">&quot;Array a now has &quot;</span> a~items <span class="st0">&quot;<br/></span></pre>
<h2><span class="mw-headline" id="Order"><a href="/wiki/Category:Order" title="Category:Order">Order</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=96" title="Edit section: Order">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Order supports two main aggregate types: tuples and sequences (similar to lists in other languages). Most "interesting" operations are limited to sequences, but both support an append operation, and each can be converted to the other.
</p>
<pre class="c highlighted_source"><span class="co2">#include &lt;order/interpreter.h&gt;</span><br/>&#160;<br/>ORDER_PP<span class="br0">&#40;</span> 8tuple_append<span class="br0">&#40;</span>8tuple<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">,</span> 8tuple<span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">,</span> 8pair<span class="br0">&#40;</span><span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br/><span class="co1">// -&gt; (1,2,3,4,5,6,7,8)</span><br/>&#160;<br/>ORDER_PP<span class="br0">&#40;</span> 8seq_append<span class="br0">&#40;</span>8seq<span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">,</span> 8seq<span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">,</span> 8seq<span class="br0">&#40;</span><span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><br/><span class="co1">// -&gt; (1)(2)(3)(4)(5)(6)(7)(8)</span></pre>
<h2><span class="mw-headline" id="OxygenBasic"><a href="/wiki/Category:OxygenBasic" title="Category:OxygenBasic">OxygenBasic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=97" title="Edit section: OxygenBasic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>'CREATE DYNAMIC ARRAY SPACES USING STRINGS<br/>&#160;<br/>string sa=nuls 5* sizeof float<br/>string sb=sa<br/>&#160;<br/>'MAP ARRAY VARIABLES ONTO STRINGS<br/>&#160;<br/>float a at *sa<br/>float b at *sb<br/>&#160;<br/>'ASSIGN SOME VALUES<br/>&#160;<br/>a&lt;=10,20,30,40,50<br/>b&lt;=60,70,80,90,00<br/>&#160;<br/>'ADD ARRAY B TO A BY STRING CONCATENATION<br/>&#160;<br/>sa+=sb<br/>&#160;<br/>'TEST<br/>&#160;<br/>print a[7] 'result 70<br/>&#160;</pre>
<h2><span class="mw-headline" id="Oz"><a href="/wiki/Category:Oz" title="Category:Oz">Oz</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=98" title="Edit section: Oz">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>List are concatenated with <code>List.append</code> (shortcut: <code>Append</code>). Tuples are concatened with <code>Tuple.append</code>. Arrays do exist in Oz, but are rarely used.
</p>
<pre class="oz highlighted_source"><span class="co1">%% concatenating 2 lists</span><br/><span class="br0">&#123;</span>Append <span class="br0">&#91;</span>a b<span class="br0">&#93;</span> <span class="br0">&#91;</span>c d<span class="br0">&#93;</span><span class="br0">&#125;</span> = <span class="br0">&#91;</span>a b c d<span class="br0">&#93;</span><br/>&#160;<br/><span class="co1">%% concatenating 2 tuples</span><br/><span class="br0">&#123;</span>Tuple<span class="sy0">.</span>append t<span class="br0">&#40;</span>1 2 3<span class="br0">&#41;</span> u<span class="br0">&#40;</span>4 5 6<span class="br0">&#41;</span><span class="br0">&#125;</span> = u<span class="br0">&#40;</span>1 2 3 4 5 6<span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="PARI.2FGP"><a href="/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=99" title="Edit section: PARI/GP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="parigp highlighted_source"><span class="kw1">concat</span><span class="br0">&#40;</span>u<span class="sy0">,</span>v<span class="br0">&#41;</span></pre>
<h2><span class="mw-headline" id="Pascal"><a href="/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=100" title="Edit section: Pascal">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<dl><dd><i>See <a href="/wiki/Array_concatenation#Delphi" title="Array concatenation">Delphi</a></i></dd></dl>
<h2><span class="mw-headline" id="Perl"><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=101" title="Edit section: Perl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In Perl, arrays placed into list context are flattened:
</p>
<pre class="perl highlighted_source"><span class="kw1">my</span> <span class="re0">@arr1</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="kw1">my</span> <span class="re0">@arr2</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="kw1">my</span> <span class="re0">@arr3</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="re0">@arr1</span><span class="sy0">,</span> <span class="re0">@arr2</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>The <code><a rel="nofollow" class="external text" href="http://perldoc.perl.org/functions/push.html">push</a></code> function appends elements onto an existing array:
</p>
<pre class="perl highlighted_source"><span class="kw1">my</span> <span class="re0">@arr1</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="kw1">my</span> <span class="re0">@arr2</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><a href="http://perldoc.perl.org/functions/push.html"><span class="kw3">push</span></a> <span class="re0">@arr1</span><span class="sy0">,</span> <span class="re0">@arr2</span><span class="sy0">;</span><br/><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> <span class="st0">&quot;@arr1<span class="es0">\n</span>&quot;</span><span class="sy0">;</span> <span class="co1"># prints &quot;1 2 3 4 5 6&quot;</span></pre>
<h2><span class="mw-headline" id="Perl_6"><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=102" title="Edit section: Perl 6">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Rakudo" title="Rakudo">rakudo</a> version 2015-10-01</div>
<pre class="perl6 highlighted_source"><span class="co1"># the prefix:&lt;|&gt; operator (called &quot;slip&quot;) can be used to interpolate arrays into a list:</span><br/><span class="kw2">sub</span> cat<span class="sy0">-</span>arrays<span class="br0">&#40;</span><span class="re0">@a</span><span class="sy0">,</span> <span class="re0">@b</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <br/>	<span class="sy0">|</span><span class="re0">@a</span><span class="sy0">,</span> <span class="sy0">|</span><span class="re0">@b</span> <br/><span class="br0">&#125;</span><br/>&#160;<br/><span class="kw1">my</span> <span class="re0">@a1</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="kw1">my</span> <span class="re0">@a2</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>cat<span class="sy0">-</span>arrays<span class="br0">&#40;</span><span class="re0">@a1</span><span class="sy0">,</span><span class="re0">@a2</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">join</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><span class="sy0">.</span><span class="kw3">say</span><span class="sy0">;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>1, 2, 3, 2, 3, 4</pre>
<h2><span class="mw-headline" id="Phix"><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=103" title="Edit section: Phix">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">sequence s1 = {1,2,3}, s2 = {4,5,6}<br/>? s1 &amp; s2</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
 {1,2,3,4,5,6}
</pre>
<h2><span class="mw-headline" id="PHP"><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=104" title="Edit section: PHP">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="php highlighted_source"><span class="re0">$arr1</span> <span class="sy0">=</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="re0">$arr2</span> <span class="sy0">=</span> <a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">&#40;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#41;</span><span class="sy0">;</span><br/><span class="re0">$arr3</span> <span class="sy0">=</span> <a href="http://www.php.net/array_merge"><span class="kw3">array_merge</span></a><span class="br0">&#40;</span><span class="re0">$arr1</span><span class="sy0">,</span> <span class="re0">$arr2</span><span class="br0">&#41;</span><span class="sy0">;</span></pre>
<h2><span class="mw-headline" id="PicoLisp"><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=105" title="Edit section: PicoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>PicoLisp has no built-in array data type. Lists are used instead.
</p><p>There are destructive concatenations:
</p>
<pre class="text highlighted_source">: (setq  A (1 2 3)  B '(a b c))<br/>-&gt; (a b c)<br/>: (conc A B)                        # Concatenate lists in 'A' and 'B'<br/>-&gt; (1 2 3 a b c)<br/>: A<br/>-&gt; (1 2 3 a b c)                    # Side effect: List in 'A' is modified!</pre>
<p>and non-destructive concatenations:
</p>
<pre class="text highlighted_source">: (setq  A (1 2 3)  B '(a b c))<br/>-&gt; (a b c)<br/>: (append A B)                      # Append lists in 'A' and 'B'<br/>-&gt; (1 2 3 a b c)<br/>: A           <br/>-&gt; (1 2 3)<br/>: B<br/>-&gt; (a b c)                          # Arguments are not modified</pre>
<h2><span class="mw-headline" id="PL.2FI"><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=106" title="Edit section: PL/I">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Trivial example requires no computational statement.
Note that the arrays are not in static storage:
</p>
<pre class="text highlighted_source">&#160;<br/>   declare x(12) fixed;<br/>   declare b(5) fixed defined x;<br/>   declare c(7) fixed defined x(1sub+5);<br/>&#160;</pre>
<p>A more general example using dynamic bounds.
Again, no computation statement is required.
</p>
<pre class="text highlighted_source">&#160;<br/>   declare x(m+n) fixed;<br/>   declare b(m) fixed defined x;<br/>   declare c(n) fixed defined x(1sub+hbound(b,1));<br/>&#160;</pre>
<p>An alternative, that can be used to advantage for matrices
as well as vectors, follows. This example illustrates
extending a matrix diagonally. Although fixed array bounds
are used in the declarations, the bounds can be dynamic.
Matrix B is extended by placing matrix C on its diagonal:
</p>
<pre class="text highlighted_source">&#160;<br/>   declare a(5,6) fixed;<br/>   declare b(3,4) fixed defined a(1sub, 2sub);<br/>   declare c(2,2) fixed defined a(1sub+hbound(b,1), 2sub+hbound(b,2));<br/>   declare (i, j, k) fixed;<br/>&#160;<br/>   a = 0;<br/>   put skip list ('Please type elements for a 3 x 4 matrix:');<br/>   get list (b);<br/>   put skip list ('Please type elements for a 2 x 2 matrix:');<br/>   get list (c);<br/>   put skip edit (c) ( skip, (hbound(c,2)) f(5,0) );<br/>&#160;<br/>   put skip list ('Composite matrix:');<br/>   put skip edit (a) ( skip, (hbound(a,2)) f(5,0) );<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre class="text highlighted_source">&#160;<br/>Please type elements for a 3 x 4 matrix: <br/>&#160;<br/>Please type elements for a 2 x 2 matrix: <br/>&#160;<br/>   13   14<br/>   15   16<br/>Composite matrix: <br/>&#160;<br/>    1    2    3    4    0    0<br/>    5    6    7    8    0    0<br/>    9   10   11   12    0    0<br/>    0    0    0    0   13   14<br/>    0    0    0    0   15   16<br/>&#160;<br/>&#160;</pre>
<h2><span class="mw-headline" id="PostScript"><a href="/wiki/Category:PostScript" title="Category:PostScript">PostScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=107" title="Edit section: PostScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta libheader"><b>Library:</b> <a href="/wiki/Category:Initlib" title="Category:Initlib">initlib</a></div>
<pre class="text highlighted_source">&#160;<br/>[1 2 3 4] [5 6 7 8] concat<br/>&#160;</pre>
<h2><span class="mw-headline" id="PowerShell"><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=108" title="Edit section: PowerShell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="powershell highlighted_source"><span class="re0">$a</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><br/><span class="re0">$b</span> <span class="sy0">=</span> <span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><br/>&#160;<br/><span class="re0">$c</span> <span class="sy0">=</span> <span class="re0">$a</span> <span class="sy0">+</span> <span class="re0">$b</span><br/><span class="kw1">Write-Host</span> $c</pre>
<h2><span class="mw-headline" id="Prolog"><a href="/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=109" title="Edit section: Prolog">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="prolog highlighted_source">&#160;<br/><span class="sy1">?-</span> append<span class="br0">&#40;</span><span class="br0">&#91;</span><span class="nu0">1</span><span class="sy4">,</span><span class="nu0">2</span><span class="sy4">,</span><span class="nu0">3</span><span class="br0">&#93;</span><span class="sy4">,</span><span class="br0">&#91;</span><span class="nu0">4</span><span class="sy4">,</span><span class="nu0">5</span><span class="sy4">,</span><span class="nu0">6</span><span class="br0">&#93;</span><span class="sy4">,</span>R<span class="br0">&#41;</span><span class="sy4">.</span><br/>R <span class="sy6">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy4">,</span> <span class="nu0">2</span><span class="sy4">,</span> <span class="nu0">3</span><span class="sy4">,</span> <span class="nu0">4</span><span class="sy4">,</span> <span class="nu0">5</span><span class="sy4">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><span class="sy4">.</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="PureBasic"><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=110" title="Edit section: PureBasic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="purebasic highlighted_source"><span class="kw1">Procedure</span> displayArray<span class="br0">&#40;</span>Array a<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, msg.s<span class="br0">&#41;</span><br/>  <span class="kw1">Protected</span> i<br/>  <span class="kw2">Print</span><span class="br0">&#40;</span>msg <span class="sy0">+</span> <span class="st0">&quot; [&quot;</span><span class="br0">&#41;</span><br/>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="kw2">Print</span><span class="br0">&#40;</span><span class="kw2">Str</span><span class="br0">&#40;</span>a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    <span class="kw1">If</span> i <span class="sy0">&lt;&gt;</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>      <span class="kw2">Print</span><span class="br0">&#40;</span><span class="st0">&quot;, &quot;</span><span class="br0">&#41;</span><br/>    <span class="kw1">EndIf</span> <br/>  <span class="kw1">Next</span> <br/>  <span class="kw2">PrintN</span><span class="br0">&#40;</span><span class="st0">&quot;]&quot;</span><span class="br0">&#41;</span><br/><span class="kw1">EndProcedure</span><br/>&#160;<br/><span class="kw1">Procedure</span> randomElements<span class="br0">&#40;</span>Array a<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, lo, hi<span class="br0">&#41;</span><br/>  <span class="kw1">Protected</span> i<br/>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    a<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> <span class="kw2">random</span><span class="br0">&#40;</span>hi <span class="sy0">-</span> lo<span class="br0">&#41;</span> <span class="sy0">+</span> lo<br/>  <span class="kw1">Next</span> <br/><span class="kw1">EndProcedure</span><br/>&#160;<br/><span class="kw1">Procedure</span> arrayConcat<span class="br0">&#40;</span>Array a<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, Array b<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span>, Array c<span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  <span class="kw1">Protected</span> i, newSize <span class="sy0">=</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> ArraySize<span class="br0">&#40;</span>b<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><br/>  <span class="kw1">Dim</span> c<span class="br0">&#40;</span>newSize<span class="br0">&#41;</span><br/>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    c<span class="br0">&#40;</span>i<span class="br0">&#41;</span> <span class="sy0">=</span> a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>  <span class="kw1">Next</span><br/>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">To</span> ArraySize<span class="br0">&#40;</span>b<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>    c<span class="br0">&#40;</span>i <span class="sy0">+</span> ArraySize<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="sy0">=</span> b<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/>  <span class="kw1">Next</span><br/><span class="kw1">EndProcedure</span><br/>&#160;<br/>&#160;<br/><span class="kw1">If</span> <span class="kw2">OpenConsole</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="kw1">Dim</span> a<span class="br0">&#40;</span><span class="kw2">random</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>  <span class="kw1">Dim</span> b<span class="br0">&#40;</span><span class="kw2">random</span><span class="br0">&#40;</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span><br/>  <span class="kw1">Dim</span> c<span class="br0">&#40;</span><span class="nu0">0</span><span class="br0">&#41;</span> <span class="co1">;array will be resized by arrayConcat()</span><br/>&#160;<br/>  randomElements<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">-</span><span class="nu0">5</span>, <span class="nu0">5</span><span class="br0">&#41;</span><br/>  randomElements<span class="br0">&#40;</span>b<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="sy0">-</span><span class="nu0">5</span>, <span class="nu0">5</span><span class="br0">&#41;</span><br/>  displayArray<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st0">&quot;a:&quot;</span><span class="br0">&#41;</span><br/>  displayArray<span class="br0">&#40;</span>b<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st0">&quot;b:&quot;</span><span class="br0">&#41;</span><br/>  arrayConcat<span class="br0">&#40;</span>a<span class="br0">&#40;</span><span class="br0">&#41;</span>, b<span class="br0">&#40;</span><span class="br0">&#41;</span>, c<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>  displayArray<span class="br0">&#40;</span>c<span class="br0">&#40;</span><span class="br0">&#41;</span>, <span class="st0">&quot;concat of a[] + b[]:&quot;</span><span class="br0">&#41;</span><br/>&#160;<br/>  <span class="kw2">Print</span><span class="br0">&#40;</span>#CRLF$ <span class="sy0">+</span> #CRLF$ <span class="sy0">+</span> <span class="st0">&quot;Press ENTER to exit&quot;</span><span class="br0">&#41;</span><br/>  <span class="kw2">Input</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/>  <span class="kw2">CloseConsole</span><span class="br0">&#40;</span><span class="br0">&#41;</span><br/><span class="kw1">EndIf</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>a: [5, 2, -4, -1, -2]
b: [0, -4, -1]
concat of a[] + b[]: [5, 2, -4, -1, -2, 0, -4, -1]</pre>
<h2><span class="mw-headline" id="Python"><a href="/wiki/Category:Python" title="Category:Python">Python</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=111" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The <code><a rel="nofollow" class="external text" href="http://docs.python.org/library/stdtypes.html#sequence-types-str-unicode-list-tuple-buffer-xrange">+</a></code> operator concatenates two lists and returns a new list.
The <code><a rel="nofollow" class="external text" href="http://docs.python.org/library/stdtypes.html#mutable-sequence-types">list.extend</a></code> method appends elements of another list to the receiver.
</p>
<pre class="python highlighted_source">arr1 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/>arr2 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>arr3 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">&#93;</span><br/>arr4 <span class="sy0">=</span> arr1 + arr2<br/><span class="kw1">assert</span> arr4 <span class="sy0">==</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>arr4.<span class="me1">extend</span><span class="br0">&#40;</span>arr3<span class="br0">&#41;</span><br/><span class="kw1">assert</span> arr4 <span class="sy0">==</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">&#93;</span></pre>
<p>Note: list.extend is normally accomplished using the += operator like this:
</p>
<pre class="python highlighted_source">arr5 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>arr6 <span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">&#93;</span><br/>arr6 +<span class="sy0">=</span> arr5<br/><span class="kw1">assert</span> arr6 <span class="sy0">==</span> <span class="br0">&#91;</span><span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">9</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">6</span><span class="br0">&#93;</span></pre>
<h2><span class="mw-headline" id="R"><a href="/wiki/Category:R" title="Category:R">R</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=112" title="Edit section: R">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>a1 &lt;- c(1, 2, 3)<br/>a2 &lt;- c(3, 4, 5)<br/>a3 &lt;- c(a1, a2)<br/>&#160;</pre>
<h2><span class="mw-headline" id="Racket"><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=113" title="Edit section: Racket">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>(vector-append #(1 2 3 4) #(5 6 7) #(8 9 10))<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
'#(1 2 3 4 5 6 7 8 9 10)
</pre>
<h2><span class="mw-headline" id="RapidQ"><a href="/wiki/Category:RapidQ" title="Category:RapidQ">RapidQ</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=114" title="Edit section: RapidQ">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="vb highlighted_source">&#160;<br/>DEFINT A(1 <span class="kw3">to</span> 4) = {1, 2, 3, 4}<br/>DEFINT B(1 <span class="kw3">to</span> 4) = {10, 20, 30, 40}<br/>&#160;<br/><span class="co1">'Append array B to array A<br/></span><span class="kw4">Redim</span> A(1 <span class="kw3">to</span> 8) <span class="kw4">as</span> <span class="kw1">integer</span><br/>MEMCPY(varptr(A(5)), varptr(B(1)), Sizeof(<span class="kw1">integer</span>)*4)<br/>&#160;</pre>
<h2><span class="mw-headline" id="REBOL"><a href="/wiki/Category:REBOL" title="Category:REBOL">REBOL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=115" title="Edit section: REBOL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="rebol highlighted_source">&#160;<br/>a1: <span class="br0">&#91;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#93;</span><br/>a2: <span class="br0">&#91;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#93;</span><br/>a3: <span class="br0">&#91;</span><span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><span class="br0">&#93;</span><br/>&#160;<br/><span class="kw3">append</span> a1 a2 <span class="co1">; -&gt; [1 2 3 4 5 6]</span><br/>&#160;<br/><span class="kw3">append</span><span class="sy0">/</span>only a1 a3 <span class="co1">; -&gt; [1 2 3 4 5 6 [7 8 9]]</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Retro"><a href="/wiki/Category:Retro" title="Category:Retro">Retro</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=116" title="Edit section: Retro">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">needs array'<br/>&#160;<br/>^array'new{ 1 2 3 }  ^array'new{ 4 5 6 }  ^array'append</pre>
<h2><span class="mw-headline" id="REXX"><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=117" title="Edit section: REXX">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>REXX doesn't have arrays as such, but it has something that looks, feels, and tastes like arrays:
</p>
<dl><dd><dl><dd><dl><dd><dl><dd><ul><li> stemmed variables</li></ul></dd></dl></dd></dl></dd></dl></dd></dl>
<p>Simply, a stemmed array is a variable with an appended dot (<b>.</b>) followed by a symbol (it's normally an integer or an alphanumeric name).
</p><p>There is no way to preallocate a stemmed variable, REXX just assigns them as they are created (assigned a value). <br/>
</p><p>As such, there isn't an easy way to keep track of the number of "elements" in a REXX "array" &#160; (unless the programmer maintains a list). <br/>
</p><p>Consider:
</p>
<pre class="rexx highlighted_source">a<span class="sy0">.</span>1 =  <span class="nu0">10</span><br/>a<span class="sy0">.</span>2 =  <span class="nu0">22.7</span><br/>a<span class="sy0">.</span>7 = -<span class="nu0">12</span></pre>
<p>where now we have three "elements", and they are disjointed (another word for <i>sparse</i>).
<br/>There are ways to handle this in REXX however.
<br/><br/>When assigning stemmed arrays, it is common to assign "element" zero to the number of values,
<br/>assuming that the stemmed variables are sequential.
<br/><br/><b>example:</b>
</p>
<pre class="rexx highlighted_source">fact<span class="sy0">.</span>0=<span class="nu0">8</span><br/>fact<span class="sy0">.</span>1=    <span class="nu0">1</span><br/>fact<span class="sy0">.</span>2=    <span class="nu0">2</span><br/>fact<span class="sy0">.</span>3=    <span class="nu0">6</span><br/>fact<span class="sy0">.</span>4=   <span class="nu0">24</span><br/>fact<span class="sy0">.</span>5=  <span class="nu0">120</span><br/>fact<span class="sy0">.</span>6=  <span class="nu0">720</span><br/>fact<span class="sy0">.</span>7= <span class="nu0">5040</span><br/>fact<span class="sy0">.</span>8=<span class="nu0">40320</span></pre>
<p>To concat two "arrays" in REXX, the following assumes that the stemmed variables are in order, with no gaps, and none have a "null" value.
</p>
<pre class="rexx highlighted_source"><span class="coMULTI">/*REXX program to demonstrates how to perform array concatenation.*/</span><br/>&#160;<br/>p<span class="sy0">.</span>=                                    <span class="coMULTI">/*(below) a short list of primes.*/</span><br/>p<span class="sy0">.</span>1=<span class="nu0">2</span>;    p<span class="sy0">.</span>2=<span class="nu0">3</span>;     p<span class="sy0">.</span>3=<span class="nu0">5</span>;     p<span class="sy0">.</span>4=<span class="nu0">7</span>;     p<span class="sy0">.</span>5=<span class="nu0">11</span>;   p<span class="sy0">.</span>6=<span class="nu0">13</span><br/>p<span class="sy0">.</span>7=<span class="nu0">17</span>;   p<span class="sy0">.</span>8=<span class="nu0">19</span>;    p<span class="sy0">.</span>9=<span class="nu0">23</span>;    p<span class="sy0">.</span>10=<span class="nu0">27</span>;   p<span class="sy0">.</span>11=<span class="nu0">31</span>;  p<span class="sy0">.</span>12=<span class="nu0">37</span><br/>&#160;<br/>f<span class="sy0">.</span>=                                    <span class="coMULTI">/*(below) a list of Fibonacci #s.*/</span><br/>f<span class="sy0">.</span>0=<span class="nu0">0</span>;f<span class="sy0">.</span>1=<span class="nu0">1</span>;f<span class="sy0">.</span>2=<span class="nu0">1</span>;f<span class="sy0">.</span>3=<span class="nu0">2</span>;f<span class="sy0">.</span>4=<span class="nu0">3</span>;f<span class="sy0">.</span>5=<span class="nu0">5</span>;f<span class="sy0">.</span>6=<span class="nu0">8</span>;f<span class="sy0">.</span>7=<span class="nu0">13</span>;f<span class="sy0">.</span>8=<span class="nu0">21</span>;f<span class="sy0">.</span>9=<span class="nu0">34</span>;f<span class="sy0">.</span>10=<span class="nu0">55</span><br/>&#160;<br/>             <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">while</span> p<span class="sy0">.</span>j<span class="sy0">\</span>==<span class="st0">''</span><br/>             c<span class="sy0">.</span>j=p<span class="sy0">.</span>j                   <span class="coMULTI">/*assign C array with some primes*/</span><br/>             <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span><br/>n=j-<span class="nu0">1</span><br/>             <span class="kw1">do</span> k=<span class="nu0">0</span>  <span class="kw2">while</span> f<span class="sy0">.</span>k<span class="sy0">\</span>==<span class="st0">''</span>;   n=n+<span class="nu0">1</span><br/>             c<span class="sy0">.</span>n=f<span class="sy0">.</span>k                   <span class="coMULTI">/*assign C array with fib numbers*/</span><br/>             <span class="kw3">end</span>   <span class="coMULTI">/*k*/</span><br/><span class="kw1">say</span> <span class="st0">'elements='</span> n<br/><span class="kw1">say</span><br/>             <span class="kw1">do</span> m=<span class="nu0">1</span>  <span class="kw2">for</span> n              <br/>             <span class="kw1">say</span> <span class="st0">'c.'</span>m<span class="st0">&quot;=&quot;</span>c<span class="sy0">.</span>m           <span class="coMULTI">/*show a &quot;merged&quot;  C  array nums.*/</span>   <br/>             <span class="kw3">end</span>   <span class="coMULTI">/*m*/</span><br/>                                       <span class="coMULTI">/*stick a fork in it, we're done.*/</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
elements= 23

c.1=2
c.2=3
c.3=5
c.4=7
c.5=11
c.6=13
c.7=17
c.8=19
c.9=23
c.10=27
c.11=31
c.12=37
c.13=0
c.14=1
c.15=1
c.16=2
c.17=3
c.18=5
c.19=8
c.20=13
c.21=21
c.22=34
c.23=55
</pre>
<h2><span class="mw-headline" id="Ring"><a href="/wiki/Category:Ring" title="Category:Ring">Ring</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=118" title="Edit section: Ring">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>arr1 = [1, 2, 3]<br/>arr2 = [4, 5, 6]<br/>arr3 = [7, 8, 9]<br/>arr4 = arr1 + arr2<br/>see arr4<br/>see nl<br/>arr5 = arr4 + arr3  <br/>see arr5<br/>&#160;</pre>
<h2><span class="mw-headline" id="RLaB"><a href="/wiki/Category:RLaB" title="Category:RLaB">RLaB</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=119" title="Edit section: RLaB">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In RLaB the matrices can be appended (column-wise) or stacked (row-wise).
Consider few examples:
</p>
<pre class="text highlighted_source">&#160;<br/>&gt;&gt; x = [1, 2, 3]<br/>&gt;&gt; y = [4, 5, 6]<br/>// appending matrix 'y' on the right from matrix 'x' is possible if the two matrices have<br/>// the same number of rows:<br/>&gt;&gt; z1 = [x, y]<br/>matrix columns 1 thru 6<br/>           1             2             3             4             5             6<br/>// stacking matrix 'y' below the matrix 'x' is possible if the two matrices have<br/>// the same number of columns:<br/>&gt;&gt; z2  = [x; y]<br/>           1             2             3<br/>           4             5             6<br/>&gt;&gt;<br/>&#160;</pre>
<h2><span class="mw-headline" id="Ruby"><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=120" title="Edit section: Ruby">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The <code><a rel="nofollow" class="external text" href="http://www.ruby-doc.org/core/classes/Array.html#M002209">Array#+</a></code> method concatenates two arrays and returns a new array. The <code><a rel="nofollow" class="external text" href="http://www.ruby-doc.org/core/classes/Array.html#M002166">Array#concat</a></code> method appends elements of another array to the receiver.
</p>
<pre class="ruby highlighted_source">arr1 = <span class="br0">&#91;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#93;</span><br/>arr2 = <span class="br0">&#91;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#93;</span><br/>arr3 = <span class="br0">&#91;</span><span class="nu0">7</span>, <span class="nu0">8</span>, <span class="nu0">9</span><span class="br0">&#93;</span><br/>arr4 = arr1 <span class="sy0">+</span> arr2  <span class="co1"># =&gt; [1, 2, 3, 4, 5, 6]</span><br/>arr4.<span class="me1">concat</span><span class="br0">&#40;</span>arr3<span class="br0">&#41;</span>  <span class="co1"># =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></pre>
<p>Or use flatten(1):
</p>
<pre class="ruby highlighted_source">&#160;<br/><span class="co1"># concat multiple arrays:</span><br/><span class="br0">&#91;</span>arr1,arr2,arr3<span class="br0">&#93;</span>.<span class="me1">flatten</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><br/><span class="co1"># ignore nil:</span><br/><span class="br0">&#91;</span>arr1,arr2,arr3<span class="br0">&#93;</span>.<span class="me1">compact</span>.<span class="me1">flatten</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="br0">&#41;</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Rust"><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=121" title="Edit section: Rust">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">fn main() {<br/>    let a_vec: Vec&lt;i32&gt; = vec![1, 2, 3, 4, 5];<br/>    let b_vec: Vec&lt;i32&gt; = vec![6; 5];<br/>&#160;<br/>    let c_vec = concatenate_arrays::&lt;i32&gt;(a_vec.as_slice(), b_vec.as_slice());<br/>&#160;<br/>    println!(&quot;{:?} ~ {:?} =&gt; {:?}&quot;, a_vec, b_vec, c_vec);<br/>}<br/>&#160;<br/>fn concatenate_arrays&lt;T: Clone&gt;(x: &amp;[T], y: &amp;[T]) -&gt; Vec&lt;T&gt; {<br/>    let mut concat: Vec&lt;T&gt; = vec![x[0].clone(); x.len()];<br/>&#160;<br/>    concat.clone_from_slice(x);<br/>    concat.extend_from_slice(y);<br/>&#160;<br/>    concat<br/>}<br/>&#160;</pre>
<h2><span class="mw-headline" id="S-lang"><a href="/wiki/Category:S-lang" title="Category:S-lang">S-lang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=122" title="Edit section: S-lang">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">variable a = [1, 2, 3];<br/>variable b = [4, 5, 6];</pre>
<p>a+b is perfectly valid in S-Lang, but instead of the problem's desired
effect, it gives you a new array with each cooresponding element from
a and b added. Instead:
</p>
<pre class="text highlighted_source">variable la = length(a), c = _typeof(a)[la+length(b)];<br/>c[ [:la-1] ] = a;<br/>c[ [la:] ] = b;</pre>
<p>If you can make do with using lists not arrays for a and b, it's trivial:
</p>
<pre class="text highlighted_source">a = {1, 2, 3};<br/>b = {4, 5, 6};<br/>&#160;<br/>variable c = list_concat(a, b);</pre>
<p>behaves as in the array concatination above. Then, if you need an array:
</p>
<pre class="text highlighted_source">c = list_to_array(c);</pre>
<p>As an alternative:
</p>
<pre class="text highlighted_source">list_join(a, b);</pre>
<p>adds the elements of b onto a.
</p>
<h2><span class="mw-headline" id="Scala"><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=123" title="Edit section: Scala">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="scala highlighted_source"><a href="http://scala-lang.org"><span class="kw1">val</span></a> arr1 <span class="sy0">=</span> Array<span class="br0">&#40;</span> <span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span> <span class="br0">&#41;</span><br/><a href="http://scala-lang.org"><span class="kw1">val</span></a> arr2 <span class="sy0">=</span> Array<span class="br0">&#40;</span> <span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span> <span class="br0">&#41;</span><br/><a href="http://scala-lang.org"><span class="kw1">val</span></a> arr3 <span class="sy0">=</span> Array<span class="br0">&#40;</span> <span class="nu0">7</span>, <span class="nu0">8</span>, <span class="nu0">9</span> <span class="br0">&#41;</span><br/>&#160;<br/>arr1 ++ arr2 ++ arr3<br/><span class="co1">//or:</span><br/>Array concat <span class="br0">&#40;</span> arr1, arr2, arr3 <span class="br0">&#41;</span><br/><span class="co1">// res0: Array[Int] = Array(1, 2, 3, 4, 5, 6, 7, 8, 9)</span></pre>
<h2><span class="mw-headline" id="Scheme"><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=124" title="Edit section: Scheme">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="scheme highlighted_source"><span class="co1">; in r5rs, there is append for lists, but we'll need to define vector-append</span><br/><span class="br0">&#40;</span><span class="kw1">define</span> <span class="br0">&#40;</span>vector<span class="sy0">-</span><span class="kw1">append</span> . arg<span class="br0">&#41;</span> <span class="br0">&#40;</span>list<span class="sy0">-&gt;</span><span class="kw1">vector</span> <span class="br0">&#40;</span>apply <span class="kw1">append</span> <span class="br0">&#40;</span><span class="kw1">map</span> vector<span class="sy0">-&gt;</span><span class="kw1">list</span> arg<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/>&#160;<br/><span class="br0">&#40;</span>vector<span class="sy0">-</span><span class="kw1">append</span> #<span class="br0">&#40;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">&#41;</span> #<span class="br0">&#40;</span><span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span><span class="br0">&#41;</span> #<span class="br0">&#40;</span><span class="nu0">8</span> <span class="nu0">9</span> <span class="nu0">10</span><span class="br0">&#41;</span><span class="br0">&#41;</span><br/><span class="co1">; #(1 2 3 4 5 6 7 8 9 10)</span></pre>
<p><i>Note&#160;: vector-append is also defined in <a rel="nofollow" class="external text" href="http://srfi.schemers.org/srfi-43/srfi-43.html">SRFI-43</a>.</i>
</p>
<h2><span class="mw-headline" id="Seed7"><a href="/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=125" title="Edit section: Seed7">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">$ include &quot;seed7_05.s7i&quot;;<br/>&#160;<br/>var array integer: a is [] (1, 2, 3, 4);<br/>var array integer: b is [] (5, 6, 7, 8);<br/>var array integer: c is [] (9, 10);<br/>&#160;<br/>const proc: main is func<br/>  local<br/>    var integer: number is 0;<br/>  begin<br/>    c&#160;:= a &amp; b;<br/>    for number range c do<br/>      write(number &lt;&amp; &quot; &quot;);<br/>    end for;<br/>    writeln;<br/>  end func;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>1 2 3 4 5 6 7 8</pre>
<h2><span class="mw-headline" id="SETL"><a href="/wiki/Category:SETL" title="Category:SETL">SETL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=126" title="Edit section: SETL">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="haskell highlighted_source">A&#160;:<span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="br0">&#93;</span>;<br/>B&#160;:<span class="sy0">=</span> <span class="br0">&#91;</span><span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="br0">&#93;</span>;<br/><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span class="kw3">print</span></a><span class="br0">&#40;</span>A <span class="sy0">+</span> B<span class="br0">&#41;</span>; <span class="co1">-- [1 2 3 3 4 5]</span></pre>
<h2><span class="mw-headline" id="Sidef"><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=127" title="Edit section: Sidef">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="ruby highlighted_source">var arr1 = <span class="br0">&#91;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#93;</span>;<br/>var arr2 = <span class="br0">&#91;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#93;</span>;<br/>var arr3 = <span class="br0">&#40;</span>arr1 <span class="sy0">+</span> arr2<span class="br0">&#41;</span>;   <span class="co1"># =&gt; [1, 2, 3, 4, 5, 6]</span></pre>
<h2><span class="mw-headline" id="Slate"><a href="/wiki/Category:Slate" title="Category:Slate">Slate</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=128" title="Edit section: Slate">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The binary operation of concatenation is made with the <tt>;</tt> (semi-colon) from the type Sequence. It is also available for appending Sequences to WriteStreams.
</p>
<pre class="text highlighted_source">&#160;<br/>{1. 2. 3. 4. 5}&#160;; {6. 7. 8. 9. 10}<br/>&#160;</pre>
<h2><span class="mw-headline" id="Smalltalk"><a href="/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=129" title="Edit section: Smalltalk">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Concatenation (appending) is made with the method <tt>,</tt> (comma), present in classes SequenceableCollection, ArrayedCollection and their subclasses (e.g. Array, String, OrderedCollection ...)
</p>
<pre class="smalltalk highlighted_source">|<span class="re3">a b c</span>|<br/><span class="re6">a</span> <span class="sy0">:=</span> <span class="re2">#<span class="br0">&#40;</span><span class="re5">1</span> 2 3 4 5<span class="br0">&#41;</span></span>.<br/><span class="re5">b</span> <span class="sy0">:=</span> <span class="re2">#<span class="br0">&#40;</span><span class="re5">6</span> 7 8 9 10<span class="br0">&#41;</span></span>.<br/><span class="re5">c</span> <span class="sy0">:=</span> <span class="re5">a</span>,<span class="re5">b</span>.<br/><span class="re5">c</span> displayNl.</pre>
<h2><span class="mw-headline" id="SNOBOL4"><a href="/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=130" title="Edit section: SNOBOL4">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/mw/index.php?title=Macro_Spitbol&amp;action=edit&amp;redlink=1" class="new" title="Macro Spitbol (page does not exist)">Macro Spitbol</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Snobol4%2B" title="Snobol4+" class="mw-redirect">Snobol4+</a></div>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/mw/index.php?title=CSnobol&amp;action=edit&amp;redlink=1" class="new" title="CSnobol (page does not exist)">CSnobol</a></div>
<pre class="text highlighted_source">*       # Concatenate 2 arrays (vectors)<br/>        define('cat(a1,a2)i,j')&#160;:(cat_end)<br/>cat     cat = array(prototype(a1) + prototype(a2))<br/>cat1    i = i + 1; cat&lt;i&gt; = a1&lt;i&gt;&#160;:s(cat1)<br/>cat2    j = j + 1; cat&lt;i - 1 + j&gt; = a2&lt;j&gt;&#160;:s(cat2)f(return)<br/>cat_end<br/>&#160;<br/>*       # Fill arrays<br/>        str1 = '1 2 3 4 5'; arr1 = array(5)<br/>loop    i = i + 1; str1 len(p) span('0123456789') . arr1&lt;i&gt; @p&#160;:s(loop)<br/>        str2 = '6 7 8 9 10'; arr2 = array(5)<br/>loop2   j = j + 1; str2 len(q) span('0123456789') . arr2&lt;j&gt; @q&#160;:s(loop2)<br/>&#160;<br/>*       # Test and display<br/>        arr3 = cat(arr1,arr2)<br/>loop3   k = k + 1; str3 = str3 arr3&lt;k&gt; ' '&#160;:s(loop3)<br/>        output = str1<br/>        output = str2<br/>        output = str3<br/>end</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>1 2 3 4 5
6 7 8 9 10
1 2 3 4 5 6 7 8 9 10</pre>
<h2><span class="mw-headline" id="Standard_ML"><a href="/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=131" title="Edit section: Standard ML">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">&#160;<br/>val l1 = [1,2,3,4];;<br/>val l2 = [5,6,7,8];;<br/>val l3 = l1 @ l2 (* [1,2,3,4,5,6,7,8] *)<br/>&#160;</pre>
<h2><span class="mw-headline" id="Swift"><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=132" title="Edit section: Swift">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">let array1 = [1,2,3]<br/>let array2 = [4,5,6]<br/>let array3 = array1 + array2</pre>
<h2><span class="mw-headline" id="Tcl"><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=133" title="Edit section: Tcl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="tcl highlighted_source"><span class="kw1">set</span> a <span class="br0">&#123;</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">&#125;</span><br/><span class="kw1">set</span> b <span class="br0">&#123;</span><span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span><span class="br0">&#125;</span><br/><span class="kw1">set</span> ab <span class="br0">&#91;</span><span class="kw2">concat</span> <span class="re0">$a</span> <span class="re0">$b</span><span class="br0">&#93;</span><span class="sy0">;</span>   <span class="co1"># 1 2 3 4 5 6</span></pre>
<p>Note that in the Tcl language, “arrays” are hash maps of strings to variables, so the notion of concatenation doesn't really apply. What other languages (usually) call arrays are “lists” in Tcl.
</p>
<h2><span class="mw-headline" id="TI-89_BASIC"><a href="/wiki/Category:TI-89_BASIC" title="Category:TI-89 BASIC">TI-89 BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=134" title="Edit section: TI-89 BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>If <var>a</var> and <var>b</var> are lists, <code>augment(a, b)</code> concatenates them in the usual fashion. If <var>a</var> and <var>b</var> are matrices, then <code>augment(a, b)</code> produces a matrix whose columns are the columns of <var>a</var> followed by the columns of <var>b</var>, i.e. an <a href="http://en.wikipedia.org/wiki/augmented_matrix" class="extiw" title="wp:augmented matrix">augmented matrix</a>.
</p>
<pre style="font-family: &#39;TI Uni&#39;;">
■ augment({1,2}, {3,4})
    {1,2,3,4}
■ augment([[1][2]], [[3][4]])
    [[1,3][2,4]]</pre>
<p>That last example as displayed in pretty-printing mode:
</p><p><span><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML">
<semantics>
<mrow class="MJX-TeXAtom-ORD">
<mstyle displaystyle="true" scriptlevel="0">
<mi>augment</mi>
<mo>&#x2061; </mo>
<mrow>
<mo>(</mo>
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mn>1</mn>
</mtd>
</mtr>
<mtr>
<mtd>
<mn>2</mn>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
<mo>,</mo>
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mn>3</mn>
</mtd>
</mtr>
<mtr>
<mtd>
<mn>4</mn>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
<mo>)</mo>
</mrow>
</mstyle>
</mrow>
<annotation encoding="application/x-tex">{\displaystyle \operatorname {augment} \left({\begin{bmatrix}1\\2\end{bmatrix}},{\begin{bmatrix}3\\4\end{bmatrix}}\right)}</annotation>
</semantics>
</math></span><meta class="mwe-math-fallback-image-inline" aria-hidden="true" style="background-image: url(&#39;/mw/index.php?title=Special:MathShowImage&amp;hash=587239fa837a626c86c1e8486a3abb4f&amp;mode=mathml&#39;); background-repeat: no-repeat; background-size: 100% 100%; vertical-align: -2.505ex;height: 6.176ex; width: 22.143ex;"/></span>
</p>
<dl><dd><span><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML">
<semantics>
<mrow class="MJX-TeXAtom-ORD">
<mstyle displaystyle="true" scriptlevel="0">
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mn>1</mn>
</mtd>
<mtd>
<mn>3</mn>
</mtd>
</mtr>
<mtr>
<mtd>
<mn>2</mn>
</mtd>
<mtd>
<mn>4</mn>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
</mstyle>
</mrow>
<annotation encoding="application/x-tex">{\displaystyle {\begin{bmatrix}1&amp;3\\2&amp;4\end{bmatrix}}}</annotation>
</semantics>
</math></span><meta class="mwe-math-fallback-image-inline" aria-hidden="true" style="background-image: url(&#39;/mw/index.php?title=Special:MathShowImage&amp;hash=166381cd0ffba8658a5035d6603cb802&amp;mode=mathml&#39;); background-repeat: no-repeat; background-size: 100% 100%; vertical-align: -2.505ex;height: 6.176ex; width: 7.896ex;"/></span></dd></dl>
<p>Concatenation in the other direction may of course be done by transposition:
</p>
<pre style="font-family: &#39;TI Uni&#39;;">
■ augment([[x][y]], [[z][w]])
    [[x][y][z][w]]</pre>
<p><span><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML">
<semantics>
<mrow class="MJX-TeXAtom-ORD">
<mstyle displaystyle="true" scriptlevel="0">
<msup>
<mrow>
<mo>(</mo>
<mi>augment</mi>
<mo>&#x2061; </mo>
<mrow>
<mo>(</mo>
<msup>
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mi>x</mi>
</mtd>
</mtr>
<mtr>
<mtd>
<mi>y</mi>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
<mrow class="MJX-TeXAtom-ORD">
<mrow class="MJX-TeXAtom-ORD">
<mi mathvariant="normal">T</mi>
</mrow>
</mrow>
</msup>
<mo>,</mo>
<msup>
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mi>z</mi>
</mtd>
</mtr>
<mtr>
<mtd>
<mi>w</mi>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
<mrow class="MJX-TeXAtom-ORD">
<mrow class="MJX-TeXAtom-ORD">
<mi mathvariant="normal">T</mi>
</mrow>
</mrow>
</msup>
<mo>)</mo>
</mrow>
<mo>)</mo>
</mrow>
<mrow class="MJX-TeXAtom-ORD">
<mrow class="MJX-TeXAtom-ORD">
<mi mathvariant="normal">T</mi>
</mrow>
</mrow>
</msup>
</mstyle>
</mrow>
<annotation encoding="application/x-tex">{\displaystyle \left(\operatorname {augment} \left({\begin{bmatrix}x\\y\end{bmatrix}}^{\mathrm {T} },{\begin{bmatrix}z\\w\end{bmatrix}}^{\mathrm {T} }\right)\right)^{\mathrm {T} }}</annotation>
</semantics>
</math></span><meta class="mwe-math-fallback-image-inline" aria-hidden="true" style="background-image: url(&#39;/mw/index.php?title=Special:MathShowImage&amp;hash=f3b29f5f7c6ee11c51d8653af04ccb46&amp;mode=mathml&#39;); background-repeat: no-repeat; background-size: 100% 100%; vertical-align: -3.171ex;height: 8.009ex; width: 31.053ex;"/></span>
</p>
<dl><dd><span><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;"><math xmlns="http://www.w3.org/1998/Math/MathML">
<semantics>
<mrow class="MJX-TeXAtom-ORD">
<mstyle displaystyle="true" scriptlevel="0">
<mrow class="MJX-TeXAtom-ORD">
<mrow>
<mo>[</mo>
<mtable rowspacing="4pt" columnspacing="1em">
<mtr>
<mtd>
<mi>x</mi>
</mtd>
</mtr>
<mtr>
<mtd>
<mi>y</mi>
</mtd>
</mtr>
<mtr>
<mtd>
<mi>z</mi>
</mtd>
</mtr>
<mtr>
<mtd>
<mi>w</mi>
</mtd>
</mtr>
</mtable>
<mo>]</mo>
</mrow>
</mrow>
</mstyle>
</mrow>
<annotation encoding="application/x-tex">{\displaystyle {\begin{bmatrix}x\\y\\z\\w\end{bmatrix}}}</annotation>
</semantics>
</math></span><meta class="mwe-math-fallback-image-inline" aria-hidden="true" style="background-image: url(&#39;/mw/index.php?title=Special:MathShowImage&amp;hash=754b566517f551e7f6c90fa6eb6584fe&amp;mode=mathml&#39;); background-repeat: no-repeat; background-size: 100% 100%; vertical-align: -5.671ex;height: 12.509ex; width: 5.548ex;"/></span></dd></dl>
<h2><span class="mw-headline" id="Trith"><a href="/wiki/Category:Trith" title="Category:Trith">Trith</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=135" title="Edit section: Trith">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">[1 2 3] [4 5 6] concat</pre>
<h2><span class="mw-headline" id="UNIX_Shell"><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=136" title="Edit section: UNIX Shell">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Using proper built-in Bash arrays:
</p>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Bash" title="Bash" class="mw-redirect">bash</a></div>
<pre class="bash highlighted_source"><span class="re2">array1</span>=<span class="br0">&#40;</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="br0">&#41;</span><br/><span class="re2">array2</span>=<span class="br0">&#40;</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span> <span class="nu0">10</span> <span class="br0">&#41;</span><br/><span class="re2">botharrays</span>=<span class="br0">&#40;</span> <span class="co1">${array1[@]}</span> <span class="co1">${array2[@]}</span> <span class="br0">&#41;</span></pre>
<p>Whitespace-delimited strings work in much the same way:
</p>
<div class="examplemeta workswith"><b>Works with</b>: <a href="/wiki/Bash" title="Bash" class="mw-redirect">bash</a></div>
<pre class="bash highlighted_source"><span class="re2">array1</span>=<span class="st_h">'1 2 3 4 5'</span><br/><span class="re2">array2</span>=<span class="st_h">'6 7 8 9 10'</span><br/>&#160;<br/><span class="co0"># Concatenated to a Bash array ...</span><br/><span class="re2">botharrays_a</span>=<span class="br0">&#40;</span> <span class="re1">$array1</span> <span class="re1">$array2</span> <span class="br0">&#41;</span><br/>&#160;<br/><span class="co0"># Concatenated to a string ...</span><br/><span class="re2">botharrays_s</span>=<span class="st0">&quot;<span class="es2">$array1</span> <span class="es2">$array2</span>&quot;</span></pre>
<h2><span class="mw-headline" id="Ursa"><a href="/wiki/Category:Ursa" title="Category:Ursa">Ursa</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=137" title="Edit section: Ursa">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source"># create two streams (the ursa equivalent of arrays)<br/># a contains the numbers 1-10, b contains 11-20<br/>decl int&lt;&gt; a b<br/>decl int i<br/>for (set i 1) (&lt; i 11) (inc i)<br/>        append i a<br/>end for<br/>for (set i 11) (&lt; i 21) (inc i)<br/>        append i b<br/>end for<br/>&#160;<br/># append the values in b to a<br/>append b a<br/>&#160;<br/># output a to the console<br/>out a endl console</pre>
<h2><span class="mw-headline" id="Vala"><a href="/wiki/Category:Vala" title="Category:Vala">Vala</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=138" title="Edit section: Vala">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="vala highlighted_source"><span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> array_concat<span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span>a,<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span>b<span class="br0">&#41;</span><span class="br0">&#123;</span>	<br/>	<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> c <span class="sy0">=</span> <span class="kw3">new</span> <span class="kw4">int</span><span class="br0">&#91;</span>a.<span class="me1">length</span> <span class="sy0">+</span> b.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span><br/>	Memory.<span class="me1">copy</span><span class="br0">&#40;</span>c, a, a.<span class="me1">length</span> <span class="sy0">*</span> <span class="kw3">sizeof</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	Memory.<span class="me1">copy</span><span class="br0">&#40;</span><span class="sy0">&amp;</span>c<span class="br0">&#91;</span>a.<span class="me1">length</span><span class="br0">&#93;</span>, b, b.<span class="me1">length</span> <span class="sy0">*</span> <span class="kw3">sizeof</span><span class="br0">&#40;</span><span class="kw4">int</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">return</span> c<span class="sy0">;</span><br/><span class="br0">&#125;</span><br/><span class="kw1">void</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span><br/>	<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> a <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span>,<span class="nu0">2</span>,<span class="nu0">3</span>,<span class="nu0">4</span>,<span class="nu0">5</span><span class="br0">&#125;</span><span class="sy0">;</span><br/>	<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> b <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">6</span>,<span class="nu0">7</span>,<span class="nu0">8</span><span class="br0">&#125;</span><span class="sy0">;</span><br/>	<span class="kw4">int</span><span class="br0">&#91;</span><span class="br0">&#93;</span> c <span class="sy0">=</span> array_concat<span class="br0">&#40;</span>a,b<span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="kw1">foreach</span><span class="br0">&#40;</span><span class="kw4">int</span> i <span class="kw1">in</span> c<span class="br0">&#41;</span><span class="br0">&#123;</span><br/>		stdout.<span class="me1">printf</span><span class="br0">&#40;</span><span class="st0">&quot;%d<span class="es0">\n</span>&quot;</span>,i<span class="br0">&#41;</span><span class="sy0">;</span><br/>	<span class="br0">&#125;</span><br/><span class="br0">&#125;</span></pre>
<h2><span class="mw-headline" id="VBScript"><a href="/wiki/Category:VBScript" title="Category:VBScript">VBScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=139" title="Edit section: VBScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="vb highlighted_source"><span class="kw2">Function</span> ArrayConcat(arr1, arr2)<br/>    <span class="kw4">ReDim</span> ret(<span class="kw4">UBound</span>(arr1) + <span class="kw4">UBound</span>(arr2) + 1)<br/>    <span class="kw3">For</span> i = 0 <span class="kw3">To</span> <span class="kw4">UBound</span>(arr1)<br/>        ret(i) = arr1(i)<br/>    <span class="kw3">Next</span><br/>    offset = <span class="kw4">Ubound</span>(arr1) + 1<br/>    <span class="kw3">For</span> i = 0 <span class="kw3">To</span> <span class="kw4">UBound</span>(arr2)<br/>        ret(i + offset) = arr2(i)<br/>    <span class="kw3">Next</span><br/>    ArrayConcat = ret<br/><span class="kw3">End</span> <span class="kw2">Function</span><br/>&#160;<br/>arr1 = array(10,20,30)<br/>arr2 = array(40,50,60)<br/>WScript.Echo <span class="st0">&quot;arr1 = array(&quot;</span> &amp; Join(arr1,<span class="st0">&quot;, &quot;</span>) &amp; <span class="st0">&quot;)&quot;</span><br/>WScript.Echo <span class="st0">&quot;arr2 = array(&quot;</span> &amp; Join(arr2,<span class="st0">&quot;, &quot;</span>) &amp; <span class="st0">&quot;)&quot;</span><br/>arr3 = ArrayConcat(arr1, arr2)<br/>WScript.Echo <span class="st0">&quot;arr1 + arr2 = array(&quot;</span> &amp; Join(arr3,<span class="st0">&quot;, &quot;</span>) &amp; <span class="st0">&quot;)&quot;</span></pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>
arr1 = array(10, 20, 30)
arr2 = array(40, 50, 60)
arr1 + arr2 = array(10, 20, 30, 40, 50, 60)
</pre>
<h2><span class="mw-headline" id="Visual_Basic_.NET"><a href="/wiki/Category:Visual_Basic_.NET" title="Category:Visual Basic .NET">Visual Basic .NET</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=140" title="Edit section: Visual Basic .NET">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="vbnet highlighted_source">&#160;<br/>    <span class="kw1">Dim</span> iArray1<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw2">Integer</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">&#125;</span><br/>    <span class="kw1">Dim</span> iArray2<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw2">Integer</span> <span class="sy0">=</span> <span class="br0">&#123;</span><span class="nu0">4</span>, <span class="nu0">5</span>, <span class="nu0">6</span><span class="br0">&#125;</span><br/>    <span class="kw1">Dim</span> iArray3<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">As</span> <span class="kw2">Integer</span> <span class="sy0">=</span> <span class="kw1">Nothing</span><br/>&#160;<br/>    iArray3 <span class="sy0">=</span> iArray1<span class="sy0">.</span><span class="me1">Concat</span><span class="br0">&#40;</span>iArray2<span class="br0">&#41;</span><span class="sy0">.</span><span class="me1">ToArray</span><br/>&#160;</pre>
<h2><span class="mw-headline" id="Wart"><a href="/wiki/Category:Wart" title="Category:Wart">Wart</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=141" title="Edit section: Wart">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Wart doesn't have arrays yet, just lists.
</p>
<pre class="text highlighted_source">a &lt;- '(1 2 3)<br/>b &lt;- '(4 5 6)<br/>a+b<br/># =&gt; (1 2 3 4 5 6)</pre>
<h2><span class="mw-headline" id="Wren"><a href="/wiki/Category:Wren" title="Category:Wren">Wren</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=142" title="Edit section: Wren">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">var arr1 = [1,2,3]<br/>var arr2 = [4,5,6]<br/>for (e in arr2) {<br/>    arr1.add(e)<br/>}<br/>System.print(arr1)<br/>&#160;</pre>
<div>
<dl><dt>Output:</div></dt></dl>
<pre>[1, 2, 3, 4, 5, 6]</pre>
<h2><span class="mw-headline" id="Yacas"><a href="/wiki/Category:Yacas" title="Category:Yacas">Yacas</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=143" title="Edit section: Yacas">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">Concat({1,2,3}, {4,5,6})<br/>&#160;<br/>Out&gt; {1, 2, 3, 4, 5, 6}</pre>
<h2><span class="mw-headline" id="Yorick"><a href="/wiki/Category:Yorick" title="Category:Yorick">Yorick</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=144" title="Edit section: Yorick">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<pre class="text highlighted_source">a = [1,2,3];<br/>b = [4,5,6];<br/>ab = grow(a, b);</pre>
<h2><span class="mw-headline" id="zkl"><a href="/wiki/Category:Zkl" title="Category:Zkl">zkl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=145" title="Edit section: zkl">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Lists (both mutable and read only), no built in support for numeric vectors/arrays/matrices
</p>
<pre class="text highlighted_source">T(1,2).extend(T(4,5,6)) //--&gt;L(1,2,4,5,6)<br/>T(1,2).extend(4,5,6)    //--&gt;L(1,2,4,5,6)</pre>
<h2><span class="mw-headline" id="Zsh"><a href="/wiki/Category:Zsh" title="Category:Zsh">Zsh</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=146" title="Edit section: Zsh">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Concatenating arrays.
</p>
<pre class="text highlighted_source">a=(1 2 3)<br/>b=(a b c)<br/>&#160;<br/>c=($a $b)</pre>
<p>Pushing a single element into an array.
</p>
<pre class="text highlighted_source">a+=4</pre>
<p>Pushing another array into an array.
</p>
<pre class="text highlighted_source">a+=($b)</pre>
<p><br/>
</p>
<h2><span class="mw-headline" id="ZX_Spectrum_Basic"><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Array_concatenation&amp;action=edit&amp;section=147" title="Edit section: ZX Spectrum Basic">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="examplemeta translation"><b>Translation of</b>: <a href="#Liberty_BASIC">Liberty BASIC</a></div>
<pre class="zxbasic highlighted_source"><span class="nu0">10</span> <span class="kw1">LET</span> x=<span class="nu0">10</span><br/><span class="nu0">20</span> <span class="kw1">LET</span> y=<span class="nu0">20</span><br/><span class="nu0">30</span> <span class="kw1">DIM</span> a<span class="br0">&#40;</span>x<span class="br0">&#41;</span><br/><span class="nu0">40</span> <span class="kw1">DIM</span> b<span class="br0">&#40;</span>y<span class="br0">&#41;</span><br/><span class="nu0">50</span> <span class="kw1">DIM</span> c<span class="br0">&#40;</span>x+y<span class="br0">&#41;</span><br/><span class="nu0">60</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> x<br/><span class="nu0">70</span> <span class="kw1">LET</span> c<span class="br0">&#40;</span>i<span class="br0">&#41;</span>=a<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/><span class="nu0">80</span> <span class="kw1">NEXT</span> i<br/><span class="nu0">90</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> y<br/><span class="nu0">100</span> <span class="kw1">LET</span> c<span class="br0">&#40;</span>x+i<span class="br0">&#41;</span>=b<span class="br0">&#40;</span>i<span class="br0">&#41;</span><br/><span class="nu0">110</span> <span class="kw1">NEXT</span> i<br/><span class="nu0">120</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> x+y<br/><span class="nu0">130</span> <span class="kw1">PRINT</span> c<span class="br0">&#40;</span>i<span class="br0">&#41;</span>;<span class="st0">&quot;, &quot;</span>;<br/><span class="nu0">140</span> <span class="kw1">NEXT</span> i<br/>&#160;</pre>
 
 
 
</div><div class="printfooter">
Retrieved from "<a dir="ltr" href="http://rosettacode.org/mw/index.php?title=Array_concatenation&amp;oldid=239785">http://rosettacode.org/mw/index.php?title=Array_concatenation&amp;oldid=239785</a>"</div>
</div>
 
<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: <ul><li><a href="/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li><li><a href="/wiki/Category:Data_Structures" title="Category:Data Structures">Data Structures</a></li><li><a href="/wiki/Category:Simple" title="Category:Simple">Simple</a></li><li><a href="/wiki/Category:ACL2" title="Category:ACL2">ACL2</a></li><li><a href="/wiki/Category:ActionScript" title="Category:ActionScript">ActionScript</a></li><li><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></li><li><a href="/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></li><li><a href="/wiki/Category:AntLang" title="Category:AntLang">AntLang</a></li><li><a href="/wiki/Category:APL" title="Category:APL">APL</a></li><li><a href="/wiki/Category:Apex" title="Category:Apex">Apex</a></li><li><a href="/wiki/Category:AppleScript" title="Category:AppleScript">AppleScript</a></li><li><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></li><li><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></li><li><a href="/wiki/Category:AWK" title="Category:AWK">AWK</a></li><li><a href="/wiki/Category:Babel" title="Category:Babel">Babel</a></li><li><a href="/wiki/Category:Bash" class="mw-redirect" title="Category:Bash">Bash</a></li><li><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li><li><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></li><li><a href="/wiki/Category:Burlesque" title="Category:Burlesque">Burlesque</a></li><li><a href="/wiki/Category:C" title="Category:C">C</a></li><li><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li><li><a href="/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li><li><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></li><li><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li><li><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></li><li><a href="/wiki/Category:CoffeeScript" title="Category:CoffeeScript">CoffeeScript</a></li><li><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li><li><a href="/wiki/Category:Component_Pascal" title="Category:Component Pascal">Component Pascal</a></li><li><a href="/wiki/Category:D" title="Category:D">D</a></li><li><a href="/wiki/Category:Delphi" title="Category:Delphi">Delphi</a></li><li><a href="/wiki/Category:E" title="Category:E">E</a></li><li><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></li><li><a href="/wiki/Category:ECL" title="Category:ECL">ECL</a></li><li><a href="/wiki/Category:Efene" title="Category:Efene">Efene</a></li><li><a href="/wiki/Category:EGL" title="Category:EGL">EGL</a></li><li><a href="/wiki/Category:Ela" title="Category:Ela">Ela</a></li><li><a href="/wiki/Category:Elena" title="Category:Elena">Elena</a></li><li><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></li><li><a href="/wiki/Category:Elm" title="Category:Elm">Elm</a></li><li><a href="/wiki/Category:Emacs_Lisp" title="Category:Emacs Lisp">Emacs Lisp</a></li><li><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li><li><a href="/wiki/Category:ERRE" title="Category:ERRE">ERRE</a></li><li><a href="/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></li><li><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F Sharp</a></li><li><a href="/wiki/Category:FBSL" title="Category:FBSL">FBSL</a></li><li><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></li><li><a href="/wiki/Category:Fantom" title="Category:Fantom">Fantom</a></li><li><a href="/wiki/Category:Forth" title="Category:Forth">Forth</a></li><li><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></li><li><a href="/wiki/Category:FreeBASIC" title="Category:FreeBASIC">FreeBASIC</a></li><li><a href="/wiki/Category:Frink" title="Category:Frink">Frink</a></li><li><a href="/wiki/Category:FunL" title="Category:FunL">FunL</a></li><li><a href="/wiki/Category:Futhark" title="Category:Futhark">Futhark</a></li><li><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></li><li><a href="/wiki/Category:Go" title="Category:Go">Go</a></li><li><a href="/wiki/Category:Gosu" title="Category:Gosu">Gosu</a></li><li><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></li><li><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li><li><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></li><li><a href="/wiki/Category:I" title="Category:I">I</a></li><li><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a></li><li><a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></li><li><a href="/wiki/Category:IDL" title="Category:IDL">IDL</a></li><li><a href="/wiki/Category:Inform_7" title="Category:Inform 7">Inform 7</a></li><li><a href="/wiki/Category:Ioke" title="Category:Ioke">Ioke</a></li><li><a href="/wiki/Category:J" title="Category:J">J</a></li><li><a href="/wiki/Category:Java" title="Category:Java">Java</a></li><li><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li><li><a href="/wiki/Category:Jq" title="Category:Jq">Jq</a></li><li><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></li><li><a href="/wiki/Category:K" title="Category:K">K</a></li><li><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></li><li><a href="/wiki/Category:LabVIEW" title="Category:LabVIEW">LabVIEW</a></li><li><a href="/wiki/Category:Lang5" title="Category:Lang5">Lang5</a></li><li><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></li><li><a href="/wiki/Category:LFE" title="Category:LFE">LFE</a></li><li><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></li><li><a href="/wiki/Category:Lingo" title="Category:Lingo">Lingo</a></li><li><a href="/wiki/Category:Little" title="Category:Little">Little</a></li><li><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></li><li><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></li><li><a href="/wiki/Category:Maple" title="Category:Maple">Maple</a></li><li><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></li><li><a href="/wiki/Category:Wolfram_Language" title="Category:Wolfram Language">Wolfram Language</a></li><li><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></li><li><a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></li><li><a href="/wiki/Category:Maxima" title="Category:Maxima">Maxima</a></li><li><a href="/wiki/Category:Mercury" title="Category:Mercury">Mercury</a></li><li><a href="/wiki/Category:Nemerle" title="Category:Nemerle">Nemerle</a></li><li><a href="/wiki/Category:NetRexx" title="Category:NetRexx">NetRexx</a></li><li><a href="/wiki/Category:NewLISP" title="Category:NewLISP">NewLISP</a></li><li><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></li><li><a href="/wiki/Category:Oberon-2" title="Category:Oberon-2">Oberon-2</a></li><li><a href="/wiki/Category:Objeck" title="Category:Objeck">Objeck</a></li><li><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li><li><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li><li><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></li><li><a href="/wiki/Category:Onyx" title="Category:Onyx">Onyx</a></li><li><a href="/wiki/Category:OoRexx" title="Category:OoRexx">OoRexx</a></li><li><a href="/wiki/Category:Order" title="Category:Order">Order</a></li><li><a href="/wiki/Category:OxygenBasic" title="Category:OxygenBasic">OxygenBasic</a></li><li><a href="/wiki/Category:Oz" title="Category:Oz">Oz</a></li><li><a href="/wiki/Category:PARI/GP" title="Category:PARI/GP">PARI/GP</a></li><li><a href="/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></li><li><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></li><li><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li><li><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></li><li><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></li><li><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li><li><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></li><li><a href="/wiki/Category:PostScript" title="Category:PostScript">PostScript</a></li><li><a href="/wiki/Category:Initlib" title="Category:Initlib">Initlib</a></li><li><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></li><li><a href="/wiki/Category:Prolog" title="Category:Prolog">Prolog</a></li><li><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li><li><a href="/wiki/Category:Python" title="Category:Python">Python</a></li><li><a href="/wiki/Category:R" title="Category:R">R</a></li><li><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></li><li><a href="/wiki/Category:RapidQ" title="Category:RapidQ">RapidQ</a></li><li><a href="/wiki/Category:REBOL" title="Category:REBOL">REBOL</a></li><li><a href="/wiki/Category:Retro" title="Category:Retro">Retro</a></li><li><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></li><li><a href="/wiki/Category:Ring" title="Category:Ring">Ring</a></li><li><a href="/wiki/Category:RLaB" title="Category:RLaB">RLaB</a></li><li><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li><li><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></li><li><a href="/wiki/Category:S-lang" title="Category:S-lang">S-lang</a></li><li><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></li><li><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li><li><a href="/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></li><li><a href="/wiki/Category:SETL" title="Category:SETL">SETL</a></li><li><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></li><li><a href="/wiki/Category:Slate" title="Category:Slate">Slate</a></li><li><a href="/wiki/Category:Smalltalk" title="Category:Smalltalk">Smalltalk</a></li><li><a href="/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></li><li><a href="/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></li><li><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></li><li><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li><li><a href="/wiki/Category:TI-89_BASIC" title="Category:TI-89 BASIC">TI-89 BASIC</a></li><li><a href="/wiki/Category:Trith" title="Category:Trith">Trith</a></li><li><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></li><li><a href="/wiki/Category:Ursa" title="Category:Ursa">Ursa</a></li><li><a href="/wiki/Category:Vala" title="Category:Vala">Vala</a></li><li><a href="/wiki/Category:VBScript" title="Category:VBScript">VBScript</a></li><li><a href="/wiki/Category:Visual_Basic_.NET" title="Category:Visual Basic .NET">Visual Basic .NET</a></li><li><a href="/wiki/Category:Wart" title="Category:Wart">Wart</a></li><li><a href="/wiki/Category:Wren" title="Category:Wren">Wren</a></li><li><a href="/wiki/Category:Yacas" title="Category:Yacas">Yacas</a></li><li><a href="/wiki/Category:Yorick" title="Category:Yorick">Yorick</a></li><li><a href="/wiki/Category:Zkl" title="Category:Zkl">Zkl</a></li><li><a href="/wiki/Category:Zsh" title="Category:Zsh">Zsh</a></li><li><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></li></ul></div></div>
</div>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<nav class="navbar navbar-default p-tb " id="p-tb">
<ul class="nav navbar-nav small">
<li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Array_concatenation" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
<li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Array_concatenation" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
<li id="t-print"><a href="/mw/index.php?title=Array_concatenation&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
<li id="t-permalink"><a href="/mw/index.php?title=Array_concatenation&amp;oldid=239785" title="Permanent link to this revision of the page">Permanent link</a></li>
<li id="t-info"><a href="/mw/index.php?title=Array_concatenation&amp;action=info" title="More information about this page">Page information</a></li>
<li id="t-smwbrowselink"><a href="/wiki/Special:Browse/Array_concatenation" rel="smw-browse">Browse properties</a></li>
</ul>
</nav>
</div>
</div>
<div class="row">
<div class="col-lg-12">
 
<ul class="footer-info list-unstyled small" id="footer-info">
 
<li> This page was last modified on 13 December 2016, at 00:12.</li>
<li>Content is available under <a class="external" rel="nofollow" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a> unless otherwise noted.</li>
</ul>
</div>
</div>
<div class="row">
<div class="col-lg-6">
 
<ul class="list-inline footer-places " id="footer-places">
<li><small><a href="/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></small></li>
<li><small><a href="/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></small></li>
<li><small><a href="/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></small></li>
</ul>
</div>
<div class="col-lg-6">
 
<ul class="list-inline pull-right footer-icons " id="footer-icons">
 
<li><a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="/mw/resources/assets/licenses/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"/></a></li>
 
<li><a href="//www.mediawiki.org/"><img src="/mw/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/mw/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /mw/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"/></a></li>
<li><a href="https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="/mw/extensions/SemanticMediaWiki/includes/../resources/images/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"/></a></li>
</ul>
</div>
</div>
</div><script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({"user":"ready","user.groups":"ready"});mw.loader.load(["ext.math.scripts","mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.bootstrap.scripts"]);
} );</script>
<script type="text/javascript">/* CloudFlare analytics upgrade */
</script>
<script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgBackendResponseTime":891});
} );</script></body>
</html>